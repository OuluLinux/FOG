#define YY_FogParser_h_included
#define YY_USE_CLASS

/*  A Bison++ parser, made from FogParser.y  */

 /* with Bison++ version bison++ Version 1.21.9-1, adapted from GNU bison by coetmeur@icdc.fr
Maintained by Magnus Ekdahl <magnus@debian.org>
  */

#define YY_USE_CLASS
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Bob Corbett and Richard Stallman

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  

   As a special exception, when this file is copied by Bison++ into a
   Bison++ output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison, and has been in Bison++ since 1.21.9.  

*/

/* HEADER SECTION */
#if defined( _MSDOS ) || defined(MSDOS) || defined(__MSDOS__) 
 #define __MSDOS_AND_ALIKE
#endif

#if defined(_WINDOWS) && defined(_MSC_VER)
 #define __HAVE_NO_ALLOCA
 #define __MSDOS_AND_ALIKE
#endif

#ifndef alloca
 #if defined( __GNUC__)
  #define alloca __builtin_alloca

 #elif (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc)  || defined (__sgi)
  #include <alloca.h>

 #elif defined (__MSDOS_AND_ALIKE)
  #include <malloc.h>
  #ifndef __TURBOC__
   /* MS C runtime lib */
   #define alloca _alloca
  #endif

 #elif defined(_AIX)
  /* pragma must be put before any C/C++ instruction !! */
  #pragma alloca
  #include <malloc.h>

 #elif defined(__hpux)
  #ifdef __cplusplus
   extern "C" {
     void *alloca (unsigned int);
   };
  #else /* not __cplusplus */
   void *alloca ();
  #endif /* not __cplusplus */

 #endif /* not _AIX  not MSDOS, or __TURBOC__ or _AIX, not sparc.  */
#endif /* alloca not defined.  */

#ifdef c_plusplus
 #ifndef __cplusplus
  #define __cplusplus
 #endif
#endif

#ifdef __cplusplus
 #ifndef YY_USE_CLASS
/*#warning "For C++ its recomended to use bison++, otherwise classes won't be generated"*/
 #endif
#else
 #ifndef __STDC__
  #define const
 #endif
 #ifdef YY_USE_CLASS
  #error "This is a C++ header generated by bison++, please use a C++ compiler!"
 #endif
#endif

#include <stdio.h>
#define YYBISON 1  

#include <Fog/FogIncludeAll.h>

#define YACC_BANG() push_bang()
#define YACC_UNBANG(bangValue, msg) pop_bang(bangValue); yyerrok; yyclearin; Super::error(msg);


#define YY_FogParser_DEBUG  1
#define YY_FogParser_ENUM_TOKEN  FogParserEnums
#define YY_FogParser_STYPE  FogParserValue
#define YY_FogParser_INHERIT  : public FogParserMaker
#define YY_FogParser_MEMBERS  \
    typedef FogParserMaker Super; \
    typedef FogParser This; \
    TYPEDECL_SINGLE(This, Super) \
    YACC_BANG_TYPE _bang; \
private: \
    void advance_search(); \
    void end_search(FogToken *aToken); \
    void make_result(FogToken *aResult); \
    YACC_MARK_TYPE mark(); \
    YACC_MARK_TYPE mark_type1(); \
    void pop_bang(YACC_BANG_TYPE bangValue); \
    YACC_BANG_TYPE push_bang(); \
    void remark(YACC_MARK_TYPE anIndex); \
    void remark_type1(YACC_MARK_TYPE anIndex); \
    void rewind_colon(YACC_MARK_TYPE aMark, const FogToken *aToken = 0); \
    void start_search(bool enableType1 = false); \
    void template_test(); \
    void unmark(const FogToken *aToken = 0); \
public: \
    virtual ~FogParser(); \
    virtual int yy_debug() const { return yydebug; } \
    void yydiag(const char *msg) { Super::diagnostic(msg); } \
    void yywarn(const char *msg); \
    static void terminate();
#define YY_FogParser_CONSTRUCTOR_PARAM  FogLexerTower& aLexer, FogToken& firstToken, const char *aTitle, int aDepth
#define YY_FogParser_CONSTRUCTOR_INIT  : Super(aLexer, firstToken, aTitle, aDepth), _bang(0)
#define YY_FogParser_CONSTRUCTOR_CODE  \
    YY_FogParser_DEBUG_FLAG = Fog::debug_yacc(); \
    CONDMSG(YY_FogParser_DEBUG_FLAG, "\n\nStarting " << title() << " parser.");

/* %{ and %header{ and %union, during decl */
#define YY_FogParser_BISON 1

#ifndef YY_FogParser_COMPATIBILITY
 #ifndef YY_USE_CLASS
  #define  YY_FogParser_COMPATIBILITY 1
 #else
  #define  YY_FogParser_COMPATIBILITY 0
 #endif
#endif

#if YY_FogParser_COMPATIBILITY != 0
 /* backward compatibility */
 #ifdef YYLTYPE
  #ifndef YY_FogParser_LTYPE
   #define YY_FogParser_LTYPE YYLTYPE
  #endif
 #endif
/* Testing alternative bison solution
   /#ifdef YYSTYPE*/
#ifndef YY_FogParser_STYPE 
   #define YY_FogParser_STYPE YYSTYPE
#endif
/*#endif*/
 #ifdef YYDEBUG
  #ifndef YY_FogParser_DEBUG
   #define  YY_FogParser_DEBUG YYDEBUG
  #endif
 #endif
 
 /* use goto to be compatible */
 #ifndef YY_FogParser_USE_GOTO
  #define YY_FogParser_USE_GOTO 1
 #endif
#endif

/* use no goto to be clean in C++ */
#ifndef YY_FogParser_USE_GOTO
 #define YY_FogParser_USE_GOTO 0
#endif

#ifndef YY_FogParser_PURE
/*  YY_FogParser_PURE */
#endif

/* section apres lecture def, avant lecture grammaire S2 */
/* prefix */
#ifndef YY_FogParser_DEBUG
#define YY_FogParser_DEBUG 1
/* YY_FogParser_DEBUG */
#endif


#ifndef YY_FogParser_LSP_NEEDED
 /* YY_FogParser_LSP_NEEDED*/
#endif



/* DEFAULT LTYPE*/
#ifdef YY_FogParser_LSP_NEEDED
#ifndef YY_FogParser_LTYPE
#ifndef BISON_YYLTYPE_ISDECLARED
#define BISON_YYLTYPE_ISDECLARED
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#endif
#define YY_FogParser_LTYPE yyltype
#endif
#endif
/* DEFAULT STYPE*/
      /* We used to use `unsigned long' as YY_FogParser_STYPE on MSDOS,
	 but it seems better to be consistent.
	 Most programs should declare their own type anyway.  */

#ifndef YY_FogParser_STYPE
#define YY_FogParser_STYPE int
#endif
/* DEFAULT MISCELANEOUS */
#ifndef YY_FogParser_PARSE
#define YY_FogParser_PARSE yyparse
#endif
#ifndef YY_FogParser_LEX
#define YY_FogParser_LEX yylex
#endif
#ifndef YY_FogParser_LVAL
#define YY_FogParser_LVAL yylval
#endif
#ifndef YY_FogParser_LLOC
#define YY_FogParser_LLOC yylloc
#endif
#ifndef YY_FogParser_CHAR
#define YY_FogParser_CHAR yychar
#endif
#ifndef YY_FogParser_NERRS
#define YY_FogParser_NERRS yynerrs
#endif
#ifndef YY_FogParser_DEBUG_FLAG
#define YY_FogParser_DEBUG_FLAG yydebug
#endif
#ifndef YY_FogParser_ERROR
#define YY_FogParser_ERROR yyerror
#endif

#ifndef YY_FogParser_PARSE_PARAM
 #ifndef YY_USE_CLASS
  #ifdef YYPARSE_PARAM
   #define YY_FogParser_PARSE_PARAM void* YYPARSE_PARAM 
  #else
   #ifndef __STDC__
    #ifndef __cplusplus
     #define YY_FogParser_PARSE_PARAM
    #endif
   #endif
  #endif
 #endif
 #ifndef YY_FogParser_PARSE_PARAM
  #define YY_FogParser_PARSE_PARAM void
 #endif
#endif

#if YY_FogParser_COMPATIBILITY != 0
/* backward compatibility */
#ifdef YY_FogParser_LTYPE
#ifndef YYLTYPE
#define YYLTYPE YY_FogParser_LTYPE
#else
/* WARNING obsolete !!! user defined YYLTYPE not reported into generated header */
#endif
#endif

/* Removed due to bison compabilityproblems
/#ifndef YYSTYPE
/#define YYSTYPE YY_FogParser_STYPE
/#else*/
/* WARNING obsolete !!! user defined YYSTYPE not reported into generated header */
/*#endif*/

#ifdef YY_FogParser_PURE
#  ifndef YYPURE
#    define YYPURE YY_FogParser_PURE
#  endif
#endif

#ifdef YY_FogParser_DEBUG
#  ifndef YYDEBUG
#    define YYDEBUG YY_FogParser_DEBUG 
#  endif
#endif

#ifndef YY_FogParser_ERROR_VERBOSE
 #ifdef YYERROR_VERBOSE
  #define YY_FogParser_ERROR_VERBOSE YYERROR_VERBOSE
 #endif
#endif

#ifndef YY_FogParser_LSP_NEEDED
#  ifdef YYLSP_NEEDED
#    define YY_FogParser_LSP_NEEDED YYLSP_NEEDED
#  endif
#endif

#endif

#ifndef YY_USE_CLASS
/* TOKEN C */
#define	PRIVATE	286
#define	PROTECTED	287
#define	PUBLIC	288
#define	BOOL	399
#define	CHAR	400
#define	DOUBLE	401
#define	FLOAT	402
#define	INT	403
#define	LONG	404
#define	SHORT	405
#define	SIGNED	406
#define	UNSIGNED	407
#define	VOID	408
#define	WCHAR_T	409
#define	CLASS	263
#define	ENUM	272
#define	NAMESPACE	283
#define	STRUCT	295
#define	TYPENAME	304
#define	UNION	305
#define	CONST	264
#define	VOLATILE	308
#define	AUTO	259
#define	EXPLICIT	273
#define	EXPORT	274
#define	EXTERN	275
#define	FRIEND	278
#define	INLINE	281
#define	MUTABLE	282
#define	REGISTER	289
#define	STATIC	293
#define	TEMPLATE	297
#define	TYPEDEF	302
#define	USING	306
#define	VIRTUAL	307
#define	ASM	258
#define	BREAK	260
#define	CASE	261
#define	CATCH	262
#define	CONST_CAST	265
#define	CONTINUE	266
#define	DEFAULT	267
#define	DELETE	268
#define	DO	269
#define	DYNAMIC_CAST	270
#define	ELSE	271
#define	FALSE	276
#define	FOR	277
#define	GOTO	279
#define	IF	280
#define	NEW	284
#define	OPERATOR	285
#define	REINTERPRET_CAST	290
#define	RETURN	291
#define	SIZEOF	292
#define	STATIC_CAST	294
#define	SWITCH	296
#define	THIS	298
#define	THROW	299
#define	TRUE	300
#define	TRY	301
#define	TYPEID	303
#define	WHILE	309
#define	FloatingLiteral	411
#define	IntegerLiteral	410
#define	BuiltInTypeSpecifier	335
#define	MetaType	338
#define	TreeLiteral	342
#define	DERIVED	347
#define	FILE	351
#define	GUARD	353
#define	IMPLEMENTATION	354
#define	INCLUDE	355
#define	INTERFACE	356
#define	ALL	368
#define	PLACEHOLDER	369
#define	PLACEMENT	370
#define	NOAUTO	371
#define	NOGUARD	357
#define	NOIMPLEMENTATION	358
#define	OVERLOAD	359
#define	PATH	360
#define	PREFIX	364
#define	PURE	365
#define	SUFFIX	366
#define	BODY	346
#define	ENTRY	349
#define	EXIT	350
#define	POST	362
#define	PRE	363
#define	EMIT	348
#define	FROZEN	352
#define	POOL	361
#define	UTILITY	367
#define	ELLIPSIS	310
#define	SCOPE	311
#define	SHL	312
#define	SHR	313
#define	EQ	314
#define	NE	315
#define	LE	316
#define	GE	317
#define	LOG_AND	318
#define	LOG_OR	319
#define	INC	320
#define	DEC	321
#define	ARROW	322
#define	ARROW_STAR	323
#define	DOT_STAR	324
#define	ASS_ADD	325
#define	ASS_AND	326
#define	ASS_DIV	327
#define	ASS_MOD	328
#define	ASS_MUL	329
#define	ASS_OR	330
#define	ASS_SHL	331
#define	ASS_SHR	332
#define	ASS_SUB	333
#define	ASS_XOR	334
#define	CharacterLiteral	336
#define	Identifier	337
#define	NewLine	339
#define	NumberLiteral	340
#define	StringLiteral	341
#define	ERROR	343
#define	NIL	344
#define	RAMMARG	345
#define	HASH_BLANK	372
#define	HASH_DEFINE	373
#define	HASH_ELIF	374
#define	HASH_ELSE	375
#define	HASH_ENDIF	376
#define	HASH_ERROR	377
#define	HASH_IF	378
#define	HASH_IFDEF	379
#define	HASH_IFNDEF	380
#define	HASH_INCLUDE	381
#define	HASH_LINE	382
#define	HASH_PRAGMA	383
#define	HASH_UNDEF	384
#define	HASH_HASH	385
#define	DI_HASH_HASH	386
#define	DI_HASH	387
#define	DI_SQUARE	388
#define	DI_ERAUQS	389
#define	DI_ECARB	390
#define	DEFINED	391
#define	DO_FUNCTION	392
#define	MacroId	393
#define	Punct	394
#define	Text	395
#define	SHIFT_THERE	396
#define	REDUCE_HERE_MOSTLY	397
#define	REDUCE_HERE	398

 /* #defines tokens */
#else
/* CLASS */
#ifndef YY_FogParser_CLASS
#define YY_FogParser_CLASS FogParser
#endif
#ifndef YY_FogParser_INHERIT
#define YY_FogParser_INHERIT
#endif
#ifndef YY_FogParser_MEMBERS
#define YY_FogParser_MEMBERS 
#endif
#ifndef YY_FogParser_LEX_BODY
#define YY_FogParser_LEX_BODY  
#endif
#ifndef YY_FogParser_ERROR_BODY
#define YY_FogParser_ERROR_BODY  
#endif
#ifndef YY_FogParser_CONSTRUCTOR_PARAM
#define YY_FogParser_CONSTRUCTOR_PARAM
#endif
#ifndef YY_FogParser_CONSTRUCTOR_CODE
#define YY_FogParser_CONSTRUCTOR_CODE
#endif
#ifndef YY_FogParser_CONSTRUCTOR_INIT
#define YY_FogParser_CONSTRUCTOR_INIT
#endif
/* choose between enum and const */
#ifndef YY_FogParser_USE_CONST_TOKEN
#define YY_FogParser_USE_CONST_TOKEN 0
/* yes enum is more compatible with flex,  */
/* so by default we use it */ 
#endif
#if YY_FogParser_USE_CONST_TOKEN != 0
#ifndef YY_FogParser_ENUM_TOKEN
#define YY_FogParser_ENUM_TOKEN yy_FogParser_enum_token
#endif
#endif

class YY_FogParser_CLASS YY_FogParser_INHERIT
{
public: 
#if YY_FogParser_USE_CONST_TOKEN != 0
/* static const int token ... */
static const int PRIVATE;
static const int PROTECTED;
static const int PUBLIC;
static const int BOOL;
static const int CHAR;
static const int DOUBLE;
static const int FLOAT;
static const int INT;
static const int LONG;
static const int SHORT;
static const int SIGNED;
static const int UNSIGNED;
static const int VOID;
static const int WCHAR_T;
static const int CLASS;
static const int ENUM;
static const int NAMESPACE;
static const int STRUCT;
static const int TYPENAME;
static const int UNION;
static const int CONST;
static const int VOLATILE;
static const int AUTO;
static const int EXPLICIT;
static const int EXPORT;
static const int EXTERN;
static const int FRIEND;
static const int INLINE;
static const int MUTABLE;
static const int REGISTER;
static const int STATIC;
static const int TEMPLATE;
static const int TYPEDEF;
static const int USING;
static const int VIRTUAL;
static const int ASM;
static const int BREAK;
static const int CASE;
static const int CATCH;
static const int CONST_CAST;
static const int CONTINUE;
static const int DEFAULT;
static const int DELETE;
static const int DO;
static const int DYNAMIC_CAST;
static const int ELSE;
static const int FALSE;
static const int FOR;
static const int GOTO;
static const int IF;
static const int NEW;
static const int OPERATOR;
static const int REINTERPRET_CAST;
static const int RETURN;
static const int SIZEOF;
static const int STATIC_CAST;
static const int SWITCH;
static const int THIS;
static const int THROW;
static const int TRUE;
static const int TRY;
static const int TYPEID;
static const int WHILE;
static const int FloatingLiteral;
static const int IntegerLiteral;
static const int BuiltInTypeSpecifier;
static const int MetaType;
static const int TreeLiteral;
static const int DERIVED;
static const int FILE;
static const int GUARD;
static const int IMPLEMENTATION;
static const int INCLUDE;
static const int INTERFACE;
static const int ALL;
static const int PLACEHOLDER;
static const int PLACEMENT;
static const int NOAUTO;
static const int NOGUARD;
static const int NOIMPLEMENTATION;
static const int OVERLOAD;
static const int PATH;
static const int PREFIX;
static const int PURE;
static const int SUFFIX;
static const int BODY;
static const int ENTRY;
static const int EXIT;
static const int POST;
static const int PRE;
static const int EMIT;
static const int FROZEN;
static const int POOL;
static const int UTILITY;
static const int ELLIPSIS;
static const int SCOPE;
static const int SHL;
static const int SHR;
static const int EQ;
static const int NE;
static const int LE;
static const int GE;
static const int LOG_AND;
static const int LOG_OR;
static const int INC;
static const int DEC;
static const int ARROW;
static const int ARROW_STAR;
static const int DOT_STAR;
static const int ASS_ADD;
static const int ASS_AND;
static const int ASS_DIV;
static const int ASS_MOD;
static const int ASS_MUL;
static const int ASS_OR;
static const int ASS_SHL;
static const int ASS_SHR;
static const int ASS_SUB;
static const int ASS_XOR;
static const int CharacterLiteral;
static const int Identifier;
static const int NewLine;
static const int NumberLiteral;
static const int StringLiteral;
static const int ERROR;
static const int NIL;
static const int RAMMARG;
static const int HASH_BLANK;
static const int HASH_DEFINE;
static const int HASH_ELIF;
static const int HASH_ELSE;
static const int HASH_ENDIF;
static const int HASH_ERROR;
static const int HASH_IF;
static const int HASH_IFDEF;
static const int HASH_IFNDEF;
static const int HASH_INCLUDE;
static const int HASH_LINE;
static const int HASH_PRAGMA;
static const int HASH_UNDEF;
static const int HASH_HASH;
static const int DI_HASH_HASH;
static const int DI_HASH;
static const int DI_SQUARE;
static const int DI_ERAUQS;
static const int DI_ECARB;
static const int DEFINED;
static const int DO_FUNCTION;
static const int MacroId;
static const int Punct;
static const int Text;
static const int SHIFT_THERE;
static const int REDUCE_HERE_MOSTLY;
static const int REDUCE_HERE;

 /* decl const */
#else
enum YY_FogParser_ENUM_TOKEN { YY_FogParser_NULL_TOKEN=0
	,PRIVATE=286
	,PROTECTED=287
	,PUBLIC=288
	,BOOL=399
	,CHAR=400
	,DOUBLE=401
	,FLOAT=402
	,INT=403
	,LONG=404
	,SHORT=405
	,SIGNED=406
	,UNSIGNED=407
	,VOID=408
	,WCHAR_T=409
	,CLASS=263
	,ENUM=272
	,NAMESPACE=283
	,STRUCT=295
	,TYPENAME=304
	,UNION=305
	,CONST=264
	,VOLATILE=308
	,AUTO=259
	,EXPLICIT=273
	,EXPORT=274
	,EXTERN=275
	,FRIEND=278
	,INLINE=281
	,MUTABLE=282
	,REGISTER=289
	,STATIC=293
	,TEMPLATE=297
	,TYPEDEF=302
	,USING=306
	,VIRTUAL=307
	,ASM=258
	,BREAK=260
	,CASE=261
	,CATCH=262
	,CONST_CAST=265
	,CONTINUE=266
	,DEFAULT=267
	,DELETE=268
	,DO=269
	,DYNAMIC_CAST=270
	,ELSE=271
	,FALSE=276
	,FOR=277
	,GOTO=279
	,IF=280
	,NEW=284
	,OPERATOR=285
	,REINTERPRET_CAST=290
	,RETURN=291
	,SIZEOF=292
	,STATIC_CAST=294
	,SWITCH=296
	,THIS=298
	,THROW=299
	,TRUE=300
	,TRY=301
	,TYPEID=303
	,WHILE=309
	,FloatingLiteral=411
	,IntegerLiteral=410
	,BuiltInTypeSpecifier=335
	,MetaType=338
	,TreeLiteral=342
	,DERIVED=347
	,FILE=351
	,GUARD=353
	,IMPLEMENTATION=354
	,INCLUDE=355
	,INTERFACE=356
	,ALL=368
	,PLACEHOLDER=369
	,PLACEMENT=370
	,NOAUTO=371
	,NOGUARD=357
	,NOIMPLEMENTATION=358
	,OVERLOAD=359
	,PATH=360
	,PREFIX=364
	,PURE=365
	,SUFFIX=366
	,BODY=346
	,ENTRY=349
	,EXIT=350
	,POST=362
	,PRE=363
	,EMIT=348
	,FROZEN=352
	,POOL=361
	,UTILITY=367
	,ELLIPSIS=310
	,SCOPE=311
	,SHL=312
	,SHR=313
	,EQ=314
	,NE=315
	,LE=316
	,GE=317
	,LOG_AND=318
	,LOG_OR=319
	,INC=320
	,DEC=321
	,ARROW=322
	,ARROW_STAR=323
	,DOT_STAR=324
	,ASS_ADD=325
	,ASS_AND=326
	,ASS_DIV=327
	,ASS_MOD=328
	,ASS_MUL=329
	,ASS_OR=330
	,ASS_SHL=331
	,ASS_SHR=332
	,ASS_SUB=333
	,ASS_XOR=334
	,CharacterLiteral=336
	,Identifier=337
	,NewLine=339
	,NumberLiteral=340
	,StringLiteral=341
	,ERROR=343
	,NIL=344
	,RAMMARG=345
	,HASH_BLANK=372
	,HASH_DEFINE=373
	,HASH_ELIF=374
	,HASH_ELSE=375
	,HASH_ENDIF=376
	,HASH_ERROR=377
	,HASH_IF=378
	,HASH_IFDEF=379
	,HASH_IFNDEF=380
	,HASH_INCLUDE=381
	,HASH_LINE=382
	,HASH_PRAGMA=383
	,HASH_UNDEF=384
	,HASH_HASH=385
	,DI_HASH_HASH=386
	,DI_HASH=387
	,DI_SQUARE=388
	,DI_ERAUQS=389
	,DI_ECARB=390
	,DEFINED=391
	,DO_FUNCTION=392
	,MacroId=393
	,Punct=394
	,Text=395
	,SHIFT_THERE=396
	,REDUCE_HERE_MOSTLY=397
	,REDUCE_HERE=398

 /* enum token */
     }; /* end of enum declaration */
#endif
public:
 int YY_FogParser_PARSE (YY_FogParser_PARSE_PARAM);
 virtual void YY_FogParser_ERROR(const char *msg) YY_FogParser_ERROR_BODY;
#ifdef YY_FogParser_PURE
#ifdef YY_FogParser_LSP_NEEDED
 virtual int  YY_FogParser_LEX (YY_FogParser_STYPE *YY_FogParser_LVAL,YY_FogParser_LTYPE *YY_FogParser_LLOC) YY_FogParser_LEX_BODY;
#else
 virtual int  YY_FogParser_LEX (YY_FogParser_STYPE *YY_FogParser_LVAL) YY_FogParser_LEX_BODY;
#endif
#else
 virtual int YY_FogParser_LEX() YY_FogParser_LEX_BODY;
 YY_FogParser_STYPE YY_FogParser_LVAL;
#ifdef YY_FogParser_LSP_NEEDED
 YY_FogParser_LTYPE YY_FogParser_LLOC;
#endif
 int   YY_FogParser_NERRS;
 int    YY_FogParser_CHAR;
#endif
#if YY_FogParser_DEBUG != 0
 int YY_FogParser_DEBUG_FLAG;   /*  nonzero means print parse trace     */
#endif
public:
 YY_FogParser_CLASS(YY_FogParser_CONSTRUCTOR_PARAM);
public:
 YY_FogParser_MEMBERS 
};
/* other declare folow */
#if YY_FogParser_USE_CONST_TOKEN != 0
const int YY_FogParser_CLASS::PRIVATE=286;
const int YY_FogParser_CLASS::PROTECTED=287;
const int YY_FogParser_CLASS::PUBLIC=288;
const int YY_FogParser_CLASS::BOOL=399;
const int YY_FogParser_CLASS::CHAR=400;
const int YY_FogParser_CLASS::DOUBLE=401;
const int YY_FogParser_CLASS::FLOAT=402;
const int YY_FogParser_CLASS::INT=403;
const int YY_FogParser_CLASS::LONG=404;
const int YY_FogParser_CLASS::SHORT=405;
const int YY_FogParser_CLASS::SIGNED=406;
const int YY_FogParser_CLASS::UNSIGNED=407;
const int YY_FogParser_CLASS::VOID=408;
const int YY_FogParser_CLASS::WCHAR_T=409;
const int YY_FogParser_CLASS::CLASS=263;
const int YY_FogParser_CLASS::ENUM=272;
const int YY_FogParser_CLASS::NAMESPACE=283;
const int YY_FogParser_CLASS::STRUCT=295;
const int YY_FogParser_CLASS::TYPENAME=304;
const int YY_FogParser_CLASS::UNION=305;
const int YY_FogParser_CLASS::CONST=264;
const int YY_FogParser_CLASS::VOLATILE=308;
const int YY_FogParser_CLASS::AUTO=259;
const int YY_FogParser_CLASS::EXPLICIT=273;
const int YY_FogParser_CLASS::EXPORT=274;
const int YY_FogParser_CLASS::EXTERN=275;
const int YY_FogParser_CLASS::FRIEND=278;
const int YY_FogParser_CLASS::INLINE=281;
const int YY_FogParser_CLASS::MUTABLE=282;
const int YY_FogParser_CLASS::REGISTER=289;
const int YY_FogParser_CLASS::STATIC=293;
const int YY_FogParser_CLASS::TEMPLATE=297;
const int YY_FogParser_CLASS::TYPEDEF=302;
const int YY_FogParser_CLASS::USING=306;
const int YY_FogParser_CLASS::VIRTUAL=307;
const int YY_FogParser_CLASS::ASM=258;
const int YY_FogParser_CLASS::BREAK=260;
const int YY_FogParser_CLASS::CASE=261;
const int YY_FogParser_CLASS::CATCH=262;
const int YY_FogParser_CLASS::CONST_CAST=265;
const int YY_FogParser_CLASS::CONTINUE=266;
const int YY_FogParser_CLASS::DEFAULT=267;
const int YY_FogParser_CLASS::DELETE=268;
const int YY_FogParser_CLASS::DO=269;
const int YY_FogParser_CLASS::DYNAMIC_CAST=270;
const int YY_FogParser_CLASS::ELSE=271;
const int YY_FogParser_CLASS::FALSE=276;
const int YY_FogParser_CLASS::FOR=277;
const int YY_FogParser_CLASS::GOTO=279;
const int YY_FogParser_CLASS::IF=280;
const int YY_FogParser_CLASS::NEW=284;
const int YY_FogParser_CLASS::OPERATOR=285;
const int YY_FogParser_CLASS::REINTERPRET_CAST=290;
const int YY_FogParser_CLASS::RETURN=291;
const int YY_FogParser_CLASS::SIZEOF=292;
const int YY_FogParser_CLASS::STATIC_CAST=294;
const int YY_FogParser_CLASS::SWITCH=296;
const int YY_FogParser_CLASS::THIS=298;
const int YY_FogParser_CLASS::THROW=299;
const int YY_FogParser_CLASS::TRUE=300;
const int YY_FogParser_CLASS::TRY=301;
const int YY_FogParser_CLASS::TYPEID=303;
const int YY_FogParser_CLASS::WHILE=309;
const int YY_FogParser_CLASS::FloatingLiteral=411;
const int YY_FogParser_CLASS::IntegerLiteral=410;
const int YY_FogParser_CLASS::BuiltInTypeSpecifier=335;
const int YY_FogParser_CLASS::MetaType=338;
const int YY_FogParser_CLASS::TreeLiteral=342;
const int YY_FogParser_CLASS::DERIVED=347;
const int YY_FogParser_CLASS::FILE=351;
const int YY_FogParser_CLASS::GUARD=353;
const int YY_FogParser_CLASS::IMPLEMENTATION=354;
const int YY_FogParser_CLASS::INCLUDE=355;
const int YY_FogParser_CLASS::INTERFACE=356;
const int YY_FogParser_CLASS::ALL=368;
const int YY_FogParser_CLASS::PLACEHOLDER=369;
const int YY_FogParser_CLASS::PLACEMENT=370;
const int YY_FogParser_CLASS::NOAUTO=371;
const int YY_FogParser_CLASS::NOGUARD=357;
const int YY_FogParser_CLASS::NOIMPLEMENTATION=358;
const int YY_FogParser_CLASS::OVERLOAD=359;
const int YY_FogParser_CLASS::PATH=360;
const int YY_FogParser_CLASS::PREFIX=364;
const int YY_FogParser_CLASS::PURE=365;
const int YY_FogParser_CLASS::SUFFIX=366;
const int YY_FogParser_CLASS::BODY=346;
const int YY_FogParser_CLASS::ENTRY=349;
const int YY_FogParser_CLASS::EXIT=350;
const int YY_FogParser_CLASS::POST=362;
const int YY_FogParser_CLASS::PRE=363;
const int YY_FogParser_CLASS::EMIT=348;
const int YY_FogParser_CLASS::FROZEN=352;
const int YY_FogParser_CLASS::POOL=361;
const int YY_FogParser_CLASS::UTILITY=367;
const int YY_FogParser_CLASS::ELLIPSIS=310;
const int YY_FogParser_CLASS::SCOPE=311;
const int YY_FogParser_CLASS::SHL=312;
const int YY_FogParser_CLASS::SHR=313;
const int YY_FogParser_CLASS::EQ=314;
const int YY_FogParser_CLASS::NE=315;
const int YY_FogParser_CLASS::LE=316;
const int YY_FogParser_CLASS::GE=317;
const int YY_FogParser_CLASS::LOG_AND=318;
const int YY_FogParser_CLASS::LOG_OR=319;
const int YY_FogParser_CLASS::INC=320;
const int YY_FogParser_CLASS::DEC=321;
const int YY_FogParser_CLASS::ARROW=322;
const int YY_FogParser_CLASS::ARROW_STAR=323;
const int YY_FogParser_CLASS::DOT_STAR=324;
const int YY_FogParser_CLASS::ASS_ADD=325;
const int YY_FogParser_CLASS::ASS_AND=326;
const int YY_FogParser_CLASS::ASS_DIV=327;
const int YY_FogParser_CLASS::ASS_MOD=328;
const int YY_FogParser_CLASS::ASS_MUL=329;
const int YY_FogParser_CLASS::ASS_OR=330;
const int YY_FogParser_CLASS::ASS_SHL=331;
const int YY_FogParser_CLASS::ASS_SHR=332;
const int YY_FogParser_CLASS::ASS_SUB=333;
const int YY_FogParser_CLASS::ASS_XOR=334;
const int YY_FogParser_CLASS::CharacterLiteral=336;
const int YY_FogParser_CLASS::Identifier=337;
const int YY_FogParser_CLASS::NewLine=339;
const int YY_FogParser_CLASS::NumberLiteral=340;
const int YY_FogParser_CLASS::StringLiteral=341;
const int YY_FogParser_CLASS::ERROR=343;
const int YY_FogParser_CLASS::NIL=344;
const int YY_FogParser_CLASS::RAMMARG=345;
const int YY_FogParser_CLASS::HASH_BLANK=372;
const int YY_FogParser_CLASS::HASH_DEFINE=373;
const int YY_FogParser_CLASS::HASH_ELIF=374;
const int YY_FogParser_CLASS::HASH_ELSE=375;
const int YY_FogParser_CLASS::HASH_ENDIF=376;
const int YY_FogParser_CLASS::HASH_ERROR=377;
const int YY_FogParser_CLASS::HASH_IF=378;
const int YY_FogParser_CLASS::HASH_IFDEF=379;
const int YY_FogParser_CLASS::HASH_IFNDEF=380;
const int YY_FogParser_CLASS::HASH_INCLUDE=381;
const int YY_FogParser_CLASS::HASH_LINE=382;
const int YY_FogParser_CLASS::HASH_PRAGMA=383;
const int YY_FogParser_CLASS::HASH_UNDEF=384;
const int YY_FogParser_CLASS::HASH_HASH=385;
const int YY_FogParser_CLASS::DI_HASH_HASH=386;
const int YY_FogParser_CLASS::DI_HASH=387;
const int YY_FogParser_CLASS::DI_SQUARE=388;
const int YY_FogParser_CLASS::DI_ERAUQS=389;
const int YY_FogParser_CLASS::DI_ECARB=390;
const int YY_FogParser_CLASS::DEFINED=391;
const int YY_FogParser_CLASS::DO_FUNCTION=392;
const int YY_FogParser_CLASS::MacroId=393;
const int YY_FogParser_CLASS::Punct=394;
const int YY_FogParser_CLASS::Text=395;
const int YY_FogParser_CLASS::SHIFT_THERE=396;
const int YY_FogParser_CLASS::REDUCE_HERE_MOSTLY=397;
const int YY_FogParser_CLASS::REDUCE_HERE=398;

 /* const YY_FogParser_CLASS::token */
#endif
/*apres const  */
YY_FogParser_CLASS::YY_FogParser_CLASS(YY_FogParser_CONSTRUCTOR_PARAM) YY_FogParser_CONSTRUCTOR_INIT
{
#if YY_FogParser_DEBUG != 0
YY_FogParser_DEBUG_FLAG=0;
#endif
YY_FogParser_CONSTRUCTOR_CODE;
};
#endif


#define	YYFINAL		1594
#define	YYFLAG		-32768
#define	YYNTBASE	188

#define YYTRANSLATE(x) ((unsigned)(x) <= 411 ? yytranslate[x] : 481)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,   187,   177,   185,   161,   183,   172,   174,   184,   162,
   163,   170,   168,   181,   169,   167,   171,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   165,   164,   179,
   178,   180,   166,   182,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   159,   186,   160,   173,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   157,   175,   158,   176,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,    38,    25,    39,
    40,    41,    17,    23,    42,    43,    44,    45,    46,    47,
    48,    18,    26,    27,    28,    49,    50,    29,    51,    52,
    30,    31,    19,    53,    54,     3,     4,     5,    32,    55,
    56,    57,    33,    58,    20,    59,    34,    60,    61,    62,
    63,    35,    64,    21,    22,    36,    37,    24,    65,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    68,   122,   123,    69,   124,   125,
   126,    70,   127,   128,   129,    88,    71,    93,    89,    90,
    72,    94,    73,    74,    75,    76,    81,    82,    83,    84,
    95,    91,    92,    85,    86,    87,    96,    77,    78,    79,
    80,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,     6,     7,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    67,
    66
};

#if YY_FogParser_DEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    10,    12,    14,    16,    18,
    20,    22,    24,    26,    28,    30,    32,    34,    36,    38,
    40,    42,    44,    46,    48,    54,    59,    63,    65,    67,
    69,    72,    75,    77,    80,    82,    85,    88,    91,    93,
    95,    98,   100,   103,   106,   108,   111,   113,   115,   117,
   119,   122,   127,   130,   133,   135,   138,   140,   143,   145,
   147,   149,   151,   153,   155,   157,   159,   161,   163,   165,
   167,   175,   178,   183,   187,   193,   195,   197,   199,   201,
   203,   207,   210,   213,   217,   218,   220,   225,   234,   242,
   248,   253,   257,   261,   265,   269,   272,   275,   283,   291,
   299,   307,   310,   311,   313,   315,   319,   321,   324,   327,
   330,   334,   337,   340,   343,   346,   349,   351,   354,   356,
   359,   362,   366,   371,   374,   379,   382,   385,   388,   391,
   393,   397,   402,   403,   407,   409,   412,   414,   418,   422,
   424,   428,   432,   436,   438,   442,   446,   448,   452,   456,
   458,   462,   466,   470,   474,   476,   480,   484,   486,   490,
   492,   496,   498,   502,   504,   508,   510,   514,   516,   522,
   524,   528,   532,   534,   536,   538,   540,   542,   544,   546,
   548,   550,   552,   554,   556,   557,   559,   561,   565,   567,
   569,   573,   577,   581,   583,   587,   591,   593,   597,   599,
   603,   605,   609,   611,   615,   617,   621,   623,   629,   631,
   635,   637,   639,   643,   645,   649,   652,   654,   658,   661,
   663,   665,   667,   669,   672,   675,   677,   679,   681,   683,
   687,   692,   696,   700,   707,   708,   711,   718,   724,   732,
   738,   739,   741,   743,   749,   757,   766,   768,   771,   774,
   778,   782,   784,   789,   798,   799,   803,   811,   814,   816,
   820,   823,   826,   828,   830,   832,   834,   836,   838,   840,
   842,   845,   849,   852,   855,   857,   860,   862,   864,   867,
   869,   871,   873,   876,   878,   880,   882,   884,   886,   889,
   891,   894,   899,   902,   905,   907,   910,   913,   915,   918,
   920,   922,   925,   927,   930,   932,   935,   937,   939,   942,
   944,   947,   949,   952,   956,   959,   961,   963,   965,   967,
   969,   971,   973,   975,   977,   979,   982,   984,   986,   988,
   990,   993,   995,   997,   999,  1002,  1006,  1010,  1013,  1017,
  1019,  1021,  1023,  1026,  1029,  1031,  1033,  1035,  1038,  1040,
  1042,  1044,  1046,  1048,  1051,  1054,  1058,  1061,  1064,  1068,
  1073,  1075,  1078,  1080,  1083,  1084,  1088,  1090,  1094,  1097,
  1099,  1103,  1105,  1109,  1112,  1118,  1122,  1127,  1133,  1137,
  1141,  1145,  1149,  1153,  1157,  1159,  1161,  1163,  1166,  1169,
  1171,  1174,  1176,  1179,  1181,  1183,  1186,  1188,  1191,  1192,
  1195,  1196,  1199,  1201,  1203,  1206,  1209,  1210,  1213,  1215,
  1216,  1218,  1221,  1225,  1230,  1233,  1237,  1241,  1242,  1244,
  1247,  1249,  1253,  1255,  1259,  1261,  1264,  1268,  1270,  1274,
  1276,  1278,  1280,  1283,  1285,  1287,  1291,  1294,  1296,  1299,
  1303,  1305,  1307,  1310,  1313,  1316,  1319,  1322,  1325,  1327,
  1331,  1335,  1338,  1340,  1342,  1344,  1348,  1353,  1356,  1362,
  1370,  1372,  1376,  1379,  1381,  1385,  1388,  1390,  1393,  1398,
  1404,  1409,  1413,  1416,  1418,  1420,  1422,  1427,  1436,  1439,
  1443,  1446,  1448,  1454,  1456,  1460,  1462,  1466,  1468,  1471,
  1474,  1478,  1481,  1483,  1485,  1487,  1489,  1492,  1495,  1498,
  1499,  1501,  1504,  1509,  1511,  1514,  1517,  1522,  1527,  1532,
  1534,  1537,  1539,  1541,  1543,  1545,  1547,  1549,  1551,  1553,
  1555,  1557,  1559,  1561,  1563,  1565,  1567,  1569,  1571,  1573,
  1575,  1577,  1579,  1581,  1583,  1585,  1587,  1589,  1591,  1593,
  1595,  1597,  1599,  1601,  1603,  1605,  1607,  1609,  1611,  1613,
  1616,  1619,  1622,  1625,  1628,  1633,  1635,  1639,  1641,  1645,
  1647,  1651,  1653,  1656,  1658,  1660,  1663,  1667,  1673,  1676,
  1678,  1682,  1684,  1689,  1692,  1696,  1698,  1701,  1707,  1709,
  1711,  1714,  1716,  1719,  1723,  1728,  1730,  1734,  1736,  1740,
  1742,  1745,  1749,  1754,  1759,  1763,  1767,  1769,  1772,  1774,
  1778,  1780,  1782,  1785,  1786,  1788,  1790,  1792,  1794,  1798,
  1801,  1803,  1805,  1807,  1810,  1812,  1815,  1817,  1819,  1821,
  1824,  1827,  1830,  1832,  1836,  1839,  1841,  1845,  1848,  1850,
  1852,  1855,  1857,  1861,  1866,  1873,  1880,  1881,  1884,  1891,
  1893,  1895,  1897,  1899,  1901,  1904,  1906,  1908,  1910,  1912,
  1914,  1916,  1918,  1920,  1922,  1925,  1928,  1931,  1934,  1936,
  1938,  1940,  1942,  1944,  1946,  1949,  1951,  1953,  1955,  1957,
  1959,  1961,  1963,  1965,  1967,  1969,  1971,  1973,  1975,  1977,
  1979,  1981,  1983,  1985,  1987,  1989,  1991,  1993,  1995,  1997,
  1999,  2001,  2003,  2005,  2007,  2009,  2011,  2013,  2015,  2017,
  2019,  2021,  2023,  2025,  2027,  2029,  2031,  2033,  2035,  2037,
  2039,  2041,  2043,  2045,  2047,  2049,  2051,  2053,  2055,  2057,
  2059,  2061,  2063,  2065,  2067,  2069,  2071,  2073,  2075,  2077,
  2079,  2081,  2083,  2085,  2087,  2089,  2091,  2093,  2095,  2097,
  2099,  2101,  2103,  2107,  2109,  2111,  2114,  2119,  2127,  2128,
  2131,  2138,  2141,  2143,  2147,  2150,  2152,  2154,  2158,  2163,
  2165,  2167,  2170,  2172,  2175,  2178,  2181,  2184,  2190,  2200,
  2202,  2204,  2207,  2211,  2214,  2216,  2218,  2220,  2222,  2224,
  2229,  2231,  2233,  2235,  2238,  2240,  2244,  2247,  2249,  2252,
  2256,  2262,  2264,  2266,  2268,  2270,  2272,  2274,  2276,  2278,
  2280,  2282,  2284,  2287,  2291,  2294,  2297,  2301,  2304,  2309,
  2313,  2321,  2327,  2335,  2341,  2347,  2356,  2358,  2360,  2363,
  2366,  2368,  2371,  2373,  2375,  2377,  2381,  2386,  2390,  2392,
  2394,  2399,  2403,  2407,  2410,  2413,  2415,  2418,  2421,  2424,
  2427,  2430,  2433,  2436,  2439,  2442,  2444,  2446,  2448,  2452,
  2456,  2460,  2462,  2466,  2470,  2472,  2476,  2480,  2482,  2486,
  2490,  2494,  2498,  2500,  2504,  2508,  2510,  2514,  2516,  2520,
  2522,  2526,  2528,  2532,  2534,  2538,  2540,  2546,  2549,  2553,
  2558,  2565,  2571,  2578,  2583,  2586,  2589,  2593,  2602,  2613,
  2621,  2631,  2633,  2637,  2640,  2645,  2647,  2649,  2651,  2653,
  2655,  2657,  2659,  2661,  2663,  2666,  2669,  2674,  2681,  2686,
  2688,  2690,  2692,  2694,  2697,  2700,  2705,  2711,  2716,  2722,
  2724,  2726,  2729,  2732,  2735,  2740,  2745,  2750,  2756,  2761,
  2767,  2772,  2778,  2780,  2782,  2784,  2786,  2788,  2792,  2796,
  2800,  2804,  2810,  2814,  2820,  2826,  2832,  2834,  2836,  2839,
  2841,  2845,  2849,  2851,  2855,  2861,  2863,  2865,  2869,  2873,
  2877,  2879,  2881,  2884,  2887,  2890,  2893,  2896,  2898,  2899,
  2900,  2901,  2902,  2903,  2904
};

static const short yyrhs[] = {   123,
     0,    69,     0,    71,     0,    72,     0,    73,     0,    74,
     0,    75,     0,    76,     0,    81,     0,    82,     0,    83,
     0,    84,     0,    85,     0,    86,     0,    87,     0,    77,
     0,    78,     0,    79,     0,    80,     0,   415,     0,   453,
     0,   188,     0,    70,     0,   189,     0,   189,   191,   168,
   376,   180,     0,   189,   191,   168,   180,     0,   189,   191,
   169,     0,   375,     0,   179,     0,    98,     0,    34,   192,
     0,   190,    98,     0,   190,     0,   193,   194,     0,   194,
     0,   192,   194,     0,   176,   190,     0,    34,   196,     0,
   359,     0,   367,     0,    34,   197,     0,   197,     0,   193,
   196,     0,   193,   198,     0,   198,     0,   192,   198,     0,
   195,     0,   199,     0,   196,     0,   293,     0,   201,   293,
     0,   201,    98,   176,   201,     0,   176,   201,     0,    34,
   202,     0,   202,     0,   193,   203,     0,   203,     0,   192,
   204,     0,   126,     0,    67,     0,   122,     0,    66,     0,
   205,     0,   208,     0,   125,     0,   205,     0,    70,     0,
    49,     0,    62,     0,   268,     0,   268,   480,   269,   161,
   474,     1,   161,     0,   183,   389,     0,   183,   157,   389,
   469,     0,   183,   474,     1,     0,   183,   157,   474,     1,
   469,     0,   206,     0,    60,     0,   283,     0,   211,     0,
   325,     0,   159,   239,   160,     0,    34,   325,     0,   328,
   164,     0,   212,   328,   164,     0,     0,   210,     0,   214,
   325,   213,   169,     0,   214,   325,   213,   168,   212,   476,
   157,     1,     0,   214,   325,   213,   168,   212,   476,     1,
     0,   214,   325,   213,   168,     1,     0,   214,   159,   239,
   160,     0,   214,   167,   200,     0,   214,   167,   204,     0,
   214,   109,   200,     0,   214,   109,   204,     0,   214,   107,
     0,   214,   108,     0,    47,   179,   321,   180,   162,   240,
   163,     0,    58,   179,   321,   180,   162,   240,   163,     0,
    55,   179,   321,   180,   162,   240,   163,     0,    42,   179,
   321,   180,   162,   240,   163,     0,    64,   326,     0,     0,
   216,     0,   237,     0,   216,   181,   237,     0,   214,     0,
   107,   224,     0,   108,   224,     0,   316,   224,     0,   284,
   314,   224,     0,   168,   224,     0,   169,   224,     0,   177,
   224,     0,   176,   224,     0,    57,   217,     0,   219,     0,
   192,   219,     0,   218,     0,   192,   218,     0,    45,   224,
     0,    53,   220,   223,     0,    53,   326,   220,   223,     0,
    53,   326,     0,    53,   326,   326,   223,     0,   290,   318,
     0,   290,   221,     0,   290,   220,     0,   316,   221,     0,
   222,     0,   159,   240,   160,     0,   222,   159,   241,   160,
     0,     0,   162,   215,   163,     0,   217,     0,   211,   224,
     0,   224,     0,   225,   111,   224,     0,   225,   110,   224,
     0,   225,     0,   226,   314,   225,     0,   226,   171,   225,
     0,   226,   172,   225,     0,   226,     0,   227,   168,   226,
     0,   227,   169,   226,     0,   227,     0,   228,    99,   227,
     0,   228,   100,   227,     0,   228,     0,   229,   179,   228,
     0,   229,   180,   228,     0,   229,   103,   228,     0,   229,
   104,   228,     0,   229,     0,   230,   101,   229,     0,   230,
   102,   229,     0,   230,     0,   231,   174,   230,     0,   231,
     0,   232,   173,   231,     0,   232,     0,   233,   175,   232,
     0,   233,     0,   234,   105,   233,     0,   234,     0,   235,
   106,   234,     0,   235,     0,   235,   166,   240,   165,   237,
     0,   236,     0,   235,   238,   237,     0,   235,   178,   343,
     0,   383,     0,   178,     0,   112,     0,   113,     0,   114,
     0,   115,     0,   116,     0,   117,     0,   118,     0,   119,
     0,   120,     0,   121,     0,     0,   240,     0,   237,     0,
   216,   181,   237,     0,   236,     0,   228,     0,   242,   179,
   228,     0,   242,   103,   228,     0,   242,   104,   228,     0,
   242,     0,   243,   101,   242,     0,   243,   102,   242,     0,
   243,     0,   244,   174,   243,     0,   244,     0,   245,   173,
   244,     0,   245,     0,   246,   175,   245,     0,   246,     0,
   247,   105,   246,     0,   247,     0,   248,   106,   247,     0,
   248,     0,   248,   166,   251,   165,   250,     0,   249,     0,
   248,   238,   250,     0,   384,     0,   250,     0,   252,   181,
   250,     0,   250,     0,   252,   181,   250,     0,   478,   254,
     0,   255,     0,   473,   168,   254,     0,   473,   169,     0,
   256,     0,   258,     0,   266,     0,   379,     0,    25,   256,
     0,    25,   448,     0,   257,     0,   260,     0,   263,     0,
   265,     0,   188,   165,   253,     0,    40,   241,   165,   253,
     0,    44,   165,   253,     0,   157,   259,   158,     0,   157,
   259,   253,   161,   474,   471,     0,     0,   259,   253,     0,
   259,   253,   161,   474,     1,   164,     0,    52,   162,   262,
   163,   253,     0,    52,   162,   262,   163,   253,    48,   253,
     0,    59,   162,   262,   163,   253,     0,     0,   262,     0,
   328,     0,    65,   162,   262,   163,   253,     0,    46,   253,
    65,   162,   240,   163,   164,     0,    50,   162,   264,   261,
   164,   239,   163,   253,     0,   276,     0,    39,   164,     0,
    43,   164,     0,    56,   239,   164,     0,    51,   189,   164,
     0,   274,     0,   157,   477,   268,   158,     0,   157,   477,
   268,   480,   269,   161,   474,   471,     0,     0,   268,   480,
   269,     0,   268,   480,   269,   161,   474,     1,   164,     0,
   479,   270,     0,   272,     0,   473,   168,   270,     0,   473,
   169,     0,   475,   272,     0,   274,     0,   335,     0,   369,
     0,   378,     0,   273,     0,   352,     0,   267,     0,   427,
     0,    25,   427,     0,    25,   421,   470,     0,    25,   448,
     0,    25,   426,     0,   449,     0,   452,   470,     0,   454,
     0,   458,     0,   468,   470,     0,   310,     0,   307,     0,
   305,     0,    34,   273,     0,   276,     0,   275,     0,   309,
     0,   306,     0,   308,     0,    34,   275,     0,   164,     0,
   312,   164,     0,   338,   181,   237,   164,     0,   311,   164,
     0,   287,   276,     0,   293,     0,   277,   293,     0,   277,
   286,     0,   277,     0,    34,   278,     0,   195,     0,   291,
     0,   279,   286,     0,   279,     0,   279,   277,     0,   280,
     0,   281,   280,     0,   199,     0,   281,     0,   281,   199,
     0,   278,     0,   278,   282,     0,   282,     0,   281,    98,
     0,   278,   281,    98,     0,   278,    98,     0,   288,     0,
   289,     0,    29,     0,    35,     0,   320,     0,   358,     0,
    36,     0,   285,     0,    25,     0,   285,     0,    34,   287,
     0,    32,     0,    33,     0,    31,     0,    28,     0,   177,
    33,     0,    26,     0,    30,     0,    37,     0,   177,    30,
     0,    30,   171,    74,     0,    30,   171,    76,     0,   177,
    37,     0,    37,   171,    86,     0,   292,     0,   291,     0,
   320,     0,   177,    23,     0,   177,    24,     0,   351,     0,
   296,     0,   294,     0,    34,   291,     0,   195,     0,   293,
     0,    68,     0,   348,     0,   295,     0,    21,   195,     0,
    18,   195,     0,    18,   195,   297,     0,    18,   297,     0,
   157,   298,     0,   157,   302,   298,     0,   157,   302,   181,
   299,     0,   158,     0,   474,   471,     0,   158,     0,   474,
   471,     0,     0,   474,     1,   181,     0,   300,     0,   302,
   181,   300,     0,   301,   303,     0,   304,     0,   304,   178,
   241,     0,   189,     0,    19,   195,   267,     0,    19,   267,
     0,    19,   195,   178,   195,   164,     0,    19,   195,   164,
     0,    36,    19,   195,   164,     0,    38,   162,   205,   163,
   164,     0,    28,   205,   269,     0,   237,   181,   312,     0,
   311,   181,   312,     0,   313,   181,   312,     0,   338,   181,
   355,     0,   338,   181,   313,     0,   237,     0,   355,     0,
   313,     0,   237,   409,     0,   355,   409,     0,   170,     0,
   314,   320,     0,   314,     0,   193,   315,     0,   174,     0,
   315,     0,   192,   315,     0,   316,     0,   316,   317,     0,
     0,   316,   318,     0,     0,   319,   320,     0,    23,     0,
    24,     0,   290,   322,     0,   290,   321,     0,     0,   316,
   322,     0,   324,     0,     0,   324,     0,   323,   325,     0,
   323,   159,   160,     0,   323,   159,   241,   160,     0,   326,
   319,     0,   326,   319,   385,     0,   162,   327,   163,     0,
     0,   328,     0,   328,    97,     0,   332,     0,   328,   181,
   332,     0,   317,     0,   226,   314,   318,     0,   329,     0,
   231,   174,     0,   231,   174,   329,     0,   330,     0,   330,
   178,   237,     0,    97,     0,   237,     0,   331,     0,   287,
   332,     0,   250,     0,   334,     0,   334,   178,   250,     0,
   287,   333,     0,   329,     0,   244,   174,     0,   244,   174,
   329,     0,   337,     0,   336,     0,   237,   339,     0,   237,
   341,     0,   287,   336,     0,   338,   339,     0,   338,   341,
     0,   287,   337,     0,   355,     0,   338,   181,   237,     0,
    63,   340,   380,     0,   361,   341,     0,   258,     0,   237,
     0,   343,     0,   157,   344,   158,     0,   157,   344,   181,
   158,     0,   157,   158,     0,   157,   345,   161,   474,   471,
     0,   157,   344,   181,   345,   161,   474,   471,     0,   345,
     0,   344,   181,   345,     0,   478,   346,     0,   342,     0,
   473,   168,   346,     0,   473,   169,     0,   165,     0,   350,
   195,     0,   350,   195,   347,     1,     0,   350,   195,   347,
   356,   157,     0,   350,   165,   356,   157,     0,   350,   195,
   157,     0,   350,   157,     0,    17,     0,    20,     0,    22,
     0,   349,   477,   268,   158,     0,   349,   477,   268,   480,
   269,   161,   474,   471,     0,   358,   165,     0,   237,   165,
   354,     0,   165,   354,     0,   235,     0,   235,   166,   354,
   165,   354,     0,   353,     0,   353,   178,   342,     0,   357,
     0,   356,   181,   357,     0,   195,     0,   358,   357,     0,
    37,   357,     0,   177,    37,   357,     0,    25,   357,     0,
   201,     0,     3,     0,     4,     0,     5,     0,    54,   360,
     0,   290,   318,     0,   290,   360,     0,     0,   362,     0,
   165,   363,     0,   165,   363,   474,     1,     0,   365,     0,
   364,   365,     0,   363,   181,     0,   363,   474,     1,   181,
     0,   363,   474,     1,   161,     0,   366,   162,   215,   163,
     0,   195,     0,    54,   368,     0,    53,     0,    45,     0,
   168,     0,   169,     0,   170,     0,   171,     0,   172,     0,
   173,     0,   174,     0,   175,     0,   176,     0,   177,     0,
   178,     0,   179,     0,   180,     0,   112,     0,   120,     0,
   116,     0,   114,     0,   115,     0,   121,     0,   113,     0,
   117,     0,    99,     0,   100,     0,   119,     0,   118,     0,
   101,     0,   102,     0,   103,     0,   104,     0,   105,     0,
   106,     0,   107,     0,   108,     0,   181,     0,   110,     0,
   109,     0,   162,   163,     0,   159,   160,     0,   370,   272,
     0,    27,   369,     0,   287,   369,     0,    34,   179,   371,
   180,     0,   372,     0,   371,   181,   372,     0,   373,     0,
   373,   178,   321,     0,   374,     0,   374,   178,   189,     0,
   333,     0,   474,     1,     0,    17,     0,    21,     0,   370,
    17,     0,   370,    17,   189,     0,    34,   189,   179,   376,
   180,     0,    34,   375,     0,   377,     0,   376,   181,   377,
     0,   333,     0,    34,   179,   180,   272,     0,   287,   378,
     0,    63,   258,   380,     0,   381,     0,   381,   380,     0,
    41,   162,   382,   163,   258,     0,   332,     0,    61,     0,
    61,   237,     0,    61,     0,    61,   250,     0,    61,   162,
   163,     0,    61,   162,   386,   163,     0,   321,     0,   386,
   181,   321,     0,   420,     0,   162,   389,   163,     0,   387,
     0,   387,    80,     0,   388,   159,   160,     0,   388,   159,
   241,   160,     0,   388,   162,   390,   163,     0,   388,   167,
   195,     0,   388,   109,   195,     0,   388,     0,   170,   389,
     0,   392,     0,   392,   181,   390,     0,   391,     0,   338,
     0,   287,   391,     0,     0,   394,     0,   237,     0,   336,
     0,   393,     0,   338,   181,   394,     0,   287,   393,     0,
   403,     0,   337,     0,   405,     0,   405,   164,     0,   395,
     0,   395,   164,     0,   287,     0,   313,     0,   331,     0,
   287,   237,     0,   287,   395,     0,   478,   397,     0,   404,
     0,   473,   168,   397,     0,   478,   399,     0,   400,     0,
   473,   168,   399,     0,   473,   169,     0,   164,     0,   403,
     0,   404,   164,     0,   335,     0,   157,   402,   158,     0,
   157,   402,   396,   158,     0,   157,   402,   396,   161,   474,
   471,     0,   157,   402,   398,   161,   474,   471,     0,     0,
   402,   398,     0,   402,   398,   161,   474,     1,   164,     0,
   309,     0,   401,     0,   378,     0,   454,     0,   458,     0,
   452,   470,     0,   263,     0,   257,     0,   310,     0,   306,
     0,   307,     0,   305,     0,   260,     0,   369,     0,   308,
     0,    25,   427,     0,    25,   448,     0,    25,   426,     0,
    54,   164,     0,   405,     0,   408,     0,   352,     0,   468,
     0,   339,     0,   380,     0,    25,   421,     0,   373,     0,
   406,     0,   407,     0,    25,     0,    18,     0,    19,     0,
    20,     0,    34,     0,    22,     0,    38,     0,    39,     0,
    40,     0,    42,     0,    43,     0,    44,     0,    45,     0,
    47,     0,    48,     0,    50,     0,    51,     0,    52,     0,
    53,     0,    55,     0,    56,     0,    57,     0,    58,     0,
    59,     0,    63,     0,    64,     0,    65,     0,    27,     0,
    98,     0,    99,     0,   100,     0,   101,     0,   102,     0,
   103,     0,   104,     0,   105,     0,   106,     0,   107,     0,
   108,     0,   109,     0,   110,     0,   111,     0,   112,     0,
   113,     0,   114,     0,   115,     0,   116,     0,   117,     0,
   118,     0,   119,     0,   120,     0,   121,     0,   159,     0,
   160,     0,   165,     0,   166,     0,   167,     0,   168,     0,
   169,     0,   172,     0,   173,     0,   175,     0,   176,     0,
   177,     0,   178,     0,   179,     0,   180,     0,   184,     0,
   185,     0,   186,     0,   182,     0,   183,     0,   287,     0,
   312,     0,   338,   181,   237,     0,   311,     0,   331,     0,
   287,   408,     0,   165,   157,   410,   158,     0,   165,   157,
   410,   411,   161,   474,   471,     0,     0,   410,   411,     0,
   410,   411,   161,   474,     1,   164,     0,   478,   412,     0,
   413,     0,   473,   168,   412,     0,   473,   169,     0,   164,
     0,   414,     0,   178,   342,   164,     0,   162,   216,   163,
   164,     0,   454,     0,   458,     0,   468,   470,     0,   427,
     0,    25,   427,     0,    25,   448,     0,    25,   426,     0,
   416,   413,     0,   416,   165,   157,   410,   158,     0,   416,
   165,   157,   410,   411,   161,   474,     1,   161,     0,   340,
     0,   339,     0,   362,   164,     0,    36,   467,   414,     0,
   415,   414,     0,    88,     0,    89,     0,    90,     0,    91,
     0,    92,     0,    71,   162,   447,   163,     0,   190,     0,
   424,     0,    25,     0,   417,    98,     0,   417,     0,   418,
   176,   417,     0,   418,   419,     0,   419,     0,   192,   419,
     0,   422,   419,   267,     0,   422,   419,   165,   356,   267,
     0,   350,     0,    19,     0,    18,     0,    35,     0,    21,
     0,    36,     0,   201,     0,   422,     0,   423,     0,    69,
     0,   424,     0,   432,   401,     0,   176,   432,   401,     0,
    23,   426,     0,    33,   426,     0,   177,    33,   426,     0,
   475,   428,     0,    40,   241,   165,   271,     0,    44,   165,
   271,     0,    46,   271,    65,   162,   240,   163,   470,     0,
    52,   162,   262,   163,   271,     0,    52,   162,   262,   163,
   271,    48,   271,     0,    59,   162,   240,   163,   271,     0,
    65,   162,   262,   163,   271,     0,    50,   162,   264,   261,
   164,   239,   163,   271,     0,   265,     0,   420,     0,    69,
   419,     0,   423,   419,     0,   429,     0,   422,   419,     0,
   206,     0,    60,     0,   430,     0,   162,   390,   163,     0,
   433,   162,   390,   163,     0,   433,   159,   160,     0,   431,
     0,   432,     0,   433,   159,   240,   160,     0,   433,   167,
   200,     0,   433,   109,   200,     0,   433,   107,     0,   433,
   108,     0,   433,     0,   107,   435,     0,   108,   435,     0,
   314,   435,     0,   174,   435,     0,   168,   435,     0,   169,
   435,     0,   177,   435,     0,   176,   435,     0,    57,   217,
     0,   434,     0,   435,     0,   436,     0,   437,   314,   436,
     0,   437,   171,   436,     0,   437,   172,   436,     0,   437,
     0,   438,   168,   437,     0,   438,   169,   437,     0,   438,
     0,   439,    99,   438,     0,   439,   100,   438,     0,   439,
     0,   440,   179,   439,     0,   440,   180,   439,     0,   440,
   103,   439,     0,   440,   104,   439,     0,   440,     0,   441,
   101,   440,     0,   441,   102,   440,     0,   441,     0,   442,
   174,   441,     0,   442,     0,   443,   173,   442,     0,   443,
     0,   444,   175,   443,     0,   444,     0,   445,   105,   444,
     0,   445,     0,   446,   106,   445,     0,   446,     0,   446,
   166,   447,   165,   447,     0,   447,   470,     0,   429,   409,
   470,     0,   422,   419,   409,   470,     0,   433,   162,   390,
   163,   409,   470,     0,   433,   159,   160,   409,   470,     0,
   433,   159,   240,   160,   409,   470,     0,   446,   238,   475,
   400,     0,    23,   448,     0,    33,   448,     0,   177,    33,
   448,     0,    26,    25,   425,   189,   162,   450,   163,   401,
     0,    26,    25,   425,   189,   162,   450,   163,   159,   160,
   401,     0,    26,    25,   425,   189,   162,   163,   401,     0,
    26,    25,   425,   189,   162,   163,   159,   160,   401,     0,
   451,     0,   450,   181,   451,     0,   425,   189,     0,   425,
   189,   159,   160,     0,   189,     0,   406,     0,   407,     0,
   164,     0,   181,     0,   157,     0,   158,     0,   162,     0,
   163,     0,   474,     1,     0,    36,   205,     0,    36,   171,
    75,   207,     0,    36,   171,    75,   171,   453,   207,     0,
    36,   171,   453,   207,     0,    93,     0,    94,     0,    95,
     0,    96,     0,   455,   470,     0,   456,   470,     0,    36,
   171,    74,   457,     0,    36,   171,    74,   178,   457,     0,
    36,   171,    76,   457,     0,    36,   171,    76,   178,   457,
     0,   466,     0,   465,     0,   459,   470,     0,   460,   470,
     0,   461,   470,     0,    27,   171,    82,   470,     0,    27,
   171,    96,   470,     0,    27,   171,    74,   462,     0,    27,
   171,    74,   178,   462,     0,    27,   171,    76,   463,     0,
    27,   171,    76,   178,   463,     0,    27,   171,    77,   463,
     0,    27,   171,    77,   178,   463,     0,   466,     0,   465,
     0,   466,     0,   465,     0,   205,     0,   464,   171,    76,
     0,   464,   171,    74,     0,   464,   171,    34,     0,   464,
   171,   453,     0,   464,   171,    73,   178,   207,     0,   464,
   171,    81,     0,   464,   171,    84,   178,   207,     0,   464,
   171,    85,   178,   207,     0,   464,   171,    87,   178,   207,
     0,   200,     0,   294,     0,    19,   195,     0,   464,     0,
   465,   171,    74,     0,   465,   171,    76,     0,   466,     0,
   467,   181,   466,     0,    19,   171,    72,   464,   267,     0,
   158,     0,   161,     0,   474,     1,   158,     0,   474,     1,
   163,     0,   474,     1,   161,     0,   164,     0,   161,     0,
   474,   472,     0,     1,   158,     0,     1,   161,     0,     1,
   164,     0,     1,   161,     0,     1,     0,     0,     0,     0,
     0,     0,     0,     0
};

#endif

#if (YY_FogParser_DEBUG != 0) || defined(YY_FogParser_ERROR_VERBOSE) 
static const short yyrline[] = { 0,
   602,   603,   604,   604,   604,   604,   605,   605,   605,   605,
   606,   606,   606,   606,   606,   607,   607,   607,   607,   608,
   609,   610,   611,   619,   620,   621,   622,   623,   624,   625,
   626,   627,   632,   633,   634,   635,   642,   643,   644,   645,
   646,   647,   648,   649,   650,   651,   654,   655,   656,   663,
   664,   665,   666,   667,   668,   669,   670,   671,   682,   685,
   686,   687,   688,   689,   690,   691,   692,   693,   694,   699,
   700,   702,   703,   704,   705,   737,   738,   739,   743,   749,
   750,   751,   758,   759,   760,   761,   763,   764,   766,   768,
   770,   774,   776,   777,   779,   780,   781,   782,   783,   784,
   785,   786,   789,   790,   791,   792,   794,   795,   796,   797,
   802,   804,   805,   806,   807,   808,   810,   811,   812,   813,
   817,   819,   820,   821,   823,   827,   828,   829,   830,   831,
   832,   833,   834,   835,   840,   841,   844,   845,   846,   847,
   848,   849,   850,   851,   852,   853,   854,   855,   856,   857,
   858,   859,   860,   861,   862,   863,   864,   865,   866,   867,
   868,   869,   870,   871,   872,   873,   874,   875,   876,   882,
   883,   884,   885,   886,   886,   886,   886,   886,   886,   886,
   886,   886,   886,   886,   891,   892,   893,   894,   895,   899,
   900,   901,   902,   903,   904,   905,   906,   907,   908,   909,
   911,   912,   914,   915,   917,   918,   920,   921,   923,   924,
   926,   927,   928,   930,   931,   938,   939,   940,   941,   942,
   944,   945,   946,   947,   948,   949,   950,   951,   952,   953,
   954,   955,   957,   958,   959,   960,   961,   965,   966,   967,
   968,   969,   970,   973,   974,   975,   977,   979,   980,   981,
   982,   983,   988,   989,   991,   992,   993,   994,   995,   996,
   997,   998,   999,  1000,  1001,  1003,  1004,  1005,  1006,  1007,
  1008,  1009,  1010,  1011,  1012,  1013,  1014,  1015,  1016,  1017,
  1018,  1019,  1020,  1021,  1022,  1023,  1024,  1026,  1027,  1028,
  1029,  1030,  1031,  1032,  1047,  1048,  1049,  1050,  1051,  1052,
  1053,  1054,  1055,  1056,  1057,  1058,  1059,  1060,  1061,  1062,
  1063,  1064,  1065,  1066,  1067,  1069,  1070,  1071,  1072,  1073,
  1075,  1079,  1081,  1082,  1084,  1085,  1087,  1087,  1087,  1088,
  1089,  1091,  1092,  1093,  1094,  1095,  1096,  1097,  1098,  1100,
  1101,  1102,  1105,  1106,  1108,  1109,  1110,  1111,  1112,  1113,
  1114,  1125,  1126,  1127,  1129,  1130,  1131,  1132,  1133,  1134,
  1135,  1136,  1137,  1138,  1139,  1140,  1141,  1142,  1143,  1144,
  1145,  1146,  1148,  1149,  1150,  1151,  1154,  1155,  1156,  1163,
  1164,  1165,  1166,  1167,  1168,  1171,  1172,  1173,  1174,  1179,
  1180,  1181,  1182,  1183,  1184,  1185,  1186,  1187,  1189,  1190,
  1192,  1193,  1194,  1194,  1197,  1198,  1201,  1202,  1203,  1204,
  1205,  1206,  1207,  1208,  1211,  1212,  1213,  1215,  1216,  1217,
  1218,  1219,  1226,  1227,  1228,  1229,  1230,  1231,  1232,  1233,
  1234,  1235,  1236,  1240,  1241,  1242,  1244,  1245,  1246,  1247,
  1253,  1254,  1255,  1256,  1257,  1258,  1259,  1260,  1261,  1262,
  1263,  1264,  1265,  1272,  1273,  1274,  1275,  1276,  1277,  1278,
  1280,  1281,  1282,  1283,  1284,  1285,  1300,  1301,  1302,  1303,
  1304,  1305,  1306,  1307,  1307,  1307,  1308,  1309,  1311,  1312,
  1313,  1314,  1316,  1317,  1318,  1324,  1325,  1326,  1327,  1328,
  1329,  1330,  1331,  1332,  1332,  1332,  1337,  1338,  1339,  1347,
  1348,  1349,  1350,  1351,  1352,  1353,  1354,  1355,  1356,  1357,
  1362,  1372,  1373,  1378,  1379,  1380,  1381,  1382,  1383,  1384,
  1385,  1386,  1387,  1388,  1389,  1390,  1391,  1392,  1393,  1394,
  1395,  1396,  1397,  1398,  1399,  1400,  1401,  1402,  1403,  1404,
  1405,  1406,  1407,  1408,  1409,  1410,  1411,  1412,  1413,  1414,
  1415,  1420,  1421,  1423,  1424,  1425,  1426,  1427,  1428,  1429,
  1430,  1431,  1432,  1433,  1435,  1437,  1438,  1439,  1440,  1444,
  1445,  1446,  1456,  1458,  1463,  1468,  1469,  1470,  1471,  1473,
  1474,  1475,  1476,  1477,  1478,  1479,  1480,  1485,  1486,  1487,
  1488,  1489,  1490,  1491,  1492,  1493,  1494,  1495,  1499,  1500,
  1501,  1502,  1503,  1504,  1505,  1506,  1507,  1508,  1509,  1510,
  1511,  1512,  1513,  1514,  1515,  1516,  1517,  1521,  1522,  1523,
  1524,  1526,  1527,  1528,  1537,  1538,  1539,  1540,  1541,  1542,
  1543,  1544,  1545,  1546,  1547,  1549,  1551,  1552,  1553,  1557,
  1558,  1561,  1563,  1564,  1565,  1566,  1568,  1569,  1570,  1571,
  1572,  1574,  1575,  1576,  1577,  1578,  1579,  1580,  1583,  1584,
  1585,  1597,  1599,  1600,  1603,  1607,  1614,  1615,  1616,  1620,
  1621,  1623,  1624,  1627,  1632,  1632,  1632,  1632,  1632,  1632,
  1632,  1632,  1632,  1632,  1633,  1633,  1633,  1633,  1633,  1633,
  1633,  1633,  1633,  1633,  1633,  1634,  1635,  1635,  1635,  1635,
  1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,
  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,  1636,
  1637,  1637,  1637,  1637,  1637,  1638,  1638,  1638,  1638,  1638,
  1638,  1638,  1638,  1638,  1638,  1639,  1639,  1639,  1640,  1640,
  1642,  1643,  1644,  1645,  1646,  1647,  1652,  1653,  1655,  1656,
  1657,  1659,  1660,  1661,  1662,  1663,  1664,  1665,  1666,  1667,
  1668,  1669,  1670,  1671,  1672,  1673,  1674,  1675,  1676,  1678,
  1679,  1680,  1681,  1682,  1683,  1684,  1685,  1686,  1687,  1692,
  1697,  1698,  1699,  1700,  1701,  1702,  1703,  1704,  1705,  1710,
  1711,  1718,  1719,  1720,  1721,  1722,  1723,  1724,  1725,  1726,
  1727,  1728,  1740,  1741,  1742,  1743,  1744,  1751,  1752,  1753,
  1754,  1755,  1756,  1757,  1758,  1759,  1761,  1766,  1767,  1768,
  1769,  1770,  1771,  1772,  1773,  1774,  1775,  1776,  1777,  1778,
  1779,  1780,  1781,  1782,  1783,  1784,  1785,  1786,  1787,  1788,
  1789,  1790,  1791,  1792,  1793,  1794,  1795,  1796,  1797,  1798,
  1799,  1800,  1801,  1802,  1803,  1804,  1805,  1806,  1807,  1808,
  1809,  1810,  1811,  1812,  1813,  1814,  1815,  1816,  1817,  1818,
  1819,  1820,  1821,  1822,  1823,  1824,  1825,  1827,  1828,  1829,
  1830,  1831,  1833,  1835,  1836,  1837,  1838,  1843,  1845,  1847,
  1849,  1851,  1852,  1853,  1854,  1855,  1856,  1857,  1858,  1859,
  1860,  1861,  1862,  1863,  1864,  1869,  1870,  1871,  1872,  1873,
  1874,  1875,  1876,  1878,  1879,  1880,  1881,  1882,  1883,  1884,
  1885,  1887,  1888,  1889,  1890,  1891,  1892,  1893,  1894,  1895,
  1896,  1897,  1898,  1899,  1900,  1901,  1903,  1904,  1905,  1906,
  1907,  1908,  1909,  1910,  1911,  1912,  1913,  1914,  1915,  1916,
  1917,  1918,  1919,  1920,  1922,  1927,  1928,  1929,  1930,  1931,
  1932,  1933,  1934,  1935,  1936,  1937,  1938,  1943,  1944,  1945,
  1946,  1947,  1948,  1949,  1950
};

static const char * const yytname[] = {   "$","error","$illegal.","PRIVATE",
"PROTECTED","PUBLIC","BOOL","CHAR","DOUBLE","FLOAT","INT","LONG","SHORT","SIGNED",
"UNSIGNED","VOID","WCHAR_T","CLASS","ENUM","NAMESPACE","STRUCT","TYPENAME","UNION",
"CONST","VOLATILE","AUTO","EXPLICIT","EXPORT","EXTERN","FRIEND","INLINE","MUTABLE",
"REGISTER","STATIC","TEMPLATE","TYPEDEF","USING","VIRTUAL","ASM","BREAK","CASE",
"CATCH","CONST_CAST","CONTINUE","DEFAULT","DELETE","DO","DYNAMIC_CAST","ELSE",
"FALSE","FOR","GOTO","IF","NEW","OPERATOR","REINTERPRET_CAST","RETURN","SIZEOF",
"STATIC_CAST","SWITCH","THIS","THROW","TRUE","TRY","TYPEID","WHILE","FloatingLiteral",
"IntegerLiteral","BuiltInTypeSpecifier","MetaType","TreeLiteral","DERIVED","FILE",
"GUARD","IMPLEMENTATION","INCLUDE","INTERFACE","ALL","PLACEHOLDER","PLACEMENT",
"NOAUTO","NOGUARD","NOIMPLEMENTATION","OVERLOAD","PATH","PREFIX","PURE","SUFFIX",
"BODY","ENTRY","EXIT","POST","PRE","EMIT","FROZEN","POOL","UTILITY","ELLIPSIS",
"SCOPE","SHL","SHR","EQ","NE","LE","GE","LOG_AND","LOG_OR","INC","DEC","ARROW",
"ARROW_STAR","DOT_STAR","ASS_ADD","ASS_AND","ASS_DIV","ASS_MOD","ASS_MUL","ASS_OR",
"ASS_SHL","ASS_SHR","ASS_SUB","ASS_XOR","CharacterLiteral","Identifier","NewLine",
"NumberLiteral","StringLiteral","ERROR","NIL","RAMMARG","HASH_BLANK","HASH_DEFINE",
"HASH_ELIF","HASH_ELSE","HASH_ENDIF","HASH_ERROR","HASH_IF","HASH_IFDEF","HASH_IFNDEF",
"HASH_INCLUDE","HASH_LINE","HASH_PRAGMA","HASH_UNDEF","HASH_HASH","DI_HASH_HASH",
"DI_HASH","DI_SQUARE","DI_ERAUQS","DI_ECARB","DEFINED","DO_FUNCTION","MacroId",
"Punct","Text","SHIFT_THERE","REDUCE_HERE_MOSTLY","REDUCE_HERE","'{'","'}'",
"'['","']'","'#'","'('","')'","';'","':'","'?'","'.'","'+'","'-'","'*'","'/'",
"'%'","'^'","'&'","'|'","'~'","'!'","'='","'<'","'>'","','","'@'","'$'","'\\''",
"'\"'","'\\\\'","' '","identifier_word","identifier","id","template_test","global_scope",
"id_scope","nested_id","scoped_id","destructor_id","special_function_id","nested_special_function_id",
"scoped_special_function_id","declarator_id","built_in_type_id","pseudo_destructor_id",
"nested_pseudo_destructor_id","scoped_pseudo_destructor_id","string","literal",
"string_expr","boolean_literal","translation_unit","primary_expression","abstract_expression",
"type1_parameters","mark_type1","postfix_expression","expression_list.opt","expression_list",
"unary_expression","delete_expression","new_expression","new_type_id","new_declarator",
"direct_new_declarator","new_initializer.opt","cast_expression","pm_expression",
"multiplicative_expression","additive_expression","shift_expression","relational_expression",
"equality_expression","and_expression","exclusive_or_expression","inclusive_or_expression",
"logical_and_expression","logical_or_expression","conditional_expression","assignment_expression",
"assignment_operator","expression.opt","expression","constant_expression","templated_relational_expression",
"templated_equality_expression","templated_and_expression","templated_exclusive_or_expression",
"templated_inclusive_or_expression","templated_logical_and_expression","templated_logical_or_expression",
"templated_conditional_expression","templated_assignment_expression","templated_expression",
"templated_expression_list","looping_statement","looped_statement","statement",
"control_statement","labeled_statement","compound_statement","statement_seq.opt",
"selection_statement","condition.opt","condition","iteration_statement","for_init_statement",
"jump_statement","declaration_statement","compound_declaration","declaration_seq.opt",
"looping_declaration","looped_declaration","lined_declaration","declaration",
"specialised_declaration","block_declaration","specialised_block_declaration",
"simple_declaration","suffix_built_in_decl_specifier.raw","suffix_built_in_decl_specifier",
"suffix_named_decl_specifier","suffix_named_decl_specifier.bi","suffix_named_decl_specifiers",
"suffix_named_decl_specifiers.sf","suffix_decl_specified_ids","suffix_decl_specified_scope",
"decl_specifier_affix","decl_specifier_suffix","decl_specifier_prefix","storage_class_specifier",
"function_specifier","type_specifier","elaborate_type_specifier","simple_type_specifier",
"built_in_type_specifier","elaborated_type_specifier","elaborated_enum_specifier",
"enum_specifier","enumerator_clause","enumerator_list_ecarb","enumerator_definition_ecarb",
"enumerator_definition_filler","enumerator_list_head","enumerator_list","enumerator_definition",
"enumerator","namespace_definition","namespace_alias_definition","namespace_declaration",
"using_directive","asm_definition","linkage_specification","init_declarations",
"init_declaration","init_object_declaration","star_ptr_operator","nested_ptr_operator",
"ptr_operator","ptr_operator_seq","ptr_operator_seq.opt","cv_qualifier_seq.opt",
"cv_qualifier","type_id","abstract_declarator.opt","direct_abstract_declarator.opt",
"direct_abstract_declarator","parenthesis_clause","parameters_clause","parameter_declaration_clause",
"parameter_declaration_list","abstract_pointer_declaration","abstract_parameter_declaration",
"special_parameter_declaration","parameter_declaration","templated_parameter_declaration",
"templated_abstract_declaration","function_definition","func_definition","ctor_definition",
"constructor_head","function_try_block","function_block","function_body","initializer_clause",
"braced_initializer","initializer_list","looping_initializer_clause","looped_initializer_clause",
"colon_mark","elaborated_class_specifier","class_specifier_head","class_key",
"class_specifier","accessibility_specifier","bit_field_declaration","bit_field_width",
"bit_field_init_declaration","base_specifier_list","base_specifier","access_specifier",
"conversion_function_id","conversion_type_id","ctor_initializer.opt","ctor_initializer",
"mem_initializer_list","mem_initializer_list_head","mem_initializer","mem_initializer_id",
"operator_function_id","operator","template_declaration","template_parameter_clause",
"template_parameter_list","template_parameter","simple_type_parameter","templated_type_parameter",
"template_id","template_argument_list","template_argument","explicit_specialization",
"try_block","handler_seq","handler","exception_declaration","throw_expression",
"templated_throw_expression","exception_specification","type_id_list","primary_tree_expression",
"postfix_tree_expression","tree_expression","tree_argument_list.opt","tree_argument.ctors",
"tree_arguments.head","tree_argument.ctors_comma_most","tree_argument.most",
"tree_argument.misc","looping_unterminated_tree_argument","looped_unterminated_tree_argument",
"looping_tree_statement","looped_tree_statement","tree_statement","compound_tree_statement",
"tree_statement_seq.opt","terminated_tree_argument","unterminated_tree_argument",
"unterminated_tree_argument.most","reserved_id","token.punct","simple_tree_declaration",
"object_statements_clause","object_statement_seq.opt","looping_object_statement",
"looped_object_statement","object_statement","function_used_block","segment",
"derived_clause","meta_id","meta_scope","meta_nested_id","meta_scoped_id","meta_class_specifier",
"meta_class_key","meta_non_class_key","meta_simple_type","meta_type","meta_function_definition",
"meta_control_statement","meta_control_statement1","meta_primary_head","meta_primary_id",
"meta_primary_expression","meta_fn_postfix_expression","meta_postfix_expression",
"meta_unary_expression","meta_cast_expression","meta_pm_expression","meta_multiplicative_expression",
"meta_additive_expression","meta_shift_expression","meta_relational_expression",
"meta_equality_expression","meta_and_expression","meta_exclusive_or_expression",
"meta_inclusive_or_expression","meta_logical_and_expression","meta_logical_or_expression",
"meta_conditional_expression","meta_expression_statement","syntax_macro_definition",
"syntax_macro_parameter_list","syntax_macro_parameter","include_declaration",
"utility","file_dependency_declaration","using_implementation","using_interface",
"file_use","file_placement_declaration","export_implementation","export_interface",
"export_all","implementation_file","interface_file","file_name","file_entity",
"file_id","file_id_list","filespace_specifier","ecarb","semi","error_ecarb",
"error_semi","advance_search","bang","line","mark","nest","start_search","start_search1",
"util",""
};
#endif

static const short yyr1[] = {     0,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   189,   189,   190,   190,   190,   190,   190,   191,   192,
   192,   193,   194,   194,   195,   195,   196,   196,   197,   197,
   197,   198,   198,   198,   199,   199,   200,   200,   200,   201,
   201,   202,   202,   202,   203,   203,   204,   204,   205,   206,
   206,   206,   206,   206,   206,   207,   207,   208,   208,   209,
   209,   209,   209,   209,   209,   210,   210,   210,   210,   211,
   211,   211,   212,   212,   213,   214,   214,   214,   214,   214,
   214,   214,   214,   214,   214,   214,   214,   214,   214,   214,
   214,   214,   215,   215,   216,   216,   217,   217,   217,   217,
   217,   217,   217,   217,   217,   217,   217,   217,   217,   217,
   218,   219,   219,   219,   219,   220,   220,   220,   221,   221,
   222,   222,   223,   223,   224,   224,   225,   225,   225,   226,
   226,   226,   226,   227,   227,   227,   228,   228,   228,   229,
   229,   229,   229,   229,   230,   230,   230,   231,   231,   232,
   232,   233,   233,   234,   234,   235,   235,   236,   236,   237,
   237,   237,   237,   238,   238,   238,   238,   238,   238,   238,
   238,   238,   238,   238,   239,   239,   240,   240,   241,   242,
   242,   242,   242,   243,   243,   243,   244,   244,   245,   245,
   246,   246,   247,   247,   248,   248,   249,   249,   250,   250,
   250,   251,   251,   252,   252,   253,   254,   254,   254,   255,
   255,   255,   255,   255,   255,   256,   256,   256,   256,   257,
   257,   257,   258,   258,   259,   259,   259,   260,   260,   260,
   261,   261,   262,   263,   263,   263,   264,   265,   265,   265,
   265,   266,   267,   267,   268,   268,   268,   269,   270,   270,
   270,   271,   272,   272,   272,   272,   272,   272,   272,   272,
   272,   272,   272,   272,   272,   272,   272,   272,   272,   273,
   273,   273,   273,   274,   274,   275,   275,   275,   275,   276,
   276,   276,   276,   276,   277,   277,   277,   278,   278,   279,
   279,   279,   280,   280,   281,   281,   282,   282,   282,   283,
   283,   283,   284,   284,   284,   285,   285,   285,   285,   285,
   285,   285,   286,   286,   287,   287,   288,   288,   288,   288,
   288,   289,   289,   289,   289,   289,   289,   289,   289,   290,
   290,   290,   290,   290,   291,   291,   291,   291,   292,   292,
   293,   294,   294,   294,   295,   296,   296,   297,   297,   297,
   298,   298,   299,   299,   300,   300,   301,   301,   302,   303,
   303,   304,   305,   305,   306,   307,   308,   309,   310,   311,
   311,   311,   311,   311,   312,   312,   312,   313,   313,   314,
   314,   315,   315,   316,   316,   316,   317,   317,   318,   318,
   319,   319,   320,   320,   321,   321,   322,   322,   322,   323,
   323,   324,   324,   324,   325,   325,   326,   327,   327,   327,
   328,   328,   329,   329,   330,   330,   330,   331,   331,   331,
   332,   332,   332,   333,   333,   333,   333,   334,   334,   334,
   335,   335,   336,   336,   336,   337,   337,   337,   338,   338,
   339,   340,   341,   342,   342,   343,   343,   343,   343,   343,
   344,   344,   345,   346,   346,   346,   347,   348,   348,   349,
   349,   349,   349,   350,   350,   350,   351,   351,   352,   353,
   353,   354,   354,   355,   355,   356,   356,   357,   357,   357,
   357,   357,   357,   358,   358,   358,   359,   360,   360,   361,
   361,   362,   362,   363,   363,   364,   364,   364,   365,   366,
   367,   368,   368,   368,   368,   368,   368,   368,   368,   368,
   368,   368,   368,   368,   368,   368,   368,   368,   368,   368,
   368,   368,   368,   368,   368,   368,   368,   368,   368,   368,
   368,   368,   368,   368,   368,   368,   368,   368,   368,   368,
   368,   369,   369,   369,   370,   371,   371,   372,   372,   372,
   372,   372,   372,   373,   373,   374,   374,   375,   375,   376,
   376,   377,   378,   378,   379,   380,   380,   381,   382,   383,
   383,   384,   384,   385,   385,   386,   386,   387,   387,   388,
   388,   388,   388,   388,   388,   388,   389,   389,   390,   390,
   390,   391,   391,   392,   392,   392,   392,   392,   393,   393,
   394,   394,   394,   394,   394,   394,   395,   395,   395,   395,
   395,   396,   397,   397,   398,   399,   399,   399,   400,   400,
   400,   400,   401,   401,   401,   401,   402,   402,   402,   403,
   403,   403,   403,   403,   403,   403,   403,   403,   403,   403,
   403,   403,   403,   403,   403,   403,   403,   403,   404,   404,
   405,   405,   405,   405,   405,   405,   405,   405,   405,   405,
   405,   405,   405,   405,   406,   406,   406,   406,   406,   406,
   406,   406,   406,   406,   406,   406,   406,   406,   406,   406,
   406,   406,   406,   406,   406,   406,   407,   407,   407,   407,
   407,   407,   407,   407,   407,   407,   407,   407,   407,   407,
   407,   407,   407,   407,   407,   407,   407,   407,   407,   407,
   407,   407,   407,   407,   407,   407,   407,   407,   407,   407,
   407,   407,   407,   407,   407,   407,   407,   407,   407,   407,
   408,   408,   408,   408,   408,   408,   409,   409,   410,   410,
   410,   411,   412,   412,   412,   413,   413,   413,   413,   413,
   413,   413,   413,   413,   413,   413,   413,   413,   413,   414,
   414,   414,   414,   414,   415,   415,   415,   415,   415,   416,
   417,   417,   417,   418,   419,   419,   419,   420,   420,   421,
   421,   422,   422,   423,   423,   423,   423,   423,   424,   424,
   425,   425,   426,   426,   426,   426,   426,   427,   428,   428,
   428,   428,   428,   428,   428,   428,   428,   429,   429,   429,
   430,   430,   431,   431,   431,   431,   432,   432,   433,   433,
   433,   433,   433,   433,   433,   434,   434,   434,   434,   434,
   434,   434,   434,   434,   434,   435,   436,   437,   437,   437,
   437,   438,   438,   438,   439,   439,   439,   440,   440,   440,
   440,   440,   441,   441,   441,   442,   442,   443,   443,   444,
   444,   445,   445,   446,   446,   447,   447,   448,   448,   448,
   448,   448,   448,   448,   448,   448,   448,   449,   449,   449,
   449,   450,   450,   451,   451,   451,   451,   451,   451,   451,
   451,   451,   451,   451,   451,   452,   452,   452,   452,   453,
   453,   453,   453,   454,   454,   455,   455,   456,   456,   457,
   457,   458,   458,   458,   458,   458,   459,   459,   460,   460,
   461,   461,   462,   462,   463,   463,   464,   464,   464,   464,
   464,   464,   464,   464,   464,   464,   465,   465,   465,   466,
   466,   466,   467,   467,   468,   469,   469,   469,   469,   469,
   470,   470,   470,   471,   471,   472,   472,   473,   474,   475,
   476,   477,   478,   479,   480
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     5,     4,     3,     1,     1,     1,
     2,     2,     1,     2,     1,     2,     2,     2,     1,     1,
     2,     1,     2,     2,     1,     2,     1,     1,     1,     1,
     2,     4,     2,     2,     1,     2,     1,     2,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     7,     2,     4,     3,     5,     1,     1,     1,     1,     1,
     3,     2,     2,     3,     0,     1,     4,     8,     7,     5,
     4,     3,     3,     3,     3,     2,     2,     7,     7,     7,
     7,     2,     0,     1,     1,     3,     1,     2,     2,     2,
     3,     2,     2,     2,     2,     2,     1,     2,     1,     2,
     2,     3,     4,     2,     4,     2,     2,     2,     2,     1,
     3,     4,     0,     3,     1,     2,     1,     3,     3,     1,
     3,     3,     3,     1,     3,     3,     1,     3,     3,     1,
     3,     3,     3,     3,     1,     3,     3,     1,     3,     1,
     3,     1,     3,     1,     3,     1,     3,     1,     5,     1,
     3,     3,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     0,     1,     1,     3,     1,     1,
     3,     3,     3,     1,     3,     3,     1,     3,     1,     3,
     1,     3,     1,     3,     1,     3,     1,     5,     1,     3,
     1,     1,     3,     1,     3,     2,     1,     3,     2,     1,
     1,     1,     1,     2,     2,     1,     1,     1,     1,     3,
     4,     3,     3,     6,     0,     2,     6,     5,     7,     5,
     0,     1,     1,     5,     7,     8,     1,     2,     2,     3,
     3,     1,     4,     8,     0,     3,     7,     2,     1,     3,
     2,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     2,     3,     2,     2,     1,     2,     1,     1,     2,     1,
     1,     1,     2,     1,     1,     1,     1,     1,     2,     1,
     2,     4,     2,     2,     1,     2,     2,     1,     2,     1,
     1,     2,     1,     2,     1,     2,     1,     1,     2,     1,
     2,     1,     2,     3,     2,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     2,     1,     1,     1,     1,
     2,     1,     1,     1,     2,     3,     3,     2,     3,     1,
     1,     1,     2,     2,     1,     1,     1,     2,     1,     1,
     1,     1,     1,     2,     2,     3,     2,     2,     3,     4,
     1,     2,     1,     2,     0,     3,     1,     3,     2,     1,
     3,     1,     3,     2,     5,     3,     4,     5,     3,     3,
     3,     3,     3,     3,     1,     1,     1,     2,     2,     1,
     2,     1,     2,     1,     1,     2,     1,     2,     0,     2,
     0,     2,     1,     1,     2,     2,     0,     2,     1,     0,
     1,     2,     3,     4,     2,     3,     3,     0,     1,     2,
     1,     3,     1,     3,     1,     2,     3,     1,     3,     1,
     1,     1,     2,     1,     1,     3,     2,     1,     2,     3,
     1,     1,     2,     2,     2,     2,     2,     2,     1,     3,
     3,     2,     1,     1,     1,     3,     4,     2,     5,     7,
     1,     3,     2,     1,     3,     2,     1,     2,     4,     5,
     4,     3,     2,     1,     1,     1,     4,     8,     2,     3,
     2,     1,     5,     1,     3,     1,     3,     1,     2,     2,
     3,     2,     1,     1,     1,     1,     2,     2,     2,     0,
     1,     2,     4,     1,     2,     2,     4,     4,     4,     1,
     2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
     2,     2,     2,     2,     4,     1,     3,     1,     3,     1,
     3,     1,     2,     1,     1,     2,     3,     5,     2,     1,
     3,     1,     4,     2,     3,     1,     2,     5,     1,     1,
     2,     1,     2,     3,     4,     1,     3,     1,     3,     1,
     2,     3,     4,     4,     3,     3,     1,     2,     1,     3,
     1,     1,     2,     0,     1,     1,     1,     1,     3,     2,
     1,     1,     1,     2,     1,     2,     1,     1,     1,     2,
     2,     2,     1,     3,     2,     1,     3,     2,     1,     1,
     2,     1,     3,     4,     6,     6,     0,     2,     6,     1,
     1,     1,     1,     1,     2,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     2,     2,     2,     2,     1,     1,
     1,     1,     1,     1,     2,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     3,     1,     1,     2,     4,     7,     0,     2,
     6,     2,     1,     3,     2,     1,     1,     3,     4,     1,
     1,     2,     1,     2,     2,     2,     2,     5,     9,     1,
     1,     2,     3,     2,     1,     1,     1,     1,     1,     4,
     1,     1,     1,     2,     1,     3,     2,     1,     2,     3,
     5,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     2,     3,     2,     2,     3,     2,     4,     3,
     7,     5,     7,     5,     5,     8,     1,     1,     2,     2,
     1,     2,     1,     1,     1,     3,     4,     3,     1,     1,
     4,     3,     3,     2,     2,     1,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     1,     1,     3,     3,
     3,     1,     3,     3,     1,     3,     3,     1,     3,     3,
     3,     3,     1,     3,     3,     1,     3,     1,     3,     1,
     3,     1,     3,     1,     3,     1,     5,     2,     3,     4,
     6,     5,     6,     4,     2,     2,     3,     8,    10,     7,
     9,     1,     3,     2,     4,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     2,     2,     4,     6,     4,     1,
     1,     1,     1,     2,     2,     4,     5,     4,     5,     1,
     1,     2,     2,     2,     4,     4,     4,     5,     4,     5,
     4,     5,     1,     1,     1,     1,     1,     3,     3,     3,
     3,     5,     3,     5,     5,     5,     1,     1,     2,     1,
     3,     3,     1,     3,     5,     1,     1,     3,     3,     3,
     1,     1,     2,     2,     2,     2,     2,     1,     0,     0,
     0,     0,     0,     0,     0
};

static const short yydefact[] = {   255,
   969,   975,   474,   794,   793,   475,   796,   476,   783,     0,
   795,   797,   351,     2,    23,     3,     4,     5,     6,     7,
     8,    16,    17,    18,    19,     9,    10,    11,    12,    13,
    14,    15,   775,   776,   777,   778,   779,   910,   911,   912,
   913,    30,     1,   969,     0,     0,    22,    24,   781,     0,
   798,    50,   792,    28,   590,   597,    72,    20,   785,     0,
   788,   588,   799,   800,   782,    21,     0,   974,     0,    31,
   569,   969,     0,     0,   598,    29,     0,     0,   789,    51,
   591,     0,     0,   604,     0,   784,     0,   787,    74,   256,
     0,     0,   956,   957,    73,     0,   969,   589,     0,    27,
    33,     0,     0,    35,   596,     0,     0,     0,     0,     0,
     0,    68,     0,     0,     0,     0,     0,    77,    69,     0,
    62,    60,     0,     0,    61,    65,    59,   185,   592,   418,
     0,     0,   390,   394,     0,     0,     0,     0,   300,    42,
    45,   307,    63,    76,    64,    86,    79,   107,   135,   119,
   117,   137,   140,   144,   147,   150,   155,   158,   160,   162,
   164,   166,   168,   189,     0,   298,   310,   303,   305,   308,
   312,    78,     0,   301,   295,   347,   353,   346,   392,   395,
     0,    80,   401,   352,   972,     0,   345,    39,    40,   494,
   495,   496,   474,   670,   671,   475,   565,   476,   403,   404,
   970,   332,   696,   330,   318,   333,   329,   327,   328,   673,
   319,   322,   334,   675,   676,   677,     0,   678,   679,   680,
   681,   973,   682,   683,   684,   685,   686,   687,     0,   688,
   689,   690,   691,   692,   580,   693,   694,   695,   430,    30,
   698,   699,   700,   701,   702,   703,   704,   705,   706,   707,
   708,   709,   710,   711,   712,   713,   714,   715,   716,   717,
   718,   719,   720,   637,   721,   722,   723,   724,   725,   726,
   727,   728,   729,   730,   731,   732,   733,   734,   735,   739,
   740,   736,   737,   738,    22,   144,   160,   168,   170,   606,
   647,   652,   646,   325,   617,   316,   317,   651,   649,   650,
   654,   640,   648,   618,   397,   423,   320,   425,   428,   619,
   607,   612,   602,   663,   661,   484,   449,   321,   653,   970,
   666,   642,   664,   576,   173,     0,   601,   599,   608,   605,
   615,   641,   611,   613,   667,   668,   969,   643,   969,   969,
   644,   969,   969,   969,   662,   595,   786,   969,   968,     0,
   970,   332,     0,     0,     0,   972,   290,     0,     0,   385,
   269,   258,   259,   267,   263,   285,   284,     0,   282,   287,
   281,   288,   286,   280,     0,     0,   387,   264,   442,   441,
     0,   268,   386,   265,   266,   270,   275,   969,   277,   278,
   969,     0,     0,   330,     0,   322,   582,   190,   194,   197,
   199,   201,   203,   205,   207,   209,   434,     0,   438,   572,
   435,   321,     0,   570,   211,     0,    75,    26,     0,    32,
    36,    34,   365,   355,   357,   354,     0,    41,   299,   348,
    82,     0,   121,     0,     0,     0,   349,   133,   399,   341,
   340,   350,   342,   124,   513,   512,   535,   536,   539,   540,
   541,   542,   543,   544,   545,   546,   549,   548,   527,   533,
   530,   531,   529,   534,   538,   537,   528,   532,     0,     0,
   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
   524,   525,   526,   547,   399,   497,   511,     0,    79,   116,
     0,   102,   108,   109,     0,   187,     0,   186,   431,     0,
     0,   419,   432,   421,   112,   113,   115,   114,     0,    46,
   120,   118,   396,     0,     0,    43,    44,   393,   136,    96,
    97,     0,   185,     0,    85,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   593,   324,     0,   323,
   297,   296,     0,    30,     0,     0,   308,   311,   304,   302,
    30,   309,   306,     0,   391,   110,   415,   255,   473,     0,
   468,     0,     0,   374,     0,     0,     0,   824,     2,     0,
     0,   604,     0,     0,     0,     0,     0,   823,     0,   818,
   665,   799,   800,   657,   655,   821,   825,   829,   830,   836,
   846,   847,   848,   852,   855,   858,   863,   866,   868,   870,
   872,   874,   876,   969,   656,     0,     0,     0,     0,   553,
   974,     0,     0,   969,   326,     0,     0,   906,     0,     0,
     0,     0,   973,     0,     0,     0,     0,   658,     0,   581,
     0,     0,     0,   501,     0,   973,   482,   481,   335,   331,
   338,   973,   399,   426,   175,   176,   177,   178,   179,   180,
   181,   182,   183,   184,   174,     0,   500,   235,     0,   453,
   443,   444,   388,     0,   620,   445,   448,   554,   574,   603,
   610,   621,   398,     0,     0,   446,   447,     0,     0,   389,
   479,   552,   577,   594,   604,   616,   614,   962,   961,   645,
     0,   914,   915,   922,   923,   924,     0,   969,   274,   271,
   273,     0,     0,     0,   322,   283,   289,   255,     0,   294,
   293,     0,   291,     0,     0,   276,   279,     0,   261,     0,
     0,     0,     0,   970,     0,     0,     0,   185,     0,     0,
   817,   808,   199,   583,     0,     0,     0,     0,     0,   439,
     0,     0,     0,     0,     0,   174,     0,   437,     0,   568,
     0,   958,   960,   959,    25,   361,   358,   367,     0,   969,
     0,   356,   407,     0,     0,   343,   344,   103,   122,     0,
     0,     0,   128,   127,   130,   399,   126,   133,   133,   551,
   550,   399,   498,   499,     0,     0,     0,    81,   433,   417,
   420,     0,    38,    37,     0,     0,     0,     0,    47,    49,
    48,    94,     0,    55,    57,    95,     0,    92,    93,     0,
   139,   138,   142,   143,   141,   145,   146,   148,   149,   153,
   154,   151,   152,   156,   157,   159,   161,   163,   165,   167,
     0,    30,   111,     0,   402,   416,   975,     0,     0,     0,
   488,   493,     0,   486,     0,   472,   467,     0,     0,   376,
     0,   373,   799,   805,   885,   806,   886,   845,   819,     0,
     0,   799,   821,   830,   836,   837,   838,     0,   841,   842,
   840,   830,   844,     0,   843,   839,   822,   820,   969,   803,
   834,   835,     0,     0,   604,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   970,   878,     0,   969,     0,
     0,     0,   969,   969,   379,   336,   337,     0,   970,   562,
     0,     0,   556,   558,   560,     0,     0,     0,     0,     0,
     0,   339,     0,   973,   579,     0,   232,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   385,   216,
   217,   220,   226,   221,   227,   228,   229,   222,   252,     0,
     0,   223,     0,   241,   247,     0,   243,     0,   510,   502,
     0,   504,     0,   451,   452,     0,   633,     0,   638,     0,
     0,   230,   399,   424,   427,   973,   172,   171,   973,   749,
   480,   429,   450,   617,     0,   609,   454,   485,   455,   600,
     0,   963,     0,   272,   801,   802,     0,   975,   385,   380,
   387,   386,   381,   382,   450,   384,   383,   260,   248,     0,
   249,   970,     0,   970,     0,     0,     0,     0,     0,     0,
     0,   192,   193,   191,   195,   196,   198,   440,   200,   202,
   204,   206,   212,     0,     0,   210,   436,   571,   372,   369,
   370,   365,   359,     0,     0,   362,   407,   406,   405,     0,
   409,     0,     0,     0,   104,   105,     0,     0,     0,     0,
     0,   129,   400,   123,   125,     0,     0,   188,   422,    54,
    53,     0,     0,     0,    58,     0,    56,     0,    91,     0,
    87,     0,     0,   477,   974,   492,   490,     0,   471,     0,
   489,   469,     0,   937,     0,     0,   822,   822,     0,   604,
   826,   804,   807,   887,     0,   790,   969,   879,     0,   833,
   828,     0,     0,   832,   850,   851,   849,   853,   854,   856,
   857,   861,   862,   859,   860,   864,   865,   867,   869,   871,
   873,   875,   876,     0,     0,     0,     0,     0,   947,   948,
     0,   927,   950,   934,   933,     0,   929,   936,   935,     0,
   931,   925,   926,   573,   566,   555,   969,     0,     0,   563,
   377,     0,   916,   921,   920,    67,     0,    66,   907,     0,
   918,   909,     0,   231,     0,     0,     0,     0,     0,     0,
   224,   225,     0,     0,     0,   219,     0,   242,   973,   973,
   506,     0,   505,   103,   973,   634,   969,   969,   629,   741,
   744,   742,   745,   632,     0,   622,   625,   626,   630,   623,
   659,   660,     0,     0,   458,     0,   461,     0,   233,   236,
   973,   620,     0,   967,   966,    71,   257,     0,   253,   974,
   292,   970,   810,     0,   262,   241,   251,     0,   250,     0,
     0,     0,     0,     0,   363,   360,   368,     0,     0,   964,
   965,   366,   408,     0,   412,     0,     0,   134,     0,   131,
     0,     0,     0,     0,     0,     0,    90,   971,     0,   169,
   584,   586,     0,   256,   491,   487,   470,     0,   955,   375,
   828,     0,     0,     0,   880,   969,   831,   827,     0,   884,
     0,   355,   949,   928,   468,     0,   930,   932,   567,   557,
   559,   561,   917,     0,   919,   378,   578,     0,     0,   575,
   218,   185,   238,   240,   503,     0,   244,     0,     0,   746,
     0,   631,     0,   628,     0,   456,   973,   969,   464,   463,
     0,   969,   747,   750,     0,   450,   969,   256,   809,     0,
     0,   970,   970,   970,   208,   213,   371,   364,   413,     0,
     0,     0,   106,   132,     0,     0,     0,    52,     0,     0,
    83,   585,     0,   969,   940,     0,   939,   938,   943,     0,
     0,     0,   941,   831,   827,   791,   882,   969,   969,   877,
     0,   951,   952,   908,     0,     0,   973,   508,   507,   509,
   635,     0,   636,   450,   624,   627,   483,   457,   462,     0,
     0,   466,     0,   969,     0,   970,     0,     0,     0,     0,
   756,     0,   771,   770,   501,   752,   753,   757,   500,   970,
   763,   760,   761,   969,     0,   696,   675,   677,   678,   680,
   681,   682,   684,   686,   687,   688,   690,   691,   692,   693,
   694,   695,   801,   697,   706,   707,   901,   902,   721,   903,
   904,   899,   723,   726,   727,   731,   732,   900,   896,   897,
   898,     0,     0,   892,     0,   969,     0,   185,   812,   814,
   815,   414,   101,    98,   100,    99,    84,    89,     0,   587,
     0,     0,     0,     0,     0,   883,   881,   245,   973,   239,
   639,   969,   459,   465,     0,   234,     0,   766,   764,   765,
     0,     0,   953,   500,     0,     0,     0,   772,     0,   774,
     0,   767,   762,     0,   755,     0,   890,   894,     0,   969,
   905,     0,   969,     0,   970,    88,     0,   478,   942,   944,
   945,   946,   246,     0,   237,     0,   748,     0,   773,     0,
     0,   758,   749,   754,     0,     0,     0,   888,   904,   893,
   254,   811,   970,   813,   460,   751,   954,   780,   759,   973,
   891,   895,     0,   816,   768,   750,   889,   969,     0,     0,
   769,     0,     0,     0
};

static const short yydefgoto[] = {    47,
    48,   101,    77,   137,   138,   104,   139,   810,   140,   141,
   142,  1159,    51,   814,   815,  1095,   143,   144,  1189,   145,
  1592,   146,   147,  1288,   820,   148,  1074,   495,   149,   150,
   151,   438,   784,   785,   779,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   288,   289,   496,   666,
   497,   498,   631,   399,   400,   743,   402,   403,   404,   405,
   406,   407,  1054,  1055,   634,   960,   961,   962,   291,   670,
   999,   292,  1207,  1208,   293,   974,   967,   968,   361,     2,
    90,   362,  1033,   363,   364,   365,   366,   367,   166,   167,
   168,   169,   170,   171,   172,   173,   294,   551,   500,   296,
   297,   773,   174,   441,   175,   176,   177,   178,   425,   767,
  1266,   768,   769,   770,  1060,  1061,   298,   370,   300,   372,
   373,   303,   375,   376,   377,   179,   180,   181,   306,  1083,
   567,   307,   774,  1069,  1070,  1071,   182,   183,   501,   977,
   308,   309,   503,   504,   410,   411,   378,   379,   380,   313,
   314,  1434,   687,  1349,  1009,  1236,  1237,  1350,   858,   184,
   185,   186,   187,   315,   316,   648,   383,   853,   854,   412,
   188,   486,   643,  1435,   980,   981,   982,   983,   189,   487,
   319,   320,   932,   933,   321,   935,    54,   413,   414,   322,
   972,   323,   324,   946,   325,   415,   846,  1293,    55,    56,
    57,   326,   327,   328,   329,   330,   331,   988,  1226,   989,
  1227,  1228,   332,   646,   333,  1230,   334,   335,   336,  1232,
   673,  1241,  1354,  1436,  1437,  1438,    58,  1440,    59,    60,
    61,   590,   591,   872,   593,    65,  1482,   594,   386,   742,
   873,   597,   598,   874,   875,   601,   602,   603,   604,   605,
   606,   607,   608,   609,   610,   611,   612,   613,   614,   865,
   387,  1483,  1484,   337,    66,   338,   339,   340,  1183,   341,
   342,   343,   344,  1162,  1167,  1163,  1168,  1169,  1524,   345,
    95,   700,  1066,  1012,   392,   701,   393,  1380,   568,   635,
    91,    68
};

static const short yypact[] = {   -21,
 12984,   183,-32768,-32768,-32768,-32768,-32768,-32768,-32768, 15098,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768, 13091, 13091, 13091,-32768,    15,-32768, 14545,
   188,-32768,-32768,-32768,   182,   236,-32768,-32768,   169, 12656,
-32768,-32768,-32768,-32768,-32768,-32768,   284,-32768,   145,-32768,
-32768,   250,   372,   214,-32768,-32768,   339, 15287,-32768,-32768,
-32768, 15098, 10380,  4839, 15098,-32768, 14545,-32768,-32768,   220,
  5362,  7018,-32768,-32768,-32768,   420,   250,-32768,  5023,-32768,
   336, 15287, 15287,-32768,-32768,  9351, 15098, 13195,   276, 11045,
   299,-32768, 12326,  8455,   304, 11045,   312,-32768,-32768,   341,
-32768,-32768, 11045, 11045,-32768,-32768,-32768, 10513,-32768,  6857,
 11045, 11045,-32768,-32768, 11045, 11045, 14142, 13384,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768, 11886,   397,-32768,-32768,
-32768,-32768,   468,   295,   502,   235,   225,   611,   348,   343,
   363,   443,    39,-32768,   410,  2580, 14707,  2580,-32768, 14789,
-32768,-32768,   404,-32768,-32768,-32768,-32768,-32768,   744,-32768,
 11045,-32768,-32768,-32768,-32768, 14268,-32768,-32768,-32768,-32768,
-32768,-32768,  1449,  9351, 14037,   388, 15098,   399,-32768,-32768,
  8620,-32768,  2864,   463,-32768,   422,-32768,-32768,-32768,  5959,
-32768,   116,   430,   477,-32768, 11045,   489,   276,-32768,   453,
 11045,-32768,   299,-32768,   494,-32768,   499, 12326,  8290,   304,
-32768, 11045,   312,   503, 10513,    28,   341,   529,-32768,   954,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768, 11045, 11045,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  9582,-32768, 11045,-32768,-32768, 11045,
 11045,-32768,-32768,-32768, 11045,  9449,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   530,   295,   545,  1626,-32768,   144,
-32768,-32768,-32768,-32768,  6353,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768, 11045,-32768,-32768,-32768,   551,-32768,
-32768,-32768,   119,-32768,-32768,   557,   574,   579,-32768,  6185,
-32768,-32768,-32768,   667,-32768,   588,-32768,   578,-32768,-32768,
   597,-32768,-32768,   601,-32768,-32768,   335,-32768,   335,   335,
-32768,   335,   335,   335,-32768,-32768,-32768,-32768,-32768, 14037,
 11163,   746,  2864,  4254,   477,-32768,-32768, 11045,  9449,    96,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  6521,-32768,-32768,
-32768,-32768,-32768,-32768,    79,   609,   602,-32768,-32768,-32768,
   129,-32768,   146,-32768,-32768,-32768,-32768,   335,-32768,-32768,
   335,   653,  1711,-32768,  7619,-32768, 10646,   235,    37,   752,
   614,   618,   626,   699,  1967,-32768,-32768,  7018,-32768,-32768,
   632,-32768,   841,-32768,-32768,   562,-32768,-32768,   878,-32768,
-32768,-32768,   111,   662,-32768,-32768, 14625,-32768,-32768,-32768,
-32768, 12546,-32768, 12546, 15035,  1040,-32768,   663, 12106,-32768,
-32768,-32768,-32768, 12326,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   668,   680,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1040,
-32768,-32768,-32768,-32768, 12216,-32768,-32768, 12546,-32768,-32768,
 12546,-32768,-32768,-32768,   671,   676,   687,-32768,-32768,  6857,
   702,    77,-32768,-32768,-32768,-32768,-32768,-32768, 15161,-32768,
-32768,-32768,-32768, 13636, 15287,-32768,-32768,-32768,-32768,-32768,
-32768, 13258, 10513, 13258,-32768, 11045, 11045, 11045, 11045,  9715,
 11045, 11045, 11045, 11045, 11045, 11045, 11045, 11045, 11045, 11045,
 11045, 11045, 11045, 11045, 11045, 10513,-32768,-32768,   451,-32768,
-32768,-32768, 14871,   690, 15161, 13636, 14953,-32768,  2580,-32768,
   698,-32768,-32768,  9715,-32768,-32768,   140,-32768,-32768,  4132,
   174,   798,   245,-32768, 11163, 11163, 11045,-32768, 14545, 11753,
 11753,  4839, 11753, 11753, 11753, 11753, 11517,-32768, 11281,-32768,
-32768, 14545, 14545,-32768,-32768,   574,-32768,-32768,   717,   640,
-32768,-32768,-32768,   606,   913,  1029,   259,  1042,   705,   709,
   750,   779,  2565,   335,-32768,  3129,  2394,   317,  3129,-32768,
-32768,   438,  7729,  5184,-32768, 15098,  1303,-32768,   852,   463,
   782,  6857,-32768,   879,  5539,  6689,  6857,-32768,  6857,-32768,
 15098,   667,   792,-32768,  6857,   795,   104,-32768,-32768,-32768,
-32768,-32768,  9715, 11045,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   818, 10513,   790,-32768, 10779,-32768,
-32768,-32768,-32768,  5959,   144,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768, 10513,  4839,-32768,-32768,  9848,   824,-32768,
-32768,-32768,-32768,-32768,  4839,-32768,-32768,-32768,-32768,-32768,
  1018,-32768,-32768,-32768,-32768,-32768,  1024,   335,-32768,-32768,
-32768,  1658, 14365,  7399,  1008,-32768,-32768,-32768,  9981,-32768,
-32768,  9981,-32768,  9981,  9981,-32768,-32768,  5362,-32768,   868,
 11045,   876,   884,-32768,   891,  4529,   903, 10513,   907,   915,
-32768,-32768,   928,-32768, 11045, 11045, 11045, 11045, 11045, 11045,
 11045, 11045, 11045, 11045, 10646,-32768, 10646,-32768, 10646,-32768,
  7018,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  4529,   149,
  1105,-32768, 11996,   936,   945,-32768,-32768, 10513,-32768, 10513,
 14205, 14205,-32768,-32768,   974, 13868,-32768,   663,   663,-32768,
-32768, 13974,-32768,-32768,   956,   958, 10513,-32768,-32768,-32768,
-32768,  6857,-32768,-32768, 13258, 15224, 13321, 13447,-32768,-32768,
-32768,-32768,   238,-32768,-32768,-32768,   987,-32768,-32768,  1021,
-32768,-32768,   468,   468,   468,   295,   295,   502,   502,   235,
   235,   235,   235,   225,   225,   611,   348,   343,   363,   443,
   996,   995,-32768,  1006,-32768,-32768,  1020,  4132,  4132,  1143,
-32768,   188,   -35,-32768,  4132,-32768,-32768,  3915,   463,-32768,
 15098,-32768, 14545,-32768,-32768,-32768,-32768,-32768,-32768, 11753,
 11753, 14545,-32768,-32768,  1284,-32768,-32768,  1019,-32768,-32768,
-32768,   717,-32768, 11163,-32768,-32768,   322,-32768,   335,-32768,
-32768,-32768, 13510, 10114,  4839, 13510, 11753, 11753, 11281, 11753,
 11753, 11753, 11753, 11753, 11753, 11753, 11753, 11753, 11753, 11753,
 11753, 11753, 11753, 11753, 11753,-32768,-32768,  3370,  7179,  8733,
  8843,  8953,   335,   335,-32768,-32768,-32768,  6071,  6185,-32768,
  1168,  1012,-32768,  1025,  1030,  1195,  1034,  9063,   166,  9173,
    82,-32768,  1052,-32768,-32768,  1060,-32768,  1066, 15098,  9288,
  7289, 11045,   453,   494,   499,   503,   792,   529,   205,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  6689,
  1062,-32768,  1026,  6857,-32768,  1078,  1067,  1099,-32768,   100,
 15098,-32768,  1103,-32768,-32768,  1114,-32768,   382,  1121,  4471,
 11045,-32768, 11045,-32768,-32768,  1126,-32768,-32768,  1132,-32768,
-32768,-32768,  1133,  6353,   157,-32768,-32768,-32768,-32768,-32768,
   456,-32768,   483,-32768,-32768,-32768,  4529,  1139,  1133,-32768,
-32768,   574,-32768,-32768,  1041,-32768,   574,-32768,-32768,  1137,
-32768,-32768,  1240,  6185,  6689,  1147,  6857,  1148, 10513,  6857,
 11045,   235,   235,   235,    37,    37,   752,-32768,   928,   618,
   626,   699,  1134,  1149,  1136,-32768,-32768,-32768,-32768,-32768,
  1140,   120,-32768,  1318,   135,-32768, 13762,-32768,-32768,   534,
   571,  1158,  1161,  1166,  1150,-32768,  1164, 11045,   336, 14205,
 14205,-32768,-32768,-32768,-32768,  1171,  1174,  1157,-32768,-32768,
   188, 13321,   188, 13573,-32768, 13447,-32768,  1163,-32768,  5716,
-32768, 10513, 12436,-32768,-32768,-32768,-32768,  4132,-32768,  4132,
-32768,-32768,    47,-32768,   293,  1179,   574,-32768, 10247,  4839,
-32768,-32768,-32768,-32768,  7839,-32768,   335,-32768, 13510,-32768,
   574,  1186,  1185,-32768,-32768,-32768,-32768,   606,   606,   913,
   913,  1029,  1029,  1029,  1029,   259,   259,  1042,   705,   709,
   750,   779,   113,  1184,  4655, 15098, 15098, 12874,-32768,-32768,
 15098,-32768,  1181,  1183,-32768, 12874,-32768,  1183,-32768, 12874,
-32768,-32768,-32768,-32768,  4529,-32768,  7179, 12546,  4529,-32768,
-32768, 12874,-32768,  1183,-32768,-32768,   719,-32768,-32768, 12874,
-32768,-32768,  1194,-32768,   792, 10513,  1172, 11399, 11399, 11635,
-32768,-32768,  7509,   667,  5539,-32768,  1196,-32768,-32768,-32768,
-32768,  1362,-32768, 10513,-32768,-32768,-32768,-32768,-32768,  6353,
  1188,-32768,-32768,-32768,   160,-32768,-32768,-32768,-32768,  1209,
-32768,-32768,  1043,  1215,-32768,   161,  1220,  5849,-32768,  1224,
  1230,  1133, 10513,-32768,-32768,-32768,-32768,  1228,-32768,-32768,
-32768,-32768,-32768,  1232,-32768,  6857,-32768,  1237,-32768,  1238,
  1241, 10646, 10646, 11045,-32768,-32768,-32768,  1105,   543,-32768,
-32768,-32768,-32768, 10912,-32768, 10513, 10513,-32768, 10513,-32768,
  1246, 10513, 10513, 13573, 13699,   188,-32768,  6857,   216,-32768,
-32768,-32768,    78,  1249,-32768,-32768,-32768,  1870,-32768,-32768,
-32768,  1247,  1250,    70,-32768,   335,   574,   574, 11753,-32768,
  1209,-32768,-32768,-32768,  1259,   479,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,    82,-32768,-32768,-32768,  1262, 11399,-32768,
-32768, 10513,  1364,-32768,   187,  1263,-32768,  1318,  1429,-32768,
  9981,-32768,  4471,-32768, 11045,-32768,  1274,-32768,-32768,-32768,
  1050,-32768,-32768,  1276,  3721,-32768,  7950,  1277,-32768, 10513,
  1275,-32768,-32768,-32768,-32768,  1260,-32768,-32768,-32768,  1282,
  1281,  1286,-32768,-32768,  1291,  1293, 13699,   188,   237,   132,
-32768,-32768, 12546,-32768,-32768,  1279,-32768,-32768,-32768,  1285,
  1289,  1292,-32768,-32768,-32768,-32768,-32768,   335,   335,-32768,
  1458,-32768,-32768,-32768,  1300,  1309,-32768,-32768,-32768,-32768,
-32768,   386,-32768,   728,-32768,-32768,-32768,-32768,  1320,  1318,
  5849,-32768,  1477,-32768,  1308, 11163,  1313, 12764,  1329, 10513,
-32768,  9848,-32768,-32768,  1328,-32768,-32768,-32768,  1385,  3393,
-32768,-32768,-32768,   335,  1053,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   139,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   469,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  4529,   211,-32768,  1493,-32768,  1332, 10513,  1448,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1500,-32768,
  1504,    82,    82,    82,    82,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   449,-32768,  1512,-32768,-32768,-32768,
   666,  1183,-32768,  1398, 11753,   243,  1350,-32768, 12874,-32768,
 14455,-32768,-32768,  3721,-32768,  1357,-32768,  1359,   595,  8120,
-32768,  1504,   335,  1361,-32768,-32768,   472,-32768,-32768,-32768,
-32768,-32768,-32768,  1318,-32768,   542,-32768, 12874,-32768,  1365,
  1356,-32768,-32768,-32768,   717,  1371,  1373,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1367,
-32768,-32768,   717,-32768,-32768,  1374,-32768,-32768,  1521,   570,
-32768,  1534,  1536,-32768
};

static const short yypgoto[] = {    22,
    58,  1077,-32768,     1,  1922,   -45,  1814,   -62,  1702,   -98,
  -140,  -424,  2531,  -743,  -756,  -366,   387,  2270,  -405,-32768,
-32768,-32768,   -46,-32768,-32768,-32768,   323,  -740,   -44,  1401,
  1404,    38,   756,-32768,   436,  2043,  -403,  3144,   697,  1317,
   695,  -397,  2240,  1000,  1002,  1003,   -32,    -4,  2324,  -323,
  -499,   564,   -67,   490,  -685,   126,   799,   802,   804,-32768,
-32768,  -372,-32768,-32768,   396,   347,-32768,   617,  -607,  -600,
-32768,  -591,   305,  -542,  -550,   533,  1177,-32768,  -185,  -455,
  -592,   836,  -862,  -289,  -285,  -603,  -339,  -341,  1405,   -55,
-32768,  -110,  1407,  1408,-32768,-32768,   -88,  1410,  2907,-32768,
-32768,    76,  2105,-32768,   923,   704,-32768,-32768,  1152,   810,
-32768,   510,-32768,-32768,-32768,-32768,    56,   -64,   406,   -63,
    33,   435,  -923,   462,   156,  1611,  -119,  2977,  1278,  -328,
-32768,    36,  -208,   514,-32768,-32768,   -82,    10,-32768,  -122,
    68,-32768,   -47,  -395,  -402,-32768,  -906,    -7,   -50,  1471,
   -69,  -194,  -229,  -674,   917,-32768,   239,   168,   269,-32768,
-32768,    93,-32768,   106,-32768,  -647,   525,  -771,  -649,   446,
-32768,  1108,-32768,  -177,-32768,-32768,   616,-32768,-32768,-32768,
   969,  -569,-32768,   418,  -561,-32768,   431,  1501,   838,    51,
-32768,  -321,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   751,  -526,  1314,-32768,  1321,   919,  -283,-32768,   265,-32768,
   272,   464,  -451,-32768,  -901,   465,  -900, -1269, -1258,   401,
   -51,    60,    52,    94,   191, -1307, -1226,-32768,  1549,-32768,
   224,   321,  1287,    74,     4,  -705,   925,  -342,  -200,-32768,
  -160,-32768,-32768,  -197,  -127,-32768,  -408,   -60,   352,   366,
    27,   346,   729,   730,   731,   727,   732,  -882,  -879,  -120,
-32768,-32768,   107,   112,  -614,   -74,-32768,-32768,  -867,   -68,
-32768,-32768,-32768,   491,  -806,   789,   -96,   163,-32768,    13,
  1553,  1346,    48,-32768,    62,    -1,   342,-32768,  1298,  -536,
-32768,  -745
};


#define	YYLAST		15410


static const short yytable[] = {    67,
   595,    50,   693,   599,    64,   758,  1016,   502,   709,   574,
    70,   682,   941,  1008,   717,   165,   389,   513,   518,   299,
   301,  1001,   390,   817,   744,   431,   720,   963,   925,   562,
   692,   969,  1153,   312,   964,  1154,   310,  1075,   510,   517,
   596,   642,    73,   965,    50,    50,    50,    64,    64,    64,
   163,  1097,   429,    64,   931,   878,   421,   422,   644,   563,
   672,  1090,   934,    64,  1047,   525,  1221,    69,   716,   489,
    96,   490,  1191,   600,    63,   516,   311,   550,   164,   550,
   615,   757,   102,  1224,   966,   102,  1113,  1480,  1229,  1231,
    64,   421,   422,    53,   976,    96,   978,   812,  1481,   818,
  -969,  1105,   986,   391,   799,   285,   102,   102,    70,   990,
   787,  -969,   847,   102,   102,  1171,   302,    63,    63,    63,
  -969,  1109,   444,    63,   823,   824,   825,   431,  1439,   492,
   672,  1530,  1498,    63,   626,    69,    53,    53,    53,   745,
   746,   385,    53,   836,   545,  1110,   369,   890,   443,   443,
   710,  1186,    53,   599,   429,   816,   793,   819,   667,   409,
    63,     1,   199,   200,   574,    69,   409,   555,  1010,  1253,
   555,   876,   877,   801,   879,   880,   881,   883,   885,    53,
   886,   667,   -70,   163,  -500,   489,   102,   490,   439,   485,
   596,   667,   641,    76,   102,   102,   382,   102,  1106,  1107,
   844,    50,   388,  1297,   546,  1111,   667,   127,  -449,   545,
    70,   164,  1439,  1439,   565,   747,  1559,   401,   914,   667,
   671,   930,   667,   600,   401,   775,   356,  1110,   102,   102,
   711,  1221,   864,   866,   647,  1186,   945,   444,  1038,   304,
  1382,   127,   721,   686,   677,   389,   492,   310,  1224,   825,
  1110,   390,   668,  1229,  1231,    13,   836,   802,  1383,   722,
   669,    81,  1018,   443,   443,   690,    86,    69,   766,   991,
  1480,   431,  1250,    79,   592,   668,   719,  1265,   915,   795,
  1211,  1481,   796,    88,    89,   668,   627,   676,  1499,   916,
   671,   127,  1270,    53,   975,  1271,  1221,  1439,   429,   685,
   668,    -2,  -449,   439,   485,    13,   766,  1439,   669,   725,
   689,   686,   431,   668,  1323,  1272,   668,   677,  1346,    -2,
   984,    62,  1325,    92,   994,   647,  -449,   535,   536,  1062,
   856,   690,   391,   533,   534,  1098,  1187,  1243,   857,   429,
  1341,  1347,   963,  1234,    82,   679,   707,  1408,  1090,   931,
   102,    50,  1090,  1304,    70,  1047,  1204,   934,   965,  1317,
   676,   904,   905,  1318,    62,    62,    62,  1409,  1133,   669,
   385,   429,    97,  1539,   717,   369,    98,   599,   599,  1381,
   348,   811,  1053,   811,  1056,   719,  1057,   862,   882,  1359,
   920,  1540,   921,   922,    83,    70,   802,    84,   923,   966,
  1497,   356,    85,   537,   538,  1561,  1089,    93,   860,   369,
    94,    69,   924,   985,   596,   596,   562,   802,   679,  1221,
   416,   771,   861,  1279,   592,   382,  1153,    70,   716,  1400,
  1122,   388,   102,   420,   102,    70,  1224,   906,   907,   781,
    71,  1229,  1231,    53,   102,   672,   563,   600,   600,   356,
   304,   803,    69,   789,   432,   867,   510,   517,  1295,  1238,
  1296,   883,   885,  1298,   133,   528,   529,   443,  1130,   443,
   550,  1134,   642,  1075,   443,   409,   783,   434,   356,   443,
   649,   788,   488,   650,    69,   781,  1125,   651,   102,   644,
   491,   102,    69,   516,  1258,   698,   371,  1261,   699,  1489,
  1490,  1491,   130,   520,   521,   522,    99,   100,    71,   421,
   422,   926,  1294,   927,   439,   542,   930,   299,   301,   439,
   443,   541,   807,   443,   807,   374,   443,   574,  1097,   318,
   489,   312,   868,   401,   310,  1192,   318,   543,    71,  1216,
  1090,  1123,  1217,  1270,   889,  -672,  1271,   544,  -672,  1511,
  -672,  -672,  1402,    70,  1403,   523,  -674,   555,   130,  -674,
   485,  -674,  -674,   524,  1068,   565,    69,   429,  -672,   547,
   102,    69,  1324,   133,   311,    50,    50,   526,   527,  -674,
    50,    50,    64,    50,    50,    50,    50,    50,   127,    50,
   621,   431,   622,  1303,  1327,    64,    64,   963,   628,   565,
   629,   969,   845,   285,   964,   671,  1270,   931,   317,  1271,
    69,   717,  1555,   965,   302,   934,  1244,   633,   429,  1245,
   299,   301,   936,    70,   565,   264,   102,  1536,   720,  1270,
   299,   301,  1271,  1090,   312,  1247,   647,   310,   630,  1174,
    71,   102,  1153,  1246,   312,  1560,  1247,   310,   863,   863,
   632,  1016,    63,   389,   966,   636,   285,  1358,   429,   390,
   637,   513,   518,  1030,   639,    63,    63,    53,    53,   531,
   532,    53,    53,    53,    70,    53,    53,    53,    53,    53,
    69,    53,  1574,  1393,    53,    53,   599,   311,   565,  1526,
   645,   409,  1274,   975,   652,   130,   973,  1417,   163,  1270,
  1270,  1126,  1271,  1271,  1355,  1576,   285,   217,   510,   517,
  1584,   539,   540,   102,    70,    64,   285,   302,   654,   762,
   682,   995,   763,   596,   764,   371,   164,   302,   684,  -411,
  1591,    69,  -411,  1576,   688,   421,   422,   304,   689,   938,
   391,   940,   803,   691,  1255,   516,   891,   892,   893,   401,
   694,   264,   811,  1567,   374,   811,   600,  1527,   695,   371,
   696,   421,   422,  1124,   697,   318,   199,   200,  1064,   369,
   712,    69,   723,   781,   930,   133,   897,   898,   385,   811,
   811,   811,   724,   369,    71,    63,  1080,   750,   374,   596,
   751,   885,  1080,  1036,    72,    74,    75,   811,   894,   811,
   752,   895,   869,   753,    53,    70,   896,  1094,   443,   759,
  1238,    38,    39,    40,    41,   887,   888,  1048,   423,   317,
   728,   729,   600,  1164,   778,    71,  1059,   790,   409,  1202,
   299,   301,  1406,   382,  1016,  1127,  1135,  1136,  1137,   388,
   304,  1184,   791,  1184,   312,   431,   798,   310,   102,   102,
   304,   797,   748,   749,   389,   102,  -105,    71,   102,  -315,
   390,   102,    69,   717,   800,    71,    64,  -313,   431,   859,
    50,    50,   429,   264,  1021,    64,  1049,  1021,   910,  1021,
  1026,   911,  1330,   913,    50,  -743,   401,   311,  -743,  1365,
  1366,  -743,   669,   555,  1292,   429,   555,    50,    50,    50,
    50,    50,    50,    50,    50,    50,    50,    50,    50,    50,
    50,    50,    50,    50,    50,    50,   285,   936,  1404,   163,
   555,   555,   555,    52,   912,   299,   301,   302,    70,  1299,
  1142,  1143,  1144,  1145,   565,   686,    63,   942,   555,    71,
   555,   391,  1223,   948,    71,    63,   944,   164,   668,   102,
    50,    70,   987,   677,   641,    53,   310,   863,   647,   389,
   513,   518,    53,    53,    53,   390,    52,    52,    52,  1321,
   690,   285,    52,    80,   996,   690,    53,  1289,  1212,   385,
  1000,   102,    52,    71,   369,    69,   409,  1275,  1544,    53,
    53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
    53,    53,    53,    53,    53,    53,    53,    53,    69,    52,
  1281,   285,  1161,  1161,  1161,   855,   943,   811,  1011,  1537,
   760,   761,   302,   863,  1013,   811,   626,   318,   947,   811,
  1161,  1029,  1161,   803,   382,   442,   442,   596,   596,  1031,
   388,   811,    53,  1355,   401,   163,   391,   992,  1032,   811,
   304,  1233,  1035,    71,   679,   299,   301,   765,   761,   384,
  1268,  1164,   776,   777,  1037,  1127,   803,  1080,  1039,   312,
   600,   600,   310,   164,  1248,  1034,  1040,    49,   867,  1306,
   900,   901,  1165,  1518,   385,  1184,  1117,  1568,   552,   369,
   299,   301,    70,  1184,  1094,  1118,  1549,  1550,  1551,  1552,
  1185,  1041,  1185,   102,    71,  1065,   317,  1223,   102,   841,
   102,  -697,   311,  1581,  -697,  1072,  -697,  -697,  1396,   371,
    49,    49,    49,    52,  1073,   102,    49,   902,   903,    70,
   318,  1587,  1078,   371,  -697,  1086,    49,  1087,   443,   382,
   318,   285,   908,   909,    71,   388,  1099,   429,   374,    69,
   442,   442,   302,    69,  1441,   686,   102,   102,   555,   304,
  1102,   102,   374,    49,  -314,  1379,   555,  1103,   596,   677,
   555,   620,  1223,   318,  1500,   936,   285,  1104,   102,  1108,
  1020,  1121,   555,  1023,  1175,  1024,    69,   302,  1100,  1101,
   555,  1176,  1177,  1205,  1206,  1180,  1367,  1181,    50,    50,
    50,   600,  1178,    70,  1251,   669,  1370,  1179,  1124,   317,
  1343,  1344,   676,   443,  1193,  1338,  1339,  1421,  1422,   317,
  1534,  1535,  1195,  1084,  1085,  1519,   285,  1196,   599,   828,
   829,   163,  1319,   834,   835,    71,  1322,  1045,  1046,  1441,
  1209,   163,   725,  1022,   409,  1114,  1022,   802,  1022,  1027,
  1161,  1138,  1139,  1146,  1147,  1398,  1399,  1155,  1161,   164,
    69,  1210,  1161,   678,  1214,   596,   973,  1140,  1141,   164,
   679,   863,   863,    52,  1161,   304,  1215,    49,   299,   301,
  1442,  1218,  1161,  1235,    70,  1433,  1443,   811,   384,  1239,
    53,    53,    53,   855,   855,  1223,  1249,   669,   600,  1351,
   855,  1252,   401,   855,  1254,  1520,  1114,  1114,  1114,    50,
  1257,  1259,   647,  1262,  -214,  1368,  1263,  1264,  1269,  1276,
  1165,   620,  1277,  1280,  1114,  1188,  1114,  1188,  1278,    50,
  1279,  1522,  1282,  1441,   371,  1283,   678,  -106,  1286,  1194,
   318,    69,  1300,  1077,  1185,  1307,  1420,  1308,  1309,   861,
  1423,  1298,  1185,  1316,   442,  1485,   442,  1326,    71,  1332,
    64,   442,  1335,   374,   285,  1442,   442,  1444,   722,  1433,
  1433,  1443,  1342,  1034,   318,   302,   938,   939,   940,  1345,
  1348,    71,  1501,   102,  1352,  1411,  1413,  1353,   811,  1357,
   891,   892,   893,  1360,  1240,    38,    39,    40,    41,  1362,
  1363,    53,   863,  1364,  1233,  1374,  1394,   442,   398,  1384,
   442,  1407,  1395,   442,  1479,   398,  1445,   811,   443,   317,
  1529,    53,  1517,   857,  1405,  1410,    50,    49,   555,  1412,
    63,  1418,  1522,  1529,    69,   318,  1424,  1486,  1488,   371,
  -215,  1492,  1119,  1493,    52,  1120,    52,   667,  1494,    53,
   896,  1222,  1444,  1495,  1433,  1496,  1502,  1132,  1112,  1442,
   667,  1522,  1503,  1508,  1433,  1443,  1504,  1513,   374,  1505,
  1516,  1509,    33,    34,    35,    36,    37,  1515,   572,   318,
  1512,   552,  1351,   618,  1542,    33,    34,    35,    36,    37,
  1525,  1528,    52,  1541,  1543,  1545,  1026,    52,    52,   863,
  1546,    52,    52,    52,  1547,    52,    52,    52,    52,    52,
  1554,    52,  1556,  1562,    52,    52,  1565,  1566,    53,  1579,
  1161,  1590,    71,  1573,  1585,    50,    71,  1578,   317,   555,
  1582,   102,  1583,  1593,  1588,  1594,  1336,   511,  1485,  1538,
   512,  1082,   838,    64,  1114,   839,  1444,   840,  1548,   641,
  1050,  1331,  1114,   855,  1051,   855,  1114,  1052,   555,    71,
  1361,   381,   641,  1028,  1557,   318,  1201,  1256,  1114,   741,
   855,  1267,   559,   557,   558,   772,  1114,   560,  1558,  1063,
  1273,   997,   683,  1401,   620,  1419,  1589,   678,  1514,  1571,
  1523,   804,   794,  1034,  1320,  1445,  1213,  1479,  1058,   419,
   318,  1575,  1260,  1006,  1333,  1334,  -564,  1415,   680,  -564,
  1337,  -564,  -564,    63,  1416,   681,  1222,    53,  1310,  1311,
  1340,  1161,  1580,  1160,  1160,  1160,  -564,  1564,  -564,  -564,
  1532,  1586,    53,    71,    52,   347,  1017,   708,  1148,  1151,
  1149,  1160,  1150,  1160,   317,  1152,  1570,  1115,  1314,   417,
  1161,    49,    49,   718,     0,    49,    49,    49,     0,    49,
    49,    49,    49,    49,     0,    49,     0,     0,    49,    49,
     0,     0,     0,     0,     3,     4,     5,     6,     7,     8,
     0,  1222,  1302,     0,   702,   703,     0,   704,   705,   706,
     0,  1523,    11,    12,     0,   442,   384,     0,     0,     0,
     0,     0,     0,  1034,  1034,  1034,     0,     0,     0,     0,
  1188,     0,     0,   398,    71,     0,     0,     0,     0,     0,
  1577,     0,     0,     0,   398,    13,  1015,    52,    52,    52,
    52,   545,     0,   726,     0,    80,   727,   655,   656,   657,
   658,   659,   660,   661,   662,   663,   664,     0,     0,   730,
   731,     0,     0,   732,   733,     0,   734,     0,     0,  1328,
   735,   736,   737,     0,   530,     0,   738,     0,     0,   739,
    52,    52,     0,     0,    80,   740,     0,    52,     0,     0,
    52,     0,     0,   564,     0,    52,     0,     0,   318,     0,
   381,   546,    52,    52,    52,     0,     0,     0,     0,     0,
     0,     0,  1510,   665,  1222,     0,    52,    71,     0,   428,
     0,   589,     0,     0,  1114,     0,     0,     0,     0,    52,
    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
    52,    52,    52,    52,    52,    52,    52,    52,   381,  1371,
  1372,     0,     0,     0,     0,  1375,  1376,     0,     0,     0,
     0,   830,   831,   832,   833,     0,     0,     0,     0,     0,
     0,  1160,  1079,     0,     0,  1027,     0,     0,  1079,  1160,
     0,     0,    52,  1160,     0,     0,     0,     0,     0,     0,
     0,     0,   804,     0,     0,  1160,  1034,     0,  1188,  1188,
  1188,  1188,     0,  1160,     0,   105,   653,   384,   346,     0,
     0,     0,     0,  1385,  1553,     0,     0,     0,     0,     0,
     0,   428,     0,     0,  1034,  1114,     0,     0,     0,   424,
   426,     0,     0,  1487,     0,     0,   437,   437,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    49,
   398,     0,  1386,  1387,  1114,  1388,    49,    49,    49,     0,
  1389,     0,     0,  1390,  1391,     0,  1392,     0,     0,   917,
    49,   589,    38,    39,    40,    41,     0,     0,     0,     0,
     0,     0,   678,    49,    49,    49,    49,    49,    49,    49,
    49,    49,    49,    49,    49,    49,    49,    49,    49,    49,
    49,    49,     0,     0,     0,     0,     0,     0,     0,   571,
     0,     0,   384,   103,     0,     0,   103,   424,   573,     0,
   426,     0,     0,    80,    52,    52,    52,     0,    52,     0,
     0,     0,     0,   103,   103,   442,    49,   103,   103,     0,
    52,     0,    52,     0,   103,   103,     0,     0,     0,     0,
     0,   437,   437,     0,     0,     0,     0,    52,     0,     0,
     0,     0,     0,  1014,     0,   428,     0,     0,     0,     0,
     0,  1042,  1043,  1044,   398,   398,   398,   398,   398,   398,
   398,   398,   754,   398,     0,   398,     0,   398,   655,   656,
   657,   658,   659,   660,   661,   662,   663,   664,   556,     0,
     0,   556,     0,     0,     0,     0,   428,     0,     0,     0,
   442,     0,     0,     0,     0,   971,   971,   103,     0,     0,
     0,     0,     0,     0,     0,   103,   103,     0,   103,     0,
    52,    52,    52,     0,     0,     0,     0,     0,   428,     0,
     0,  1160,   755,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  1079,   756,     0,     0,     0,     0,   103,
   103,     0,   433,     0,     0,  1005,  1079,  1079,     0,     0,
     0,     0,     0,   573,     0,   493,   494,     0,     0,     0,
  1079,     0,     0,   505,   506,     0,     0,   507,   508,     0,
     0,     0,     0,     0,     0,   589,   589,     0,   678,   519,
   589,   589,     0,   589,   589,   589,   589,   589,   381,   589,
     0,     0,     0,     0,     0,     0,    52,    52,    52,     0,
   428,     0,   430,     0,   899,   428,     0,   440,   440,     0,
     0,     0,     0,   566,     0,     0,     0,     0,     0,     0,
     0,    52,  1160,     0,  1128,   398,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   437,     0,   437,     0,     0,
     0,    52,   437,     0,   428,     0,     0,   437,     0,     0,
     0,  1160,     0,   433,     0,     0,     0,     0,  1172,  1173,
     0,   103,     0,     0,    49,    49,    49,     0,     0,    52,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   493,   494,     0,     0,     0,     0,     0,   437,    52,
    80,   437,     0,     0,   437,   442,     0,     0,     0,     0,
     0,     0,   505,   506,   430,     0,     0,   507,   508,     0,
     0,     0,     0,   287,   428,     0,     0,     0,     0,     0,
     0,     0,   440,   440,     0,   809,     0,   809,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   566,    52,     0,
     0,     0,     0,   103,     0,   103,     0,   398,     0,     0,
   782,  1079,     0,     0,     0,   103,     0,     0,     0,   287,
     0,     0,     0,     0,     0,   428,     0,     0,     0,     0,
     0,     0,     0,   851,     0,    49,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   190,   191,   192,   381,
     0,   508,     0,     0,     0,    49,   782,   290,     0,   103,
     0,     0,   103,     0,   360,   428,   199,   200,     0,   202,
     0,   394,   205,   206,   207,   208,   209,   918,   211,   396,
   213,     0,     0,     0,     0,     0,   530,   530,     0,   937,
   971,     0,     0,   808,     0,   808,     0,    52,     0,     0,
     0,     0,     0,   499,   979,     0,     0,     0,   430,     0,
  1225,     0,    52,     0,     0,     0,     0,     0,     0,     0,
   588,     0,  1305,     0,  1005,     0,   556,   556,   556,     0,
   589,   589,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   103,     0,   398,   589,     0,     0,     0,     0,   430,
     0,     0,    49,     0,   381,   971,   428,   589,   589,   589,
   589,   589,   589,   589,   589,   589,   589,   589,   589,   589,
   589,   589,   589,   589,   589,   589,   573,     0,     0,     0,
     0,   430,     0,     0,   287,     0,   440,     0,   440,   430,
     0,     0,     0,   440,     0,     0,     0,   103,   440,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   640,     0,
   589,     0,   103,     0,     0,     0,     0,     0,   821,   822,
   549,     0,   919,     0,     0,     0,     0,     0,   398,   398,
     0,     0,   190,   191,   192,     0,   437,     0,     0,   440,
     0,     0,   440,     0,     0,   440,     0,     0,     0,     0,
     0,    49,   199,   200,   548,   202,   843,   394,   205,   206,
   207,   208,   209,     0,   211,   396,   213,     0,   675,     0,
   588,     0,     0,     0,     0,  1225,     0,     0,     0,   428,
     0,     0,     0,     0,   103,     0,     0,     0,     0,     0,
     0,     0,     0,   360,     0,     0,     0,    13,     0,     0,
     0,  1397,   428,     0,     0,     0,     0,   430,     0,     0,
     0,   851,   851,     0,     0,     0,     0,     0,   851,     0,
   914,   851,     0,     0,  1116,   971,   655,   656,   657,   658,
   659,   660,   661,   662,   663,   664,     0,     0,     0,     0,
  1225,   360,     0,     0,   782,     0,     0,     0,     0,     0,
     0,     0,   782,   782,     0,     0,   809,  1081,     0,   809,
     0,     0,     0,  1081,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   430,   808,   808,
   915,     0,     0,   809,   809,   809,     0,     0,     0,   287,
     0,     0,   756,  1506,  1507,     0,     0,     0,   899,   899,
     0,   809,     0,   809,     0,     0,   549,     0,     0,     0,
     0,     0,  1197,     0,     0,     0,     0,     0,     0,   103,
   103,     0,     0,     0,     0,     0,   103,     0,   430,   103,
     0,   837,   103,     0,     0,     0,     0,     0,     0,  1533,
     0,     0,     0,   428,   979,     0,     0,   428,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   589,   589,
   589,     0,     0,  1225,   556,     0,     0,   556,   430,     0,
     0,   287,     0,   499,     0,     0,     0,     0,     0,     0,
   428,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   556,   556,   556,   588,   588,     0,     0,     0,   588,
   588,     0,   588,   588,   588,   588,   588,     0,   588,   556,
     0,   556,     0,     0,     0,     0,   190,   191,   192,     0,
   103,   287,     0,     0,     0,     0,   287,   440,   287,     0,
     0,     0,     0,     0,   287,     0,   199,   200,  1572,   202,
   616,   394,   205,   206,   207,   208,   209,   617,   211,   396,
   213,     0,   103,     0,   428,   290,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   437,     0,     0,   589,
     0,   851,     0,   851,   287,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   287,     0,     0,     0,   851,   589,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   499,     0,     0,   959,   959,
   499,     0,   499,     0,     0,     0,     0,     0,   499,  1312,
  1313,   809,     0,     0,  1315,     0,     0,     0,     0,   809,
     0,     0,     0,   809,     0,     0,     0,     0,  1081,   998,
   295,   437,     0,     0,     0,   809,     0,   368,   408,     0,
     0,  1081,  1081,   809,     0,   408,     0,  1002,  1003,     0,
     0,  1007,     0,     0,     0,  1285,     0,     0,   290,     0,
     0,     0,     0,     0,   103,     0,     0,     0,     0,   103,
     0,   103,   430,     0,   618,   566,   589,     0,     0,     0,
   549,   287,  1019,     0,     0,  1019,   103,  1019,  1025,     0,
     0,   360,   813,     0,   813,   430,     0,     0,     0,     0,
   305,     0,     0,     0,     0,     0,     0,     0,   305,     0,
     0,     0,     0,     0,     0,   305,     0,   103,   103,   556,
     0,     0,   103,     0,     0,     0,     0,   556,     0,     0,
     0,   556,     0,     0,     0,     0,     0,     0,     0,   103,
   852,  1076,     0,   556,     0,     0,   305,     0,     0,   619,
     0,   556,     0,     0,     0,     0,   625,     0,     0,     0,
  1088,     0,     0,     0,     0,   499,     0,     0,     0,     0,
     0,   190,   191,   192,   287,   589,     0,     0,     0,   588,
   588,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   199,   200,   588,   202,   616,   394,   205,   206,   207,
   208,   209,   617,   211,   396,   213,   588,   588,   588,   588,
   588,   588,   588,   588,   588,   588,   588,   588,   588,   588,
   588,   588,   588,   588,   588,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   437,     0,     0,     0,
     0,   295,     0,     0,     0,     0,  1285,   440,     0,     0,
     0,     0,     0,   287,     0,     0,     0,     0,   290,   588,
     0,     0,     0,     0,     0,     0,   368,   286,     0,   287,
     0,     0,     0,     0,     0,   286,     0,     0,     0,     0,
     0,   809,   286,   287,     0,     0,     0,     0,     0,     0,
     0,     0,   360,     0,     0,     0,     0,     0,     0,   619,
   625,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   305,     0,   286,   368,     0,   287,     0,     0,   287,
     0,   305,   440,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   959,     0,     0,     0,   499,     0,     0,
     0,   625,     0,     0,   103,   549,     0,   430,     0,     0,
     0,     0,     0,   360,   408,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  1242,     0,     0,
     0,     0,     0,     0,     0,   813,  1091,   813,   813,   287,
     0,     0,   809,     0,   979,     0,     0,     0,     0,   556,
     0,     0,     0,     0,     0,     0,     0,   360,   959,   287,
   499,     0,     0,   499,     0,     0,     0,     0,     0,     0,
     0,   809,   190,   191,   192,     0,     0,     0,   852,   852,
     0,     0,     0,     0,   305,   852,     0,     0,   852,     0,
     0,     0,   199,   200,   287,   202,     0,   394,   205,   206,
   207,   208,   209,   918,   211,   396,   213,     0,     0,     0,
     0,  1425,     0,     0,     0,   786,     0,  1426,     0,  1427,
     0,     0,     0,   499,     0,  1290,     0,     0,  1428,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   286,     0,
     0,     0,     0,   290,     0,     0,     0,     0,     0,     0,
   556,     0,   103,     0,     0,   667,     0,     0,     0,   287,
     0,   792,     0,  1429,     0,     0,     0,   588,   588,   588,
     0,     0,     0,     0,     0,     0,   305,     0,   360,   556,
    33,    34,    35,    36,    37,     0,     0,   440,   295,     0,
     0,     0,     0,     0,     0,   287,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   619,   625,     0,   619,     0,   287,   959,   625,
   408,     0,     0,     0,     0,     0,     0,  1076,     0,     0,
     0,   970,   970,   360,     0,     0,   549,     0,     0,  -500,
     0,   286,     0,     0,  1430,     0,  1431,  1531,   305,     0,
     0,  1007,     0,     0,     0,     0,  1356,     0,     0,     0,
  1432,     0,     0,     0,     0,     0,     0,     0,   588,   499,
   625,     0,   287,     0,     0,     0,     0,     0,     0,     0,
     0,  1004,     0,     0,     0,     0,     0,     0,   588,     0,
   305,   295,  1373,     0,     0,     0,     0,     0,   305,     0,
     0,   499,     0,   305,     0,   305,     0,     0,     0,     0,
   625,   305,   813,  1091,   813,     0,   813,     0,     0,   993,
   305,     0,     0,     0,   368,     0,     0,     0,   852,     0,
   852,     0,     0,   286,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   852,     0,     0,     0,     0,
     0,   305,     0,     0,  1414,     0,   360,   408,     0,     0,
     0,   305,     0,     0,   826,   827,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   588,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   349,     0,     0,     0,   286,   305,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   305,     0,  1425,
     0,     0,     0,     0,  1007,  1426,     0,  1427,     0,  1067,
     0,     0,     0,  1076,     0,  1007,  1428,     0,     0,  -970,
  -970,     0,   786,  -970,  -970,     0,  -970,   286,   792,     0,
  -970,  -970,  -970,     0,     0,   286,  -970,     0,   305,  -970,
   286,     0,   286,   667,     0,  -970,     0,     0,   286,     0,
     0,  1429,     0,     0,   588,     0,     0,   286,     0,     0,
     0,   295,     0,     0,     0,     0,     0,     0,    33,    34,
    35,    36,    37,     0,   813,   813,  1378,     0,     0,     0,
     0,     0,     0,     0,   625,   408,     0,     0,   286,     0,
     0,     0,     0,     0,   625,   368,     0,     0,   286,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   625,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   305,     0,     0,     0,     0,   970,  -500,     0,     0,
     0,     0,  1430,     0,  1431,   641,     0,     0,     0,     0,
     0,     0,     0,   286,     0,   305,  1220,     0,  1432,     0,
     0,     0,     0,     0,   286,     0,     0,   813,     0,     0,
  1004,     0,     0,     0,     0,  1112,     0,   190,   191,   192,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   848,
   368,   970,     0,     0,     0,   286,     0,     0,    10,     0,
   305,   849,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   305,     0,     0,   993,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   305,     0,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,     0,    42,   305,     0,     0,   305,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   295,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    43,   286,     0,
     0,     0,     0,  1067,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  1220,   286,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   305,     0,     0,     0,
     0,     0,     0,   408,     0,     0,     0,     0,     0,     0,
     0,   850,     0,     0,     0,     0,   305,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   625,
     0,   970,     0,     0,     0,     0,     0,   286,     0,     0,
     0,     0,     0,     0,     0,     0,  1220,     0,     0,     0,
     0,   305,     0,   286,   190,   191,   192,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   286,     0,     0,
     0,     0,     0,   305,     0,     0,   848,     0,     0,     0,
     0,     0,     0,     0,     0,    10,     0,     0,   849,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   286,     0,     0,   286,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   305,     0,     0,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,     0,    42,
     0,     0,   305,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   286,     0,     0,     0,     0,     0,  1220,
     0,     0,     0,     0,    43,     0,   190,   191,   192,     0,
     0,     0,     0,   286,   305,     0,     0,     0,     0,     0,
     3,   106,   713,     6,   107,     8,   199,   200,     0,   202,
     0,   204,   205,   206,   207,   208,   209,   714,   211,   715,
   213,   355,     0,     0,     0,     0,     0,     0,   286,     0,
     0,     0,     0,     0,     0,     0,     0,   114,   850,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   305,
   286,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
     0,    42,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   286,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    43,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   286,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   130,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   549,   286,   624,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   349,     0,   190,   191,   192,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   286,   193,   194,   195,
   196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
   206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   112,
   225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
   118,   235,   119,   236,   237,   238,   121,   122,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,   239,   240,   241,
   242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
   252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
   262,   263,   125,    43,     0,   126,   127,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,     0,     0,   264,     0,   265,
   266,     0,   130,     0,  1219,   267,   268,   269,   270,   271,
   133,     0,   272,   273,   134,   274,   275,   276,   277,   278,
   279,    43,   280,   281,   282,   283,   284,   190,   191,   192,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   193,   194,   195,   196,   197,   198,   199,   200,   201,
   202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
   212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
   222,   223,   224,   112,   225,   226,   227,   228,   229,   230,
   231,   232,   233,   234,   118,   235,   119,   236,   237,   238,
   121,   122,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,   239,   240,   241,   242,   243,   244,   245,   246,   247,
   248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
   258,   259,   260,   261,   262,   263,   125,    43,     0,   126,
   127,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   264,     0,   265,   266,     0,   130,     0,  1219,   267,
   268,   269,   270,   271,   133,     0,   272,   273,   134,   274,
   275,   276,   277,   278,   279,     0,   280,   281,   282,   283,
   284,   190,   191,   192,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   193,   194,   195,   196,   197,
   198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
   208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   112,   225,   226,
   227,   228,   229,   230,   231,   232,   233,   234,   118,   235,
   119,   236,   237,   238,   121,   122,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
   254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
   125,    43,     0,   126,   127,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   264,     0,   265,   266,     0,
   130,     0,     0,   267,   268,   269,   270,   271,   133,     0,
   272,   273,   134,   274,   275,   276,   277,   278,   279,     0,
   280,   281,   282,   283,   284,   190,   191,   192,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     3,
   106,     0,     6,   107,     8,   199,   200,     0,   202,     0,
   394,   205,   206,   207,   208,   209,   395,   211,   396,   213,
     0,     0,     0,     0,   109,     0,     0,   110,     0,   111,
     0,   112,     0,     0,     0,   113,   114,   115,     0,   116,
   117,     0,   118,   397,   119,     0,   120,     0,   121,   122,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,     0,
    42,     0,     0,     0,     0,     0,     0,     0,     0,   123,
   124,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   125,    43,     0,   126,   127,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   128,     0,     0,   130,     0,   190,   191,   192,     0,
   131,   132,   133,     0,     0,     0,   134,     0,   135,   359,
   193,   106,   418,     6,   197,     8,   199,   200,     0,   202,
     0,   394,   205,   206,   207,   208,   209,   928,   211,   396,
   213,     0,     0,     0,     0,   109,     0,     0,   110,     0,
   111,     0,   112,     0,     0,     0,   113,   114,   115,     0,
   116,   117,     0,   118,   397,   119,     0,   120,     0,   121,
   122,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
     0,    42,     0,     0,     0,     0,     0,     0,     0,     0,
   123,   124,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   125,    43,     0,   126,   127,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   128,     0,     0,   130,     0,     0,     0,     0,
     0,   131,   132,   133,     0,     0,     0,   134,     0,   135,
   359,     0,   349,   929,   190,   191,   192,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     3,   106,
   350,     6,   107,     8,   199,   200,   351,   352,   353,   204,
   205,   206,   207,   208,   209,   354,   211,   212,   213,   355,
  -970,  -970,     0,   109,  -970,  -970,   110,  -970,   111,     0,
   112,  -970,  -970,  -970,   113,   114,   115,  -970,   116,   117,
  -970,   118,   235,   119,     0,   120,  -970,   121,   122,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,     0,    42,
     0,     0,     0,     0,     0,     0,     0,     0,   123,   124,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   125,    43,     0,   126,   127,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   356,     0,
   128,     0,     0,   130,     0,   357,   358,     0,     0,   131,
   132,   133,     0,     0,     0,   134,     0,   135,   359,   349,
     0,   190,   191,   192,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     3,   106,   949,     6,   107,
     8,   199,   200,   950,   202,     0,   394,   205,   206,   207,
   208,   209,   951,   211,   715,   213,   355,   730,   952,     0,
   109,   732,   953,   110,   222,   111,     0,   112,   954,   736,
   955,   113,   114,   115,   738,   116,   117,   956,   118,   235,
   119,   957,   120,   958,   121,   122,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,     0,    42,     0,     0,     0,
     0,     0,     0,     0,     0,   123,   124,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   125,    43,     0,   126,   127,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   668,     0,   128,     0,     0,
   130,     0,   357,   358,     0,     0,   131,   132,   133,     0,
     0,     0,   134,     0,   135,   359,  1287,     0,   190,   191,
   192,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     3,   106,     0,     6,   107,     8,   199,   200,
     0,   202,     0,   394,   205,   206,   207,   208,   209,   395,
   211,   396,   213,     0,     0,     0,     0,   109,     0,     0,
   110,     0,   111,     0,   112,     0,     0,     0,   113,   114,
   115,     0,   116,   117,     0,   118,   235,   119,     0,   120,
     0,   121,   122,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,   239,    42,     0,     0,     0,     0,     0,     0,
     0,     0,   123,   124,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   125,    43,     0,
   126,   127,     0,     0,     0,     0,     0,     0,     0,   349,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     3,   106,     0,     6,   107,
     8,     0,     0,     0,   128,     0,     0,   130,     0,     0,
     0,     0,   108,   131,   132,   133,     0,     0,     0,   134,
   109,   135,   359,   110,     0,   111,     0,   112,     0,     0,
     0,   113,   114,   115,     0,   116,   117,     0,   118,   235,
   119,     0,   120,     0,   121,   122,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,     0,    42,     0,     0,     0,
     0,     0,     0,     0,     0,   123,   124,     0,     0,     0,
     0,   190,   191,   192,     0,     0,     0,     0,     0,     0,
   125,    43,     0,   126,   127,     3,   106,     0,     6,   107,
     8,   199,   200,     0,   202,     0,   394,   205,   206,   207,
   208,   209,   623,   211,   396,   213,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   996,     0,   128,     0,     0,
   130,     0,   114,     0,     0,     0,   131,   132,   133,     0,
     0,     0,   134,     0,   135,   136,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,     0,    42,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   190,   191,   192,     0,     0,     0,     0,
     0,    43,     0,     0,     0,     0,     0,     3,   106,     0,
     6,   107,     8,   199,   200,     0,   202,     0,   394,   205,
   206,   207,   208,   209,   623,   211,   396,   213,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   130,     0,     0,     0,   114,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   549,     0,   624,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,     0,    42,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   190,   191,   192,
     0,     0,     0,    43,     0,     0,     0,     0,     0,     0,
     0,     3,   106,   350,     6,   107,     8,   199,   200,   351,
   352,   353,   204,   205,   206,   207,   208,   209,   354,   211,
   212,   213,   355,     0,     0,     0,   109,     0,     0,   110,
     0,   111,   130,   112,     0,     0,     0,   113,   114,   115,
     0,   116,   117,     0,   118,   235,   119,   549,   120,   919,
   121,   122,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,     0,    42,     0,     0,     0,     0,     0,     0,     0,
     0,   123,   124,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   125,    43,     0,   126,
   127,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   356,     0,   128,     0,     0,   130,     0,   357,   358,
     0,     0,   131,   132,   133,   190,   191,   192,   134,     0,
   135,   359,     0,     0,     0,     0,     0,     0,     0,     3,
   106,     0,     6,   107,     8,   199,   200,     0,   202,   616,
   394,   205,   206,   207,   208,   209,   674,   211,   396,   213,
     0,     0,     0,     0,   109,     0,     0,   110,     0,   111,
     0,   112,     0,     0,     0,   113,   114,   115,     0,   116,
   117,     0,   118,   235,   119,     0,   120,     0,   121,   122,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,   239,
    42,     0,     0,     0,     0,     0,     0,     0,     0,   123,
   124,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   125,    43,     0,   126,   127,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   128,     0,     0,   130,     0,     0,   358,     0,     0,
   131,   132,   133,   190,   191,   192,   134,     0,   135,   359,
     0,     0,     0,     0,     0,     0,     0,     3,   106,     0,
     6,   107,     8,   199,   200,     0,   202,   616,   394,   205,
   206,   207,   208,   209,   674,   211,   396,   213,     0,     0,
     0,     0,   109,     0,     0,   110,     0,   111,     0,   112,
     0,     0,     0,   113,   114,   115,     0,   116,   117,     0,
   118,   235,   119,     0,   120,     0,   121,   122,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,     0,    42,     0,
     0,     0,     0,     0,     0,     0,     0,   123,   124,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   125,    43,     0,   126,   127,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   128,
     0,     0,   130,     0,   357,   358,     0,     0,   131,   132,
   133,   190,   191,   192,   134,     0,   135,   359,     0,     0,
     0,     0,     0,     0,     0,     3,   106,     0,     6,   107,
     8,   199,   200,     0,   202,     0,   394,   205,   206,   207,
   208,   209,   395,   211,   396,   213,     0,     0,     0,     0,
   109,     0,     0,   110,     0,   111,     0,   112,     0,     0,
     0,   113,   114,   115,     0,   116,   117,     0,   118,   235,
   119,     0,   120,     0,   121,   122,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,     0,    42,     0,     0,     0,
     0,     0,     0,     0,     0,   123,   124,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   125,    43,     0,   126,   127,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   128,     0,     0,
   130,     0,   357,   358,     0,     0,   131,   132,   133,   190,
   191,   192,   134,     0,   135,   359,     0,     0,     0,     0,
     0,     0,     0,     3,   106,     0,     6,   107,     8,   199,
   200,     0,   202,     0,   394,   205,   206,   207,   208,   209,
   395,   211,   396,   213,     0,     0,     0,     0,   109,     0,
     0,   110,     0,   111,     0,   112,     0,     0,     0,   113,
   114,   115,     0,   116,   117,     0,   118,   235,   119,     0,
   120,     0,   121,   122,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,   239,    42,     0,     0,     0,     0,     0,
     0,     0,     0,   123,   124,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   125,    43,
     0,   126,   127,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   128,     0,     0,   130,     0,
   190,   191,   192,     0,   131,   132,   133,     0,     0,     0,
   134,     0,   135,   359,     3,   106,     0,     6,   107,     8,
   199,   200,     0,   202,     0,   394,   205,   206,   207,   208,
   209,   395,   211,   396,   213,     0,     0,     0,     0,   109,
     0,     0,   110,     0,   111,     0,   112,     0,     0,     0,
   113,   114,   115,     0,   116,   117,     0,   118,   397,   119,
     0,   120,     0,   121,   122,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,     0,    42,     0,     0,     0,     0,
     0,     0,     0,     0,   123,   124,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   125,
    43,     0,   126,   127,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   128,     0,     0,   130,
     0,   190,   191,   192,     0,   131,   132,   133,     0,     0,
     0,   134,     0,   135,   359,   193,   106,     0,     6,   197,
     8,   199,   200,     0,   202,     0,   394,   205,   206,   207,
   208,   209,   928,   211,   396,   213,     0,     0,     0,     0,
   109,     0,     0,   110,     0,   111,     0,   112,     0,     0,
     0,   113,   114,   115,     0,   116,   117,     0,   118,   397,
   119,     0,   120,     0,   121,   122,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,     0,    42,     0,     0,     0,
     0,     0,     0,     0,     0,   123,   124,     0,     0,     0,
     0,   190,   191,   192,     0,     0,     0,     0,     0,     0,
   125,    43,     0,   126,   127,     3,   106,   949,     6,   107,
     8,   199,   200,     0,   202,     0,   394,   205,   206,   207,
   208,   209,  1203,   211,   715,   213,   355,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   128,     0,     0,
   130,     0,   114,     0,     0,     0,   131,   132,   133,     0,
     0,     0,   134,     0,   135,   359,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,     0,    42,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   190,   191,   192,     0,     0,     0,     0,     0,     0,
     0,    43,     0,     0,     0,     3,   106,   713,     6,   107,
     8,   199,   200,     0,   202,     0,   204,   205,   206,   207,
   208,   209,   714,   211,   715,   213,   355,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   130,     0,   114,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   549,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,     0,    42,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   190,   191,   192,     0,     0,     0,     0,     0,     0,
     0,    43,     0,     0,     0,     3,   106,   949,     6,   107,
     8,   199,   200,     0,   202,     0,   394,   205,   206,   207,
   208,   209,  1203,   211,   715,   213,   355,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   114,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   549,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,     0,    42,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   190,   191,   192,     0,     0,     0,     0,     0,     0,
     0,    43,     0,     0,     0,     3,   106,     0,     6,   107,
     8,   199,   200,     0,   202,     0,   394,   205,   206,   207,
   208,   209,   623,   211,   396,   213,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   114,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   549,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,     0,    42,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   190,   191,   192,     0,     0,     0,     0,     0,     0,
     0,    43,     0,     0,     0,     3,   106,     0,     6,   107,
     8,   199,   200,     0,   202,     0,   394,   205,   206,   207,
   208,   209,   623,   211,   396,   213,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   130,     0,   114,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   549,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,     0,    42,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   190,   191,   192,     0,     0,     0,     0,     0,     0,
     0,    43,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   848,     0,     0,     0,     0,     0,     0,
     0,     0,    10,     0,     0,   849,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   549,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,     0,    42,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    43,     0,     0,     0,     0,     3,     4,     5,     6,
     7,     8,     0,     0,     0,     0,  1446,     0,     0,     0,
     0,     0,     0,     0,    11,    12,     0,  1447,   215,  1448,
     0,  1449,   219,  1450,  1451,  1000,  1452,   224,     0,  1453,
   226,  1454,  1455,     0,  1456,   231,  1457,  1458,  1459,     0,
     0,     0,  1460,  1461,  1462,   850,     0,    13,  1463,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,     0,  1464,   241,   242,
   243,   244,   245,   246,   247,   248,  1465,  1466,   251,   252,
   253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
   263,     0,    43,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  1467,  1468,  1469,   266,
     0,  1470,  1471,  1472,  1473,   268,   269,  1474,  1475,     0,
     0,   272,   273,     0,   274,  1476,  1477,   277,   278,   279,
  1478,   280,   281,   282,   283,   284,     3,     4,     5,     6,
     7,     8,     0,     0,     0,     0,  1446,     0,     0,     0,
     0,     0,     0,     0,    11,    12,     0,  1447,   215,  1448,
     0,  1449,   219,  1450,  1451,     0,  1452,   224,     0,  1453,
   226,  1454,  1455,     0,  1456,   231,  1457,  1458,  1459,     0,
     0,     0,  1460,  1461,  1462,     0,     0,    13,  1463,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,     0,  1464,   241,   242,
   243,   244,   245,   246,   247,   248,  1465,  1466,   251,   252,
   253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
   263,     0,    43,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  1467,  1468,  1469,   266,
     0,  1470,  1569,  1472,  1473,   268,   269,  1474,  1475,     0,
     0,   272,   273,     0,   274,  1476,  1477,   277,   278,   279,
  1478,   280,   281,   282,   283,   284,     3,   106,     0,     6,
   107,     8,   199,   200,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   435,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   445,     0,     0,     0,     0,     0,
     0,     0,   446,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,     0,    42,   447,   448,
   449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     0,   459,   460,   461,   462,   463,   464,   465,   466,   467,
   468,     0,    43,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   469,     0,
     0,   470,     0,   638,     0,     0,     0,   471,   472,   473,
   474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
   484,     3,   106,     0,     6,   107,     8,   199,   200,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   435,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   445,
     0,     0,     0,     0,     0,     0,     0,   446,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,     0,    42,   447,   448,   449,   450,   451,   452,   453,
   454,   455,   456,   457,   458,     0,   459,   460,   461,   462,
   463,   464,   465,   466,   467,   468,     0,    43,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   469,     0,     0,   470,     0,     0,     0,
     0,     0,   471,   472,   473,   474,   475,   476,   477,   478,
   479,   480,   481,   482,   483,   484,     3,     4,     5,     6,
     7,     8,   575,     0,     9,     0,     0,     0,     0,     0,
     0,     0,   576,    10,    11,    12,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   112,     0,
     0,     0,     0,     0,     0,     0,   577,     0,     0,   578,
     0,   119,     0,     0,     0,   121,   122,    13,   579,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,     0,    42,     0,     0,
     0,     0,     0,     0,     0,     0,   580,   581,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   125,    43,     0,   126,   127,     0,     0,     0,     3,
  1156,  1157,     6,   107,     8,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  1129,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  -669,     0,     0,
  -669,   582,  -669,  -669,     0,     0,   114,   583,   584,   133,
     0,     0,     0,   585,     0,   586,   587,     0,     0,     0,
  -669,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,     0,
    42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    43,     0,     0,   127,     3,
  1156,  1157,     6,   107,     8,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  1129,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   114,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   515,     0,
  1158,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,     0,
    42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    43,     0,     0,   127,     3,
  1156,  1157,     6,   107,     8,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  1129,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   114,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   515,     0,
  1166,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,     0,
    42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    43,     0,     0,   127,     3,
  1156,  1157,     6,   107,     8,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  1129,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   114,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   515,     0,
  1170,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,     0,
    42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    43,     0,     0,   127,     3,
  1156,  1157,     6,   107,     8,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  1129,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   114,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   515,     0,
  1182,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,     0,
    42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    43,     0,     0,   127,     0,
     0,     0,     0,     0,     3,     4,     5,     6,     7,     8,
  1198,     0,     9,     0,     0,     0,     0,     0,     0,     0,
  1199,    10,    11,    12,     0,     0,   730,   952,     0,     0,
   732,   953,     0,   222,     0,     0,   112,   954,   736,   955,
     0,     0,     0,   738,   577,     0,   956,   578,   515,   119,
  1190,     0,   958,   121,   122,    13,   579,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    10,    42,     0,     0,     0,     0,
     0,     0,     0,     0,   580,   581,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   125,
    43,     0,   126,   127,     0,     0,     0,     0,     0,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,     0,    42,   582,
     0,     0,     0,     0,     0,   583,   584,   133,     0,     0,
     0,   585,     0,   870,  1200,     3,   106,     0,     6,   107,
     8,     0,     0,    43,     0,     0,     0,     0,   649,     0,
     0,   650,   108,     0,     0,   651,     0,     0,     0,     0,
   109,     0,     0,   110,     0,   111,     0,   112,     0,     0,
     0,   113,   114,   115,     0,   116,   117,   423,   118,     0,
   119,     0,   120,     0,   121,   122,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,     0,    42,     0,     0,     0,
     0,     0,     0,     0,     0,   123,   124,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   125,    43,     0,   126,   127,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     3,   106,
     0,     6,   107,     8,     0,     0,     0,   128,     0,     0,
   130,     0,     0,     0,     0,   108,   131,   132,   133,     0,
     0,     0,   134,   109,   135,   136,   110,     0,   111,     0,
   112,     0,     0,     0,   113,   114,   115,     0,   116,   117,
     0,   118,   235,   119,     0,   120,     0,   121,   122,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,     0,    42,
     0,     0,     0,     0,     0,     0,     0,     0,   123,   124,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   125,    43,     0,   126,   127,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     3,   106,     0,     6,   107,     8,   199,   200,     0,
   128,  -185,     0,   130,     0,     0,     0,     0,   108,   131,
   132,   133,     0,     0,     0,   134,   109,   135,   136,   110,
     0,   111,     0,   112,     0,     0,     0,   113,   114,   115,
     0,   116,   117,     0,   118,     0,   119,     0,   120,     0,
   121,   122,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,     0,    42,     0,     0,     0,     0,     0,     0,     0,
     0,   123,   124,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   125,    43,     0,   126,
   127,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     3,   106,     0,     6,   107,     8,
     0,     0,     0,   128,     0,     0,   130,     0,     0,     0,
     0,   108,   131,   132,   133,     0,     0,     0,   134,   109,
   135,   136,   110,     0,   111,     0,   112,     0,     0,     0,
   113,   114,   115,     0,   116,   117,     0,   118,   235,   119,
     0,   120,     0,   121,   122,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,     0,    42,     0,     0,     0,     0,
     0,     0,     0,     0,   123,   124,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   125,
    43,     0,   126,   127,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     3,   106,     0,
     6,   107,     8,     0,   996,     0,   128,     0,     0,   130,
     0,     0,     0,     0,   108,   131,   132,   133,     0,     0,
     0,   134,   109,   135,   136,   110,     0,   111,     0,   112,
     0,     0,     0,   113,   114,   115,     0,   116,   117,     0,
   118,   235,   119,     0,   120,     0,   121,   122,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,     0,    42,     0,
     0,     0,     0,     0,     0,     0,     0,   123,   124,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   125,    43,     0,   126,   127,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     3,   106,     0,     6,   107,     8,     0,     0,     0,   128,
     0,     0,   130,     0,     0,   358,     0,   108,   131,   132,
   133,     0,     0,     0,   134,   109,   135,   136,   110,     0,
   111,     0,   112,     0,     0,     0,   113,   114,   115,     0,
   116,   117,     0,   118,   235,   119,     0,   120,     0,   121,
   122,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
     0,    42,     0,     0,     0,     0,     0,     0,     0,     0,
   123,   124,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   125,    43,     0,   126,   127,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     3,   106,     0,     6,   107,     8,     0,
     0,     0,   128,  1131,     0,   130,     0,     0,     0,     0,
   108,   131,   132,   133,     0,     0,     0,   134,   109,   135,
   136,   110,     0,   111,     0,   112,     0,     0,     0,   113,
   114,   115,     0,   116,   117,     0,   118,   235,   119,     0,
   120,     0,   121,   122,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,     0,    42,     0,     0,     0,     0,     0,
     0,     0,     0,   123,   124,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   125,    43,
     0,   126,   127,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     3,   106,     0,     6,
   107,     8,     0,     0,     0,   128,  1301,     0,   130,     0,
     0,     0,     0,   108,   131,   132,   133,     0,     0,     0,
   134,   109,   135,   136,   110,     0,   111,     0,   112,     0,
     0,     0,   113,   114,   115,     0,   116,   117,     0,   118,
     0,   119,     0,   120,     0,   121,   122,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,     0,    42,     0,     0,
     0,     0,     0,     0,     0,     0,   123,   124,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   125,    43,     0,   126,   127,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     3,
   106,     0,     6,   107,     8,     0,     0,     0,   128,   129,
     0,   130,     0,     0,     0,     0,   108,   131,   132,   133,
     0,     0,     0,   134,   109,   135,   136,   110,     0,   111,
     0,   112,     0,     0,     0,   113,   114,   115,     0,   116,
   117,     0,   118,   235,   119,     0,   120,     0,   121,   122,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,     0,
    42,     0,     0,     0,     0,     0,     0,     0,     0,   123,
   124,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   125,    43,     0,   126,   127,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     3,   106,     0,     6,   107,     8,     0,     0,
     0,   128,     0,     0,   130,     0,     0,     0,     0,   108,
   131,   132,   133,     0,     0,     0,   134,   109,   135,   136,
   110,     0,   111,     0,   112,     0,     0,     0,   113,   114,
   115,     0,   116,   117,     0,   118,   397,   119,     0,   120,
     0,   121,   122,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,     0,    42,     0,     0,     0,     0,     0,     0,
     0,     0,   123,   124,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   125,    43,     0,
   126,   127,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     3,   106,     0,     6,   107,
     8,     0,     0,     0,   128,     0,     0,   130,     0,     0,
     0,     0,   108,   131,   132,   133,     0,     0,     0,   134,
   109,   135,   136,   110,     0,   111,     0,   112,     0,     0,
     0,   113,   114,   115,     0,   116,   117,     0,   118,     0,
   119,     0,   120,     0,   121,   122,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,     0,    42,     0,     0,     0,
     0,     0,     0,     0,     0,   123,   124,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   125,    43,     0,   126,   127,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     3,   106,
     0,     6,   107,     8,     0,  1000,     0,   128,     0,     0,
   130,     0,     0,     0,     0,   108,   131,   132,   133,     0,
     0,     0,   134,   109,   135,   136,   110,     0,   111,     0,
   112,     0,     0,     0,   113,   114,   115,     0,   116,   117,
     0,   118,     0,   119,     0,   120,     0,   121,   122,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,     0,    42,
     0,     0,     0,     0,     0,     0,     0,     0,   123,   124,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   125,    43,     0,   126,   127,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     3,   106,     0,     6,   107,     8,     0,     0,     0,
   128,  1369,     0,   130,     0,     0,     0,     0,   108,   131,
   132,   133,     0,     0,     0,   134,   109,   135,   136,   110,
     0,   111,     0,   112,     0,     0,     0,   113,   114,   115,
     0,   116,   117,     0,   118,     0,   119,     0,   120,     0,
   121,   122,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,     0,    42,     0,     0,     0,     0,     0,     0,     0,
     0,   123,   124,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   125,    43,     0,   126,
   127,     0,     0,     0,     0,     0,     0,     0,     0,     3,
     4,     5,     6,     7,     8,   575,     0,     9,     0,     0,
     0,     0,     0,     0,     0,   576,    10,    11,    12,     0,
     0,     0,     0,   128,     0,     0,   130,     0,     0,     0,
     0,   112,   131,   132,   133,     0,     0,     0,   134,   577,
   135,   136,   578,     0,   119,     0,     0,     0,   121,   122,
    13,   579,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,     0,
    42,     0,     0,     0,     0,     0,     0,     0,     0,   580,
   581,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   125,    43,     0,   126,   127,     0,
     0,     0,     0,     0,     0,     0,     0,     3,     4,     5,
     6,     7,     8,   199,   200,     9,     0,     0,     0,     0,
     0,     0,     0,     0,    10,    11,    12,     0,     0,     0,
     0,     0,     0,     0,   582,     0,     0,     0,     0,   112,
   583,   584,   133,     0,     0,     0,   585,   577,   586,   587,
   578,     0,   119,     0,     0,     0,   121,   122,    13,   579,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,     0,    42,     0,
     0,     0,     0,     0,     0,     0,     0,   580,   581,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   125,    43,     0,   126,   127,     0,     0,     0,
     0,     0,     0,     0,     0,     3,     4,     5,     6,     7,
     8,  1198,     0,     9,     0,     0,     0,     0,     0,     0,
     0,  1199,    10,    11,    12,     0,     0,     0,     0,     0,
     0,     0,   582,     0,     0,     0,     0,   112,   583,   584,
   133,     0,     0,     0,   585,   577,   870,   871,   578,     0,
   119,     0,     0,     0,   121,   122,    13,   579,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,     0,    42,     0,     0,     0,
     0,     0,     0,     0,     0,   580,   581,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   125,    43,     0,   126,   127,     0,     0,     0,     0,     0,
     0,     0,     0,     3,     4,     5,     6,     7,     8,     0,
     0,     9,     0,     0,     0,     0,     0,     0,     0,   884,
    10,    11,    12,     0,     0,     0,     0,     0,     0,     0,
   582,     0,     0,     0,     0,   112,   583,   584,   133,     0,
     0,     0,   585,   577,   870,  1200,   578,     0,   119,     0,
     0,     0,   121,   122,    13,   579,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,     0,    42,     0,     0,     0,     0,     0,
     0,     0,     0,   580,   581,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   125,    43,
     0,   126,   127,     0,     0,     0,     0,     0,     0,     0,
     0,     3,     4,     5,     6,     7,     8,     0,     0,     9,
     0,     0,     0,     0,     0,     0,     0,  1329,    10,    11,
    12,     0,     0,     0,     0,     0,     0,     0,   582,     0,
     0,     0,     0,   112,   583,   584,   133,     0,     0,     0,
   585,   577,   870,   871,   578,     0,   119,     0,     0,     0,
   121,   122,    13,   579,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,     0,    42,     0,     0,     0,     0,     0,     0,     0,
     0,   580,   581,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   125,    43,     0,   126,
   127,     0,     0,     0,     0,     0,     0,     0,     0,     3,
     4,     5,     6,     7,     8,     0,     0,     9,     0,     0,
     0,     0,     0,     0,     0,     0,    10,    11,    12,     0,
     0,     0,     0,     0,     0,     0,   582,     0,     0,     0,
     0,   112,   583,   584,   133,     0,     0,     0,   585,   577,
   870,   871,   578,     0,   119,     0,     0,     0,   121,   122,
    13,   579,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,     0,
    42,     0,     0,     0,     0,     0,     0,     0,     0,   580,
   581,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   125,    43,     0,   126,   127,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     3,   106,     0,     6,   107,     8,     0,     0,
     0,     0,     0,     0,   582,     0,     0,     0,     0,   108,
   583,   584,   133,     0,     0,     0,   585,   109,   870,   871,
   110,     0,   111,     0,   112,     0,     0,     0,   113,   114,
   115,     0,   116,   117,     0,   118,     0,   119,     0,   120,
     0,   121,   122,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,     0,    42,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   125,    43,     0,
   126,   127,     3,   106,     0,     6,   107,     8,   199,   200,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   435,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   130,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   135,   136,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,     0,    42,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    43,     0,
     0,     0,     3,   106,     0,     6,   107,     8,   199,   200,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   435,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,  -410,     0,     0,  -410,     0,     0,
     0,     0,     0,     0,     0,   133,     0,     0,     0,   134,
     0,     0,   436,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,     0,    42,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    43,     0,
     0,     0,     3,   106,     0,     6,   107,     8,   199,   200,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   435,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   780,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   133,     0,     0,     0,   134,
     0,     0,   436,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,     0,    42,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    43,     0,
     0,     0,     3,   106,     0,     6,   107,     8,   199,   200,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   435,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   133,     0,     0,     0,   134,
     0,     0,   436,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,     0,    42,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    43,     0,
     0,     0,     3,   106,     0,     6,   107,     8,   199,   200,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   435,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   130,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   436,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,     0,    42,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    43,     0,
     0,     0,     3,   106,     0,     6,   107,     8,   199,   200,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   435,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  1291,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   436,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,     0,    42,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    43,     0,
     0,     0,     3,     4,     5,     6,     7,     8,     0,     0,
     9,     0,     0,     0,     0,     0,     0,     0,     0,    78,
    11,    12,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   436,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    43,     0,
     3,  1156,  1157,     6,   107,     8,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  1129,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   114,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    87,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
     0,    42,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    43,     0,     0,   127,
     3,  1156,  1157,     6,   107,     8,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  1129,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   114,     0,     0,
     0,     0,     0,     0,  1521,     0,     0,     0,     0,   515,
     0,     0,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
     0,    42,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    43,     0,     0,   127,
     3,     4,     5,     6,     7,     8,     0,     0,     9,     0,
     0,     0,     0,     0,     0,     0,     0,    10,    11,    12,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   515,
     0,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
     0,    42,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    43,     3,     4,     5,
     6,     7,     8,     0,     0,     9,     0,     0,     0,     0,
     0,     0,     0,     0,    10,    11,    12,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    44,     0,     0,     0,     0,    45,     0,     0,     0,     0,
     0,     0,     0,    46,     0,     0,     0,     0,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,     0,    42,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     3,   106,    43,     6,   107,     8,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   427,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   114,     0,
     0,     0,    45,     0,     0,     0,     0,     0,     0,     0,
    46,     0,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,   805,    42,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   114,     0,     0,     0,     0,     0,    43,     0,     0,
     0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,  1092,    42,   130,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   114,     0,     0,     0,     0,     0,
    43,     0,     0,     0,     0,     0,     0,     0,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,   514,    42,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   806,     0,     0,     0,   114,     0,     0,
     0,     0,     0,    43,     0,     0,     0,     0,     0,     0,
     0,     0,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
  1096,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  1093,     0,     0,     0,
   114,     0,     0,     0,     0,     0,    43,     0,     0,     0,
     0,     0,     0,     0,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,  1129,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   133,     0,     0,     0,     0,     0,   515,
     0,     0,     0,   114,     0,     0,     0,     0,     0,    43,
     0,     0,     0,     0,     0,     0,     0,     0,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,  1284,    42,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   806,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    43,     0,     0,     0,     0,     0,     0,     0,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,   514,
    42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   515,     0,     0,     0,   114,
     0,     0,     0,     0,     0,    43,     0,     0,     0,     0,
     0,     0,     0,     0,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,  1377,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  1093,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    43,     0,
     0,     0,     0,     0,     0,     0,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    10,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   515,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    43,     0,     0,     0,     0,     0,     0,     0,     0,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,     0,    42,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,  1093,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    43,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    10,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  -410,     0,     0,  -410,     0,     0,     0,     0,     0,     0,
     0,   133,     0,     0,     0,   134,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,     0,    42,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    43,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    10,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   780,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   133,     0,     0,
     0,   134,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    10,    42,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    43,     0,     0,     0,
     0,     0,     0,     0,     0,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,     0,    42,     0,     0,     0,     0,     0,
     0,     0,     0,   133,     0,     0,     0,   134,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   509,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   110,     0,     0,     0,
     0,     0,     0,   356,   113,   114,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   572,     0,     0,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    78,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    43,     0,     0,     0,     0,     0,
     0,     0,     0,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    10,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   133,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    43,     0,     0,
     0,     0,     0,     0,     0,     0,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,     0,    42,     0,     0,     0,     0,
     0,     0,     0,     0,   133,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    43,     0,     0,     0,     0,     0,     0,     0,    10,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   569,     0,     0,     0,     0,     0,
     0,     0,   570,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,     0,    42,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    43,    10,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   356,     0,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,     0,    42,     0,     0,     0,     0,     0,     0,     0,
     0,     3,     4,     5,     6,     7,     8,     0,     0,     9,
     0,     0,     0,     0,     0,     0,     0,    43,    78,    11,
    12,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  1563,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,     3,   106,     0,     6,   107,     8,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   427,     0,
     0,     0,     0,     0,     0,     0,     0,    43,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   114,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,     0,    42,     3,   106,     0,     6,   107,     8,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   553,     0,     0,     0,     0,     0,     0,    43,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   114,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,     0,   554,     3,   106,     0,     6,   107,
     8,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   553,     0,     0,     0,     0,     0,     0,    43,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   114,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,     0,   561,     3,   106,     0,
     6,   107,     8,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   553,     0,     0,     0,     0,     0,
     0,    43,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   114,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,     0,    42,     3,
   106,     0,     6,   107,     8,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   553,     0,     0,     0,
     0,     0,     0,    43,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   114,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,     0,
   842,     3,   106,     0,     6,   107,     8,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   435,     0,
     0,     0,     0,     0,     0,    43,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    10,    42,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    43,     0,     0,
     0,     0,     0,     0,     0,     0,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,   509,    42,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   114,     0,     0,     0,     0,     0,
    43,     0,     0,     0,     0,     0,     0,     0,     0,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    78,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    43,     0,     0,     0,     0,     0,     0,
     0,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    78,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    43,     0,     0,     0,
     0,     0,     0,     0,     0,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    43
};

static const short yycheck[] = {     1,
   201,     1,   324,   201,     1,   408,   712,   130,   351,   195,
    10,   295,   627,   688,   354,    83,    91,   137,   138,    84,
    84,   669,    91,   523,   397,   108,   368,   635,   621,   170,
   320,   635,   915,    84,   635,   915,    84,   778,   137,   138,
   201,   236,    44,   635,    44,    45,    46,    44,    45,    46,
    83,   808,   108,    50,   624,   582,   102,   103,   236,   170,
   290,   805,   624,    60,   750,   148,   990,    10,   354,   116,
    72,   116,   940,   201,     1,   138,    84,   166,    83,   168,
   201,   405,    82,   990,   635,    85,   858,  1357,   990,   990,
    87,   137,   138,     1,   637,    97,   639,   522,  1357,   524,
     1,   847,   645,    91,   500,    84,   106,   107,   108,   646,
   439,     1,   568,   113,   114,   922,    84,    44,    45,    46,
     1,   157,   113,    50,   528,   529,   530,   210,  1355,   120,
   360,  1439,     1,    60,    19,    78,    44,    45,    46,   103,
   104,    91,    50,   541,   106,   181,    91,   599,   113,   114,
   351,    70,    60,   351,   210,   522,   485,   524,    63,    92,
    87,   183,    23,    24,   350,   108,    99,   167,   695,  1032,
   170,   580,   581,    97,   583,   584,   585,   586,   587,    87,
   589,    63,     0,   216,   157,   232,   186,   232,   113,   114,
   351,    63,   165,   179,   194,   195,    91,   197,   848,   849,
    61,   201,    91,   157,   166,   855,    63,   126,    63,   106,
   210,   216,  1439,  1440,   179,   179,  1524,    92,   106,    63,
   290,   624,    63,   351,    99,   434,   157,   181,   228,   229,
   351,  1155,   575,   576,   267,    70,   632,   228,   738,    84,
   163,   126,   164,   313,   295,   320,   237,   295,  1155,   653,
   181,   320,   157,  1155,  1155,    68,   654,   181,   181,   181,
   165,    80,   718,   228,   229,   317,    98,   210,   158,   166,
  1540,   354,  1018,    50,   201,   157,   181,   158,   166,   488,
   181,  1540,   491,    60,     1,   157,   171,   295,   157,   613,
   360,   126,   158,   201,   636,   161,  1220,  1524,   354,   181,
   157,   163,   157,   228,   229,    68,   158,  1534,   165,   181,
   165,   381,   395,   157,  1182,   181,   157,   368,   158,   181,
   642,     1,  1190,   179,   653,   358,   181,   103,   104,   181,
   157,   383,   320,    99,   100,    98,   171,   181,   165,   395,
   181,   181,   950,   991,   109,   295,   348,   161,  1092,   919,
   350,   351,  1096,  1125,   354,  1041,   957,   919,   950,  1166,
   368,   103,   104,  1170,    44,    45,    46,   181,   895,   165,
   320,   427,     1,   163,   714,   320,   163,   575,   576,   164,
   161,   522,   755,   524,   757,   181,   759,   573,   586,  1252,
    74,   181,    76,    77,   159,   395,   181,   162,    82,   950,
   164,   157,   167,   179,   180,   163,   802,   158,   164,   354,
   161,   354,    96,   643,   575,   576,   557,   181,   368,  1343,
     1,   423,   178,   181,   351,   320,  1309,   427,   714,  1309,
   882,   320,   432,    98,   434,   435,  1343,   179,   180,   439,
    10,  1343,  1343,   351,   444,   675,   557,   575,   576,   157,
   295,   514,   395,   444,   179,   576,   555,   556,  1108,   996,
  1110,   870,   871,   171,   170,   171,   172,   432,   893,   434,
   559,   896,   667,  1214,   439,   408,   439,   179,   157,   444,
    30,   444,   179,    33,   427,   485,   165,    37,   488,   667,
   179,   491,   435,   556,  1037,   161,    91,  1040,   164,  1362,
  1363,  1364,   162,   107,   108,   109,   168,   169,    78,   555,
   556,    74,  1105,    76,   439,   173,   919,   582,   582,   444,
   485,   174,   522,   488,   524,    91,   491,   713,  1285,    84,
   577,   582,   577,   408,   582,   941,    91,   175,   108,   158,
  1284,   884,   161,   158,   596,   158,   161,   105,   161,   164,
   163,   164,    74,   553,    76,   159,   158,   557,   162,   161,
   485,   163,   164,   167,   773,   530,   509,   623,   181,   160,
   570,   514,  1187,   170,   582,   575,   576,   110,   111,   181,
   580,   581,   579,   583,   584,   585,   586,   587,   126,   589,
   204,   674,   171,  1120,  1195,   592,   593,  1205,   212,   564,
   171,  1205,   567,   582,  1205,   675,   158,  1177,    84,   161,
   553,   951,   164,  1205,   582,  1177,   161,   165,   674,   164,
   685,   685,   624,   623,   589,   157,   626,   159,   970,   158,
   695,   695,   161,  1377,   685,   164,   669,   685,   162,   929,
   210,   641,  1525,   161,   695,  1525,   164,   695,   575,   576,
   162,  1357,   579,   728,  1205,   162,   635,  1250,   714,   728,
   162,   781,   782,   731,   162,   592,   593,   575,   576,   168,
   169,   579,   580,   581,   674,   583,   584,   585,   586,   587,
   623,   589,  1545,  1298,   592,   593,   884,   695,   653,  1430,
   162,   624,   159,  1035,   165,   162,   635,  1345,   731,   158,
   158,   887,   161,   161,  1241,   164,   685,    41,   807,   808,
  1573,   101,   102,   713,   714,   712,   695,   685,   174,   158,
  1004,   654,   161,   884,   163,   320,   731,   695,   178,   159,
   161,   674,   162,   164,   178,   781,   782,   582,   165,    74,
   728,    76,   805,   165,  1034,   808,   107,   108,   109,   624,
   163,   157,   893,   159,   320,   896,   884,  1432,   181,   354,
   164,   807,   808,   884,   164,   320,    23,    24,   770,   714,
    25,   714,   164,   773,  1177,   170,   171,   172,   728,   920,
   921,   922,   181,   728,   354,   712,   786,   174,   354,   950,
   173,  1200,   792,   736,    44,    45,    46,   938,   159,   940,
   175,   162,   579,   105,   712,   805,   167,   807,   773,   178,
  1347,    93,    94,    95,    96,   592,   593,   750,   157,   295,
   168,   169,   950,   920,   162,   395,   769,   160,   761,   950,
   895,   895,  1332,   728,  1540,   887,   897,   898,   899,   728,
   685,   938,   163,   940,   895,   928,   160,   895,   848,   849,
   695,   181,   101,   102,   929,   855,   181,   427,   858,   170,
   929,   861,   805,  1203,   163,   435,   863,   170,   951,    72,
   870,   871,   928,   157,   719,   872,   751,   722,   174,   724,
   725,   173,  1204,   105,   884,   158,   761,   895,   161,  1262,
  1263,   164,   165,   893,  1103,   951,   896,   897,   898,   899,
   900,   901,   902,   903,   904,   905,   906,   907,   908,   909,
   910,   911,   912,   913,   914,   915,   895,   919,  1324,   952,
   920,   921,   922,     1,   175,   990,   990,   895,   928,  1115,
   904,   905,   906,   907,   899,  1005,   863,    86,   938,   509,
   940,   929,   990,    65,   514,   872,   165,   952,   157,   949,
   950,   951,   158,  1004,   165,   863,  1004,   884,   991,  1034,
  1080,  1081,   870,   871,   872,  1034,    44,    45,    46,  1178,
  1022,   950,    50,    51,   157,  1027,   884,  1100,   980,   929,
   157,   981,    60,   553,   929,   928,   919,  1070,  1488,   897,
   898,   899,   900,   901,   902,   903,   904,   905,   906,   907,
   908,   909,   910,   911,   912,   913,   914,   915,   951,    87,
  1078,   990,   920,   921,   922,   570,   630,  1158,     1,  1471,
   180,   181,   990,   950,     1,  1166,    19,   582,   633,  1170,
   938,   164,   940,  1096,   929,   113,   114,  1198,  1199,   164,
   929,  1182,   950,  1580,   919,  1078,  1034,   652,   165,  1190,
   895,   990,   162,   623,  1004,  1120,  1120,   180,   181,    91,
  1062,  1158,    23,    24,   162,  1117,  1129,  1067,   162,  1120,
  1198,  1199,  1120,  1078,  1017,   734,   162,     1,  1199,  1131,
   168,   169,   920,  1426,  1034,  1182,   863,  1539,   166,  1034,
  1155,  1155,  1092,  1190,  1094,   872,  1502,  1503,  1504,  1505,
   938,   174,   940,  1103,   674,     1,   582,  1155,  1108,   546,
  1110,   158,  1120,  1565,   161,   180,   163,   164,  1304,   714,
    44,    45,    46,   201,   180,  1125,    50,    99,   100,  1129,
   685,  1583,   159,   728,   181,   180,    60,   180,  1103,  1034,
   695,  1120,   101,   102,   714,  1034,   160,  1203,   714,  1092,
   228,   229,  1120,  1096,  1355,  1225,  1156,  1157,  1158,  1004,
   165,  1161,   728,    87,   170,  1288,  1166,   162,  1329,  1220,
  1170,   203,  1220,   728,  1383,  1177,  1155,   158,  1178,    37,
   719,   163,  1182,   722,    17,   724,  1129,  1155,   168,   169,
  1190,   180,   181,   168,   169,     1,  1264,   164,  1198,  1199,
  1200,  1329,   178,  1203,   164,   165,  1274,   178,  1329,   685,
   168,   169,  1220,  1178,   163,  1217,  1218,   168,   169,   695,
   168,   169,   163,   788,   789,  1426,  1205,   162,  1426,   533,
   534,  1264,  1175,   539,   540,   805,  1179,   748,   749,  1440,
   163,  1274,   181,   719,  1177,   859,   722,   181,   724,   725,
  1158,   900,   901,   908,   909,  1307,  1308,   916,  1166,  1264,
  1203,   163,  1170,   295,   162,  1426,  1205,   902,   903,  1274,
  1220,  1198,  1199,   351,  1182,  1120,   163,   201,  1343,  1343,
  1355,   161,  1190,   158,  1284,  1355,  1355,  1428,   320,   158,
  1198,  1199,  1200,   848,   849,  1343,   158,   165,  1426,  1238,
   855,   165,  1177,   858,    65,  1426,   920,   921,   922,  1309,
   164,   164,  1345,   165,   181,  1268,   181,   178,     1,   162,
  1158,   353,   162,   160,   938,   939,   940,   941,   163,  1329,
   181,  1428,   162,  1534,   929,   162,   368,   181,   176,   944,
   895,  1284,   164,   780,  1182,   160,  1348,   163,   165,   178,
  1352,   171,  1190,   171,   432,  1357,   434,   164,   928,   164,
  1357,   439,     1,   929,  1343,  1440,   444,  1355,   181,  1439,
  1440,  1440,   164,  1032,   929,  1343,    74,    75,    76,   165,
   161,   951,  1384,  1383,   161,  1338,  1339,   158,  1529,   162,
   107,   108,   109,   162,   999,    93,    94,    95,    96,   163,
   163,  1309,  1329,   163,  1343,   160,   160,   485,    92,   161,
   488,    48,   163,   491,  1357,    99,  1355,  1558,  1383,   895,
    36,  1329,  1424,   165,   163,   163,  1426,   351,  1428,     1,
  1357,   158,  1529,    36,  1377,   990,   161,   161,   164,  1034,
   181,   160,   159,   163,   522,   162,   524,    63,   163,  1357,
   167,   990,  1440,   163,  1524,   163,   178,   894,     1,  1534,
    63,  1558,   178,   164,  1534,  1534,   178,  1420,  1034,   178,
  1423,   163,    88,    89,    90,    91,    92,     1,   171,  1034,
   161,   559,  1421,   171,  1486,    88,    89,    90,    91,    92,
   162,   164,   570,     1,   163,    48,  1341,   575,   576,  1426,
     1,   579,   580,   581,     1,   583,   584,   585,   586,   587,
  1512,   589,     1,   164,   592,   593,   160,   159,  1426,   164,
  1428,     1,  1092,   163,   158,  1525,  1096,   163,  1004,  1529,
   160,  1531,   160,     0,   161,     0,  1214,   137,  1540,  1482,
   137,   786,   543,  1540,  1158,   544,  1534,   545,  1501,   165,
   752,  1205,  1166,  1108,   753,  1110,  1170,   754,  1558,  1129,
  1256,    91,   165,   728,  1517,  1120,   950,  1035,  1182,   393,
  1125,  1062,   168,   167,   167,   424,  1190,   168,   181,   770,
  1067,   665,   305,  1315,   616,  1347,  1588,   619,  1421,  1542,
  1428,   515,   485,  1252,  1177,  1534,   981,  1540,   761,    99,
  1155,  1554,  1039,   685,  1209,  1210,   158,  1343,   295,   161,
  1215,   163,   164,  1540,  1343,   295,  1155,  1525,  1155,  1155,
  1220,  1529,  1563,   920,   921,   922,   178,  1534,   180,   181,
  1440,  1580,  1540,  1203,   712,    87,   712,   351,   910,   913,
   911,   938,   912,   940,  1120,   914,  1540,   859,  1158,    97,
  1558,   575,   576,   356,    -1,   579,   580,   581,    -1,   583,
   584,   585,   586,   587,    -1,   589,    -1,    -1,   592,   593,
    -1,    -1,    -1,    -1,    17,    18,    19,    20,    21,    22,
    -1,  1220,  1119,    -1,   339,   340,    -1,   342,   343,   344,
    -1,  1529,    35,    36,    -1,   773,   728,    -1,    -1,    -1,
    -1,    -1,    -1,  1362,  1363,  1364,    -1,    -1,    -1,    -1,
  1324,    -1,    -1,   397,  1284,    -1,    -1,    -1,    -1,    -1,
  1558,    -1,    -1,    -1,   408,    68,    69,   805,   806,   807,
   808,   106,    -1,   388,    -1,   813,   391,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,    -1,    -1,    39,
    40,    -1,    -1,    43,    44,    -1,    46,    -1,    -1,  1196,
    50,    51,    52,    -1,   154,    -1,    56,    -1,    -1,    59,
   848,   849,    -1,    -1,   852,    65,    -1,   855,    -1,    -1,
   858,    -1,    -1,   173,    -1,   863,    -1,    -1,  1343,    -1,
   320,   166,   870,   871,   872,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  1407,   178,  1343,    -1,   884,  1377,    -1,   108,
    -1,   201,    -1,    -1,  1428,    -1,    -1,    -1,    -1,   897,
   898,   899,   900,   901,   902,   903,   904,   905,   906,   907,
   908,   909,   910,   911,   912,   913,   914,   915,   368,  1276,
  1277,    -1,    -1,    -1,    -1,  1282,  1283,    -1,    -1,    -1,
    -1,   535,   536,   537,   538,    -1,    -1,    -1,    -1,    -1,
    -1,  1158,   786,    -1,    -1,  1341,    -1,    -1,   792,  1166,
    -1,    -1,   950,  1170,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   806,    -1,    -1,  1182,  1545,    -1,  1502,  1503,
  1504,  1505,    -1,  1190,    -1,    82,   286,   929,    85,    -1,
    -1,    -1,    -1,    34,  1509,    -1,    -1,    -1,    -1,    -1,
    -1,   210,    -1,    -1,  1573,  1529,    -1,    -1,    -1,   106,
   107,    -1,    -1,  1360,    -1,    -1,   113,   114,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   863,
   624,    -1,    73,    74,  1558,    76,   870,   871,   872,    -1,
    81,    -1,    -1,    84,    85,    -1,    87,    -1,    -1,   614,
   884,   351,    93,    94,    95,    96,    -1,    -1,    -1,    -1,
    -1,    -1,  1004,   897,   898,   899,   900,   901,   902,   903,
   904,   905,   906,   907,   908,   909,   910,   911,   912,   913,
   914,   915,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,
    -1,    -1,  1034,    82,    -1,    -1,    85,   194,   195,    -1,
   197,    -1,    -1,  1091,  1092,  1093,  1094,    -1,  1096,    -1,
    -1,    -1,    -1,   102,   103,  1103,   950,   106,   107,    -1,
  1108,    -1,  1110,    -1,   113,   114,    -1,    -1,    -1,    -1,
    -1,   228,   229,    -1,    -1,    -1,    -1,  1125,    -1,    -1,
    -1,    -1,    -1,   708,    -1,   354,    -1,    -1,    -1,    -1,
    -1,   745,   746,   747,   748,   749,   750,   751,   752,   753,
   754,   755,   106,   757,    -1,   759,    -1,   761,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   167,    -1,
    -1,   170,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,
  1178,    -1,    -1,    -1,    -1,   635,   636,   186,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   194,   195,    -1,   197,    -1,
  1198,  1199,  1200,    -1,    -1,    -1,    -1,    -1,   427,    -1,
    -1,  1428,   166,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  1067,   178,    -1,    -1,    -1,    -1,   228,
   229,    -1,   110,    -1,    -1,   685,  1080,  1081,    -1,    -1,
    -1,    -1,    -1,   350,    -1,   123,   124,    -1,    -1,    -1,
  1094,    -1,    -1,   131,   132,    -1,    -1,   135,   136,    -1,
    -1,    -1,    -1,    -1,    -1,   575,   576,    -1,  1220,   147,
   580,   581,    -1,   583,   584,   585,   586,   587,   728,   589,
    -1,    -1,    -1,    -1,    -1,    -1,  1284,  1285,  1286,    -1,
   509,    -1,   108,    -1,   604,   514,    -1,   113,   114,    -1,
    -1,    -1,    -1,   181,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  1309,  1529,    -1,   889,   919,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   432,    -1,   434,    -1,    -1,
    -1,  1329,   439,    -1,   553,    -1,    -1,   444,    -1,    -1,
    -1,  1558,    -1,   221,    -1,    -1,    -1,    -1,   923,   924,
    -1,   350,    -1,    -1,  1198,  1199,  1200,    -1,    -1,  1357,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   249,   250,    -1,    -1,    -1,    -1,    -1,   485,  1377,
  1378,   488,    -1,    -1,   491,  1383,    -1,    -1,    -1,    -1,
    -1,    -1,   270,   271,   210,    -1,    -1,   275,   276,    -1,
    -1,    -1,    -1,    84,   623,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   228,   229,    -1,   522,    -1,   524,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   305,  1426,    -1,
    -1,    -1,    -1,   432,    -1,   434,    -1,  1041,    -1,    -1,
   439,  1285,    -1,    -1,    -1,   444,    -1,    -1,    -1,   130,
    -1,    -1,    -1,    -1,    -1,   674,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   570,    -1,  1309,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,   929,
    -1,   359,    -1,    -1,    -1,  1329,   485,    84,    -1,   488,
    -1,    -1,   491,    -1,    91,   714,    23,    24,    -1,    26,
    -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    -1,    -1,    -1,    -1,    -1,   826,   827,    -1,   626,
   970,    -1,    -1,   522,    -1,   524,    -1,  1525,    -1,    -1,
    -1,    -1,    -1,   130,   641,    -1,    -1,    -1,   354,    -1,
   990,    -1,  1540,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   201,    -1,  1127,    -1,  1004,    -1,   555,   556,   557,    -1,
   870,   871,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   570,    -1,  1177,   884,    -1,    -1,    -1,    -1,   395,
    -1,    -1,  1426,    -1,  1034,  1035,   805,   897,   898,   899,
   900,   901,   902,   903,   904,   905,   906,   907,   908,   909,
   910,   911,   912,   913,   914,   915,   713,    -1,    -1,    -1,
    -1,   427,    -1,    -1,   295,    -1,   432,    -1,   434,   435,
    -1,    -1,    -1,   439,    -1,    -1,    -1,   626,   444,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   235,    -1,
   950,    -1,   641,    -1,    -1,    -1,    -1,    -1,   526,   527,
   177,    -1,   179,    -1,    -1,    -1,    -1,    -1,  1262,  1263,
    -1,    -1,     3,     4,     5,    -1,   773,    -1,    -1,   485,
    -1,    -1,   488,    -1,    -1,   491,    -1,    -1,    -1,    -1,
    -1,  1525,    23,    24,    25,    26,   564,    28,    29,    30,
    31,    32,    33,    -1,    35,    36,    37,    -1,   295,    -1,
   351,    -1,    -1,    -1,    -1,  1155,    -1,    -1,    -1,   928,
    -1,    -1,    -1,    -1,   713,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   320,    -1,    -1,    -1,    68,    -1,    -1,
    -1,  1306,   951,    -1,    -1,    -1,    -1,   553,    -1,    -1,
    -1,   848,   849,    -1,    -1,    -1,    -1,    -1,   855,    -1,
   106,   858,    -1,    -1,   861,  1205,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
  1220,   368,    -1,    -1,   773,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   781,   782,    -1,    -1,   893,   786,    -1,   896,
    -1,    -1,    -1,   792,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   623,   807,   808,
   166,    -1,    -1,   920,   921,   922,    -1,    -1,    -1,   500,
    -1,    -1,   178,  1398,  1399,    -1,    -1,    -1,  1138,  1139,
    -1,   938,    -1,   940,    -1,    -1,   177,    -1,    -1,    -1,
    -1,    -1,   949,    -1,    -1,    -1,    -1,    -1,    -1,   848,
   849,    -1,    -1,    -1,    -1,    -1,   855,    -1,   674,   858,
    -1,   542,   861,    -1,    -1,    -1,    -1,    -1,    -1,  1444,
    -1,    -1,    -1,  1092,   981,    -1,    -1,  1096,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1198,  1199,
  1200,    -1,    -1,  1343,   893,    -1,    -1,   896,   714,    -1,
    -1,   582,    -1,   500,    -1,    -1,    -1,    -1,    -1,    -1,
  1129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   920,   921,   922,   575,   576,    -1,    -1,    -1,   580,
   581,    -1,   583,   584,   585,   586,   587,    -1,   589,   938,
    -1,   940,    -1,    -1,    -1,    -1,     3,     4,     5,    -1,
   949,   632,    -1,    -1,    -1,    -1,   637,   773,   639,    -1,
    -1,    -1,    -1,    -1,   645,    -1,    23,    24,  1543,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    -1,   981,    -1,  1203,   582,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1103,    -1,    -1,  1309,
    -1,  1108,    -1,  1110,   685,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   695,    -1,    -1,    -1,  1125,  1329,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   632,    -1,    -1,   635,   636,
   637,    -1,   639,    -1,    -1,    -1,    -1,    -1,   645,  1156,
  1157,  1158,    -1,    -1,  1161,    -1,    -1,    -1,    -1,  1166,
    -1,    -1,    -1,  1170,    -1,    -1,    -1,    -1,  1067,   666,
    84,  1178,    -1,    -1,    -1,  1182,    -1,    91,    92,    -1,
    -1,  1080,  1081,  1190,    -1,    99,    -1,   684,   685,    -1,
    -1,   688,    -1,    -1,    -1,  1094,    -1,    -1,   695,    -1,
    -1,    -1,    -1,    -1,  1103,    -1,    -1,    -1,    -1,  1108,
    -1,  1110,   928,    -1,   171,   993,  1426,    -1,    -1,    -1,
   177,   802,   719,    -1,    -1,   722,  1125,   724,   725,    -1,
    -1,   728,   522,    -1,   524,   951,    -1,    -1,    -1,    -1,
    84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,    -1,
    -1,    -1,    -1,    -1,    -1,    99,    -1,  1156,  1157,  1158,
    -1,    -1,  1161,    -1,    -1,    -1,    -1,  1166,    -1,    -1,
    -1,  1170,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1178,
   570,   778,    -1,  1182,    -1,    -1,   130,    -1,    -1,   203,
    -1,  1190,    -1,    -1,    -1,    -1,   210,    -1,    -1,    -1,
   797,    -1,    -1,    -1,    -1,   802,    -1,    -1,    -1,    -1,
    -1,     3,     4,     5,   895,  1525,    -1,    -1,    -1,   870,
   871,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    23,    24,   884,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,   897,   898,   899,   900,
   901,   902,   903,   904,   905,   906,   907,   908,   909,   910,
   911,   912,   913,   914,   915,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1383,    -1,    -1,    -1,
    -1,   295,    -1,    -1,    -1,    -1,  1285,  1103,    -1,    -1,
    -1,    -1,    -1,   974,    -1,    -1,    -1,    -1,   895,   950,
    -1,    -1,    -1,    -1,    -1,    -1,   320,    84,    -1,   990,
    -1,    -1,    -1,    -1,    -1,    92,    -1,    -1,    -1,    -1,
    -1,  1428,    99,  1004,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   929,    -1,    -1,    -1,    -1,    -1,    -1,   353,
   354,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   295,    -1,   130,   368,    -1,  1037,    -1,    -1,  1040,
    -1,   305,  1178,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   970,    -1,    -1,    -1,   974,    -1,    -1,
    -1,   395,    -1,    -1,  1383,   177,    -1,  1203,    -1,    -1,
    -1,    -1,    -1,   990,   408,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1004,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   805,   806,   807,   808,  1100,
    -1,    -1,  1529,    -1,  1531,    -1,    -1,    -1,    -1,  1428,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1034,  1035,  1120,
  1037,    -1,    -1,  1040,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  1558,     3,     4,     5,    -1,    -1,    -1,   848,   849,
    -1,    -1,    -1,    -1,   408,   855,    -1,    -1,   858,    -1,
    -1,    -1,    23,    24,  1155,    26,    -1,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    -1,    -1,    -1,
    -1,    19,    -1,    -1,    -1,   439,    -1,    25,    -1,    27,
    -1,    -1,    -1,  1100,    -1,  1102,    -1,    -1,    36,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   295,    -1,
    -1,    -1,    -1,  1120,    -1,    -1,    -1,    -1,    -1,    -1,
  1529,    -1,  1531,    -1,    -1,    63,    -1,    -1,    -1,  1220,
    -1,   485,    -1,    71,    -1,    -1,    -1,  1198,  1199,  1200,
    -1,    -1,    -1,    -1,    -1,    -1,   500,    -1,  1155,  1558,
    88,    89,    90,    91,    92,    -1,    -1,  1383,   582,    -1,
    -1,    -1,    -1,    -1,    -1,  1256,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   616,   617,    -1,   619,    -1,  1288,  1205,   623,
   624,    -1,    -1,    -1,    -1,    -1,    -1,  1214,    -1,    -1,
    -1,   635,   636,  1220,    -1,    -1,   177,    -1,    -1,   157,
    -1,   408,    -1,    -1,   162,    -1,   164,   165,   582,    -1,
    -1,  1238,    -1,    -1,    -1,    -1,  1243,    -1,    -1,    -1,
   178,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1309,  1256,
   674,    -1,  1343,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   685,    -1,    -1,    -1,    -1,    -1,    -1,  1329,    -1,
   624,   695,  1279,    -1,    -1,    -1,    -1,    -1,   632,    -1,
    -1,  1288,    -1,   637,    -1,   639,    -1,    -1,    -1,    -1,
   714,   645,  1092,  1093,  1094,    -1,  1096,    -1,    -1,   653,
   654,    -1,    -1,    -1,   728,    -1,    -1,    -1,  1108,    -1,
  1110,    -1,    -1,   500,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1125,    -1,    -1,    -1,    -1,
    -1,   685,    -1,    -1,  1341,    -1,  1343,   761,    -1,    -1,
    -1,   695,    -1,    -1,   531,   532,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1426,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     1,    -1,    -1,    -1,   582,   750,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   761,    -1,    19,
    -1,    -1,    -1,    -1,  1421,    25,    -1,    27,    -1,   773,
    -1,    -1,    -1,  1430,    -1,  1432,    36,    -1,    -1,    39,
    40,    -1,   786,    43,    44,    -1,    46,   624,   792,    -1,
    50,    51,    52,    -1,    -1,   632,    56,    -1,   802,    59,
   637,    -1,   639,    63,    -1,    65,    -1,    -1,   645,    -1,
    -1,    71,    -1,    -1,  1525,    -1,    -1,   654,    -1,    -1,
    -1,   895,    -1,    -1,    -1,    -1,    -1,    -1,    88,    89,
    90,    91,    92,    -1,  1284,  1285,  1286,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   918,   919,    -1,    -1,   685,    -1,
    -1,    -1,    -1,    -1,   928,   929,    -1,    -1,   695,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   951,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   895,    -1,    -1,    -1,    -1,   970,   157,    -1,    -1,
    -1,    -1,   162,    -1,   164,   165,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   750,    -1,   919,   990,    -1,   178,    -1,
    -1,    -1,    -1,    -1,   761,    -1,    -1,  1377,    -1,    -1,
  1004,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,
  1034,  1035,    -1,    -1,    -1,   802,    -1,    -1,    34,    -1,
   974,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   990,    -1,    -1,   993,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
  1004,    -1,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    -1,    98,  1037,    -1,    -1,  1040,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1120,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,   895,    -1,
    -1,    -1,    -1,  1067,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  1155,   919,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1100,    -1,    -1,    -1,
    -1,    -1,    -1,  1177,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   177,    -1,    -1,    -1,    -1,  1120,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1203,
    -1,  1205,    -1,    -1,    -1,    -1,    -1,   974,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1220,    -1,    -1,    -1,
    -1,  1155,    -1,   990,     3,     4,     5,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1004,    -1,    -1,
    -1,    -1,    -1,  1177,    -1,    -1,    25,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    37,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
  1037,    -1,    -1,  1040,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1220,    -1,    -1,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    -1,    98,
    -1,    -1,  1256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  1100,    -1,    -1,    -1,    -1,    -1,  1343,
    -1,    -1,    -1,    -1,   123,    -1,     3,     4,     5,    -1,
    -1,    -1,    -1,  1120,  1288,    -1,    -1,    -1,    -1,    -1,
    17,    18,    19,    20,    21,    22,    23,    24,    -1,    26,
    -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    -1,    -1,    -1,    -1,    -1,    -1,  1155,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,   177,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1343,
  1177,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  1220,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1256,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   162,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   177,  1288,   179,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     1,    -1,     3,     4,     5,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1343,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,    -1,   125,   126,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    -1,    -1,   157,    -1,   159,
   160,    -1,   162,    -1,   164,   165,   166,   167,   168,   169,
   170,    -1,   172,   173,   174,   175,   176,   177,   178,   179,
   180,   123,   182,   183,   184,   185,   186,     3,     4,     5,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,    -1,   125,
   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   157,    -1,   159,   160,    -1,   162,    -1,   164,   165,
   166,   167,   168,   169,   170,    -1,   172,   173,   174,   175,
   176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
   186,     3,     4,     5,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,    -1,   125,   126,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   157,    -1,   159,   160,    -1,
   162,    -1,    -1,   165,   166,   167,   168,   169,   170,    -1,
   172,   173,   174,   175,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,     3,     4,     5,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    17,
    18,    -1,    20,    21,    22,    23,    24,    -1,    26,    -1,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    -1,    -1,    -1,    -1,    42,    -1,    -1,    45,    -1,    47,
    -1,    49,    -1,    -1,    -1,    53,    54,    55,    -1,    57,
    58,    -1,    60,    61,    62,    -1,    64,    -1,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    -1,
    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   122,   123,    -1,   125,   126,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   159,    -1,    -1,   162,    -1,     3,     4,     5,    -1,
   168,   169,   170,    -1,    -1,    -1,   174,    -1,   176,   177,
    17,    18,   180,    20,    21,    22,    23,    24,    -1,    26,
    -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    -1,    -1,    -1,    -1,    42,    -1,    -1,    45,    -1,
    47,    -1,    49,    -1,    -1,    -1,    53,    54,    55,    -1,
    57,    58,    -1,    60,    61,    62,    -1,    64,    -1,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   107,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   122,   123,    -1,   125,   126,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   159,    -1,    -1,   162,    -1,    -1,    -1,    -1,
    -1,   168,   169,   170,    -1,    -1,    -1,   174,    -1,   176,
   177,    -1,     1,   180,     3,     4,     5,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    -1,    42,    43,    44,    45,    46,    47,    -1,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    -1,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    -1,    98,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   122,   123,    -1,   125,   126,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   157,    -1,
   159,    -1,    -1,   162,    -1,   164,   165,    -1,    -1,   168,
   169,   170,    -1,    -1,    -1,   174,    -1,   176,   177,     1,
    -1,     3,     4,     5,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    -1,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    -1,
    42,    43,    44,    45,    46,    47,    -1,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    -1,    98,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   122,   123,    -1,   125,   126,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   157,    -1,   159,    -1,    -1,
   162,    -1,   164,   165,    -1,    -1,   168,   169,   170,    -1,
    -1,    -1,   174,    -1,   176,   177,     1,    -1,     3,     4,
     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    17,    18,    -1,    20,    21,    22,    23,    24,
    -1,    26,    -1,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    -1,    -1,    -1,    -1,    42,    -1,    -1,
    45,    -1,    47,    -1,    49,    -1,    -1,    -1,    53,    54,
    55,    -1,    57,    58,    -1,    60,    61,    62,    -1,    64,
    -1,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,   123,    -1,
   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    17,    18,    -1,    20,    21,
    22,    -1,    -1,    -1,   159,    -1,    -1,   162,    -1,    -1,
    -1,    -1,    34,   168,   169,   170,    -1,    -1,    -1,   174,
    42,   176,   177,    45,    -1,    47,    -1,    49,    -1,    -1,
    -1,    53,    54,    55,    -1,    57,    58,    -1,    60,    61,
    62,    -1,    64,    -1,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    -1,    98,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,
    -1,     3,     4,     5,    -1,    -1,    -1,    -1,    -1,    -1,
   122,   123,    -1,   125,   126,    17,    18,    -1,    20,    21,
    22,    23,    24,    -1,    26,    -1,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   157,    -1,   159,    -1,    -1,
   162,    -1,    54,    -1,    -1,    -1,   168,   169,   170,    -1,
    -1,    -1,   174,    -1,   176,   177,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    -1,    98,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     3,     4,     5,    -1,    -1,    -1,    -1,
    -1,   123,    -1,    -1,    -1,    -1,    -1,    17,    18,    -1,
    20,    21,    22,    23,    24,    -1,    26,    -1,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   162,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   177,    -1,   179,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    -1,    98,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,
    -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
    -1,    47,   162,    49,    -1,    -1,    -1,    53,    54,    55,
    -1,    57,    58,    -1,    60,    61,    62,   177,    64,   179,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   107,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   122,   123,    -1,   125,
   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   157,    -1,   159,    -1,    -1,   162,    -1,   164,   165,
    -1,    -1,   168,   169,   170,     3,     4,     5,   174,    -1,
   176,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    17,
    18,    -1,    20,    21,    22,    23,    24,    -1,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    -1,    -1,    -1,    -1,    42,    -1,    -1,    45,    -1,    47,
    -1,    49,    -1,    -1,    -1,    53,    54,    55,    -1,    57,
    58,    -1,    60,    61,    62,    -1,    64,    -1,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   122,   123,    -1,   125,   126,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   159,    -1,    -1,   162,    -1,    -1,   165,    -1,    -1,
   168,   169,   170,     3,     4,     5,   174,    -1,   176,   177,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    17,    18,    -1,
    20,    21,    22,    23,    24,    -1,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    -1,    -1,
    -1,    -1,    42,    -1,    -1,    45,    -1,    47,    -1,    49,
    -1,    -1,    -1,    53,    54,    55,    -1,    57,    58,    -1,
    60,    61,    62,    -1,    64,    -1,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    -1,    98,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   122,   123,    -1,   125,   126,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   159,
    -1,    -1,   162,    -1,   164,   165,    -1,    -1,   168,   169,
   170,     3,     4,     5,   174,    -1,   176,   177,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    17,    18,    -1,    20,    21,
    22,    23,    24,    -1,    26,    -1,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    -1,    -1,    -1,    -1,
    42,    -1,    -1,    45,    -1,    47,    -1,    49,    -1,    -1,
    -1,    53,    54,    55,    -1,    57,    58,    -1,    60,    61,
    62,    -1,    64,    -1,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    -1,    98,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   122,   123,    -1,   125,   126,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   159,    -1,    -1,
   162,    -1,   164,   165,    -1,    -1,   168,   169,   170,     3,
     4,     5,   174,    -1,   176,   177,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    17,    18,    -1,    20,    21,    22,    23,
    24,    -1,    26,    -1,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    -1,    -1,    -1,    -1,    42,    -1,
    -1,    45,    -1,    47,    -1,    49,    -1,    -1,    -1,    53,
    54,    55,    -1,    57,    58,    -1,    60,    61,    62,    -1,
    64,    -1,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,   123,
    -1,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   159,    -1,    -1,   162,    -1,
     3,     4,     5,    -1,   168,   169,   170,    -1,    -1,    -1,
   174,    -1,   176,   177,    17,    18,    -1,    20,    21,    22,
    23,    24,    -1,    26,    -1,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    -1,    -1,    -1,    -1,    42,
    -1,    -1,    45,    -1,    47,    -1,    49,    -1,    -1,    -1,
    53,    54,    55,    -1,    57,    58,    -1,    60,    61,    62,
    -1,    64,    -1,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    -1,    98,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,
   123,    -1,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   159,    -1,    -1,   162,
    -1,     3,     4,     5,    -1,   168,   169,   170,    -1,    -1,
    -1,   174,    -1,   176,   177,    17,    18,    -1,    20,    21,
    22,    23,    24,    -1,    26,    -1,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    -1,    -1,    -1,    -1,
    42,    -1,    -1,    45,    -1,    47,    -1,    49,    -1,    -1,
    -1,    53,    54,    55,    -1,    57,    58,    -1,    60,    61,
    62,    -1,    64,    -1,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    -1,    98,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,
    -1,     3,     4,     5,    -1,    -1,    -1,    -1,    -1,    -1,
   122,   123,    -1,   125,   126,    17,    18,    19,    20,    21,
    22,    23,    24,    -1,    26,    -1,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   159,    -1,    -1,
   162,    -1,    54,    -1,    -1,    -1,   168,   169,   170,    -1,
    -1,    -1,   174,    -1,   176,   177,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    -1,    98,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,     4,     5,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   123,    -1,    -1,    -1,    17,    18,    19,    20,    21,
    22,    23,    24,    -1,    26,    -1,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   162,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   177,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    -1,    98,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,     4,     5,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   123,    -1,    -1,    -1,    17,    18,    19,    20,    21,
    22,    23,    24,    -1,    26,    -1,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   177,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    -1,    98,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,     4,     5,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   123,    -1,    -1,    -1,    17,    18,    -1,    20,    21,
    22,    23,    24,    -1,    26,    -1,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   177,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    -1,    98,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,     4,     5,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   123,    -1,    -1,    -1,    17,    18,    -1,    20,    21,
    22,    23,    24,    -1,    26,    -1,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   162,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   177,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    -1,    98,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,     4,     5,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    34,    -1,    -1,    37,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   177,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    -1,    98,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   123,    -1,    -1,    -1,    -1,    17,    18,    19,    20,
    21,    22,    -1,    -1,    -1,    -1,    27,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    35,    36,    -1,    38,    39,    40,
    -1,    42,    43,    44,    45,   157,    47,    48,    -1,    50,
    51,    52,    53,    -1,    55,    56,    57,    58,    59,    -1,
    -1,    -1,    63,    64,    65,   177,    -1,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    -1,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,
    -1,   162,   163,   164,   165,   166,   167,   168,   169,    -1,
    -1,   172,   173,    -1,   175,   176,   177,   178,   179,   180,
   181,   182,   183,   184,   185,   186,    17,    18,    19,    20,
    21,    22,    -1,    -1,    -1,    -1,    27,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    35,    36,    -1,    38,    39,    40,
    -1,    42,    43,    44,    45,    -1,    47,    48,    -1,    50,
    51,    52,    53,    -1,    55,    56,    57,    58,    59,    -1,
    -1,    -1,    63,    64,    65,    -1,    -1,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    -1,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,
    -1,   162,   163,   164,   165,   166,   167,   168,   169,    -1,
    -1,   172,   173,    -1,   175,   176,   177,   178,   179,   180,
   181,   182,   183,   184,   185,   186,    17,    18,    -1,    20,
    21,    22,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    -1,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
    -1,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   159,    -1,
    -1,   162,    -1,   164,    -1,    -1,    -1,   168,   169,   170,
   171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
   181,    17,    18,    -1,    20,    21,    22,    23,    24,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    -1,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,    -1,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,   123,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   159,    -1,    -1,   162,    -1,    -1,    -1,
    -1,    -1,   168,   169,   170,   171,   172,   173,   174,   175,
   176,   177,   178,   179,   180,   181,    17,    18,    19,    20,
    21,    22,    23,    -1,    25,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    33,    34,    35,    36,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    49,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    57,    -1,    -1,    60,
    -1,    62,    -1,    -1,    -1,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    -1,    98,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   122,   123,    -1,   125,   126,    -1,    -1,    -1,    17,
    18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   158,    -1,    -1,
   161,   162,   163,   164,    -1,    -1,    54,   168,   169,   170,
    -1,    -1,    -1,   174,    -1,   176,   177,    -1,    -1,    -1,
   181,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    -1,
    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,   126,    17,
    18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,
   178,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    -1,
    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,   126,    17,
    18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,
   178,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    -1,
    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,   126,    17,
    18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,
   178,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    -1,
    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,   126,    17,
    18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,
   178,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    -1,
    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    17,    18,    19,    20,    21,    22,
    23,    -1,    25,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    33,    34,    35,    36,    -1,    -1,    39,    40,    -1,    -1,
    43,    44,    -1,    46,    -1,    -1,    49,    50,    51,    52,
    -1,    -1,    -1,    56,    57,    -1,    59,    60,   176,    62,
   178,    -1,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    34,    98,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,
   123,    -1,   125,   126,    -1,    -1,    -1,    -1,    -1,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    -1,    98,   162,
    -1,    -1,    -1,    -1,    -1,   168,   169,   170,    -1,    -1,
    -1,   174,    -1,   176,   177,    17,    18,    -1,    20,    21,
    22,    -1,    -1,   123,    -1,    -1,    -1,    -1,    30,    -1,
    -1,    33,    34,    -1,    -1,    37,    -1,    -1,    -1,    -1,
    42,    -1,    -1,    45,    -1,    47,    -1,    49,    -1,    -1,
    -1,    53,    54,    55,    -1,    57,    58,   157,    60,    -1,
    62,    -1,    64,    -1,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    -1,    98,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   122,   123,    -1,   125,   126,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    17,    18,
    -1,    20,    21,    22,    -1,    -1,    -1,   159,    -1,    -1,
   162,    -1,    -1,    -1,    -1,    34,   168,   169,   170,    -1,
    -1,    -1,   174,    42,   176,   177,    45,    -1,    47,    -1,
    49,    -1,    -1,    -1,    53,    54,    55,    -1,    57,    58,
    -1,    60,    61,    62,    -1,    64,    -1,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    -1,    98,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   122,   123,    -1,   125,   126,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    17,    18,    -1,    20,    21,    22,    23,    24,    -1,
   159,   160,    -1,   162,    -1,    -1,    -1,    -1,    34,   168,
   169,   170,    -1,    -1,    -1,   174,    42,   176,   177,    45,
    -1,    47,    -1,    49,    -1,    -1,    -1,    53,    54,    55,
    -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,    -1,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   107,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   122,   123,    -1,   125,
   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    17,    18,    -1,    20,    21,    22,
    -1,    -1,    -1,   159,    -1,    -1,   162,    -1,    -1,    -1,
    -1,    34,   168,   169,   170,    -1,    -1,    -1,   174,    42,
   176,   177,    45,    -1,    47,    -1,    49,    -1,    -1,    -1,
    53,    54,    55,    -1,    57,    58,    -1,    60,    61,    62,
    -1,    64,    -1,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    -1,    98,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,
   123,    -1,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    17,    18,    -1,
    20,    21,    22,    -1,   157,    -1,   159,    -1,    -1,   162,
    -1,    -1,    -1,    -1,    34,   168,   169,   170,    -1,    -1,
    -1,   174,    42,   176,   177,    45,    -1,    47,    -1,    49,
    -1,    -1,    -1,    53,    54,    55,    -1,    57,    58,    -1,
    60,    61,    62,    -1,    64,    -1,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    -1,    98,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   122,   123,    -1,   125,   126,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    17,    18,    -1,    20,    21,    22,    -1,    -1,    -1,   159,
    -1,    -1,   162,    -1,    -1,   165,    -1,    34,   168,   169,
   170,    -1,    -1,    -1,   174,    42,   176,   177,    45,    -1,
    47,    -1,    49,    -1,    -1,    -1,    53,    54,    55,    -1,
    57,    58,    -1,    60,    61,    62,    -1,    64,    -1,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   107,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   122,   123,    -1,   125,   126,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    17,    18,    -1,    20,    21,    22,    -1,
    -1,    -1,   159,   160,    -1,   162,    -1,    -1,    -1,    -1,
    34,   168,   169,   170,    -1,    -1,    -1,   174,    42,   176,
   177,    45,    -1,    47,    -1,    49,    -1,    -1,    -1,    53,
    54,    55,    -1,    57,    58,    -1,    60,    61,    62,    -1,
    64,    -1,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    -1,    98,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,   123,
    -1,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    17,    18,    -1,    20,
    21,    22,    -1,    -1,    -1,   159,   160,    -1,   162,    -1,
    -1,    -1,    -1,    34,   168,   169,   170,    -1,    -1,    -1,
   174,    42,   176,   177,    45,    -1,    47,    -1,    49,    -1,
    -1,    -1,    53,    54,    55,    -1,    57,    58,    -1,    60,
    -1,    62,    -1,    64,    -1,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    -1,    98,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   122,   123,    -1,   125,   126,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    17,
    18,    -1,    20,    21,    22,    -1,    -1,    -1,   159,   160,
    -1,   162,    -1,    -1,    -1,    -1,    34,   168,   169,   170,
    -1,    -1,    -1,   174,    42,   176,   177,    45,    -1,    47,
    -1,    49,    -1,    -1,    -1,    53,    54,    55,    -1,    57,
    58,    -1,    60,    61,    62,    -1,    64,    -1,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    -1,
    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   122,   123,    -1,   125,   126,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    17,    18,    -1,    20,    21,    22,    -1,    -1,
    -1,   159,    -1,    -1,   162,    -1,    -1,    -1,    -1,    34,
   168,   169,   170,    -1,    -1,    -1,   174,    42,   176,   177,
    45,    -1,    47,    -1,    49,    -1,    -1,    -1,    53,    54,
    55,    -1,    57,    58,    -1,    60,    61,    62,    -1,    64,
    -1,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,   123,    -1,
   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    17,    18,    -1,    20,    21,
    22,    -1,    -1,    -1,   159,    -1,    -1,   162,    -1,    -1,
    -1,    -1,    34,   168,   169,   170,    -1,    -1,    -1,   174,
    42,   176,   177,    45,    -1,    47,    -1,    49,    -1,    -1,
    -1,    53,    54,    55,    -1,    57,    58,    -1,    60,    -1,
    62,    -1,    64,    -1,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    -1,    98,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   122,   123,    -1,   125,   126,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    17,    18,
    -1,    20,    21,    22,    -1,   157,    -1,   159,    -1,    -1,
   162,    -1,    -1,    -1,    -1,    34,   168,   169,   170,    -1,
    -1,    -1,   174,    42,   176,   177,    45,    -1,    47,    -1,
    49,    -1,    -1,    -1,    53,    54,    55,    -1,    57,    58,
    -1,    60,    -1,    62,    -1,    64,    -1,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    -1,    98,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   122,   123,    -1,   125,   126,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    17,    18,    -1,    20,    21,    22,    -1,    -1,    -1,
   159,   160,    -1,   162,    -1,    -1,    -1,    -1,    34,   168,
   169,   170,    -1,    -1,    -1,   174,    42,   176,   177,    45,
    -1,    47,    -1,    49,    -1,    -1,    -1,    53,    54,    55,
    -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,    -1,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   107,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   122,   123,    -1,   125,
   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    17,
    18,    19,    20,    21,    22,    23,    -1,    25,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    33,    34,    35,    36,    -1,
    -1,    -1,    -1,   159,    -1,    -1,   162,    -1,    -1,    -1,
    -1,    49,   168,   169,   170,    -1,    -1,    -1,   174,    57,
   176,   177,    60,    -1,    62,    -1,    -1,    -1,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    -1,
    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   122,   123,    -1,   125,   126,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    34,    35,    36,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   162,    -1,    -1,    -1,    -1,    49,
   168,   169,   170,    -1,    -1,    -1,   174,    57,   176,   177,
    60,    -1,    62,    -1,    -1,    -1,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    -1,    98,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   122,   123,    -1,   125,   126,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    17,    18,    19,    20,    21,
    22,    23,    -1,    25,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    33,    34,    35,    36,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   162,    -1,    -1,    -1,    -1,    49,   168,   169,
   170,    -1,    -1,    -1,   174,    57,   176,   177,    60,    -1,
    62,    -1,    -1,    -1,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    -1,    98,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   122,   123,    -1,   125,   126,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    17,    18,    19,    20,    21,    22,    -1,
    -1,    25,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,
    34,    35,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   162,    -1,    -1,    -1,    -1,    49,   168,   169,   170,    -1,
    -1,    -1,   174,    57,   176,   177,    60,    -1,    62,    -1,
    -1,    -1,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    -1,    98,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,   123,
    -1,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    17,    18,    19,    20,    21,    22,    -1,    -1,    25,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    34,    35,
    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,    -1,
    -1,    -1,    -1,    49,   168,   169,   170,    -1,    -1,    -1,
   174,    57,   176,   177,    60,    -1,    62,    -1,    -1,    -1,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   107,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   122,   123,    -1,   125,
   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    17,
    18,    19,    20,    21,    22,    -1,    -1,    25,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    34,    35,    36,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   162,    -1,    -1,    -1,
    -1,    49,   168,   169,   170,    -1,    -1,    -1,   174,    57,
   176,   177,    60,    -1,    62,    -1,    -1,    -1,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    -1,
    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   122,   123,    -1,   125,   126,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    17,    18,    -1,    20,    21,    22,    -1,    -1,
    -1,    -1,    -1,    -1,   162,    -1,    -1,    -1,    -1,    34,
   168,   169,   170,    -1,    -1,    -1,   174,    42,   176,   177,
    45,    -1,    47,    -1,    49,    -1,    -1,    -1,    53,    54,
    55,    -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,
    -1,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,   123,    -1,
   125,   126,    17,    18,    -1,    20,    21,    22,    23,    24,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   176,   177,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,
    -1,    -1,    17,    18,    -1,    20,    21,    22,    23,    24,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   159,    -1,    -1,   162,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,
    -1,    -1,   177,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,
    -1,    -1,    17,    18,    -1,    20,    21,    22,    23,    24,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   159,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,
    -1,    -1,   177,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,
    -1,    -1,    17,    18,    -1,    20,    21,    22,    23,    24,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,
    -1,    -1,   177,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,
    -1,    -1,    17,    18,    -1,    20,    21,    22,    23,    24,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   177,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,
    -1,    -1,    17,    18,    -1,    20,    21,    22,    23,    24,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   163,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   177,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,
    -1,    -1,    17,    18,    19,    20,    21,    22,    -1,    -1,
    25,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,
    35,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   177,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,
    17,    18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   176,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,   126,
    17,    18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,
    -1,    -1,    -1,    -1,   171,    -1,    -1,    -1,    -1,   176,
    -1,    -1,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,   126,
    17,    18,    19,    20,    21,    22,    -1,    -1,    25,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    35,    36,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   176,
    -1,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   123,    17,    18,    19,
    20,    21,    22,    -1,    -1,    25,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    34,    35,    36,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   157,    -1,    -1,    -1,    -1,   162,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    -1,    98,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    17,    18,   123,    20,    21,    22,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,
    -1,    -1,   162,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   170,    -1,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    34,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    54,    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    34,    98,   162,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,
   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    34,    98,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   176,    -1,    -1,    -1,    54,    -1,    -1,
    -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,
    54,    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    34,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,    -1,   176,
    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,   123,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    34,    98,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    34,
    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,    54,
    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    -1,    98,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   159,    -1,    -1,   162,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   170,    -1,    -1,    -1,   174,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    -1,    98,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   159,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   170,    -1,    -1,
    -1,   174,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    34,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    -1,    98,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,
    -1,    -1,    -1,   157,    53,    54,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   171,    -1,    -1,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    34,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   170,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    -1,    98,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   157,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   165,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    34,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   157,    -1,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    17,    18,    19,    20,    21,    22,    -1,    -1,    25,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    34,    35,
    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   157,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    17,    18,    -1,    20,    21,    22,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    -1,    98,    17,    18,    -1,    20,    21,    22,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    34,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    -1,    98,    17,    18,    -1,    20,    21,
    22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,   123,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    -1,    98,    17,    18,    -1,
    20,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,
    -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    -1,    98,    17,
    18,    -1,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,
    -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    -1,
    98,    17,    18,    -1,    20,    21,    22,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,
    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    34,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    34,    98,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,
   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    34,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123
};
 /* fattrs + tables */

/* parser code folow  */


/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: dollar marks section change
   the next  is replaced by the list of actions, each action
   as one case of the switch.  */ 

#if YY_FogParser_USE_GOTO != 0
/* 
 SUPRESSION OF GOTO : on some C++ compiler (sun c++)
  the goto is strictly forbidden if any constructor/destructor
  is used in the whole function (very stupid isn't it ?)
 so goto are to be replaced with a 'while/switch/case construct'
 here are the macro to keep some apparent compatibility
*/
#define YYGOTO(lb) {yy_gotostate=lb;continue;}
#define YYBEGINGOTO  enum yy_labels yy_gotostate=yygotostart; \
                     for(;;) switch(yy_gotostate) { case yygotostart: {
#define YYLABEL(lb) } case lb: {
#define YYENDGOTO } } 
#define YYBEGINDECLARELABEL enum yy_labels {yygotostart
#define YYDECLARELABEL(lb) ,lb
#define YYENDDECLARELABEL  };
#else
/* macro to keep goto */
#define YYGOTO(lb) goto lb
#define YYBEGINGOTO 
#define YYLABEL(lb) lb:
#define YYENDGOTO
#define YYBEGINDECLARELABEL 
#define YYDECLARELABEL(lb)
#define YYENDDECLARELABEL 
#endif
/* LABEL DECLARATION */
YYBEGINDECLARELABEL
  YYDECLARELABEL(yynewstate)
  YYDECLARELABEL(yybackup)
/* YYDECLARELABEL(yyresume) */
  YYDECLARELABEL(yydefault)
  YYDECLARELABEL(yyreduce)
  YYDECLARELABEL(yyerrlab)   /* here on detecting error */
  YYDECLARELABEL(yyerrlab1)   /* here on error raised explicitly by an action */
  YYDECLARELABEL(yyerrdefault)  /* current state does not do anything special for the error token. */
  YYDECLARELABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */
  YYDECLARELABEL(yyerrhandle)  
YYENDDECLARELABEL
/* ALLOCA SIMULATION */
/* __HAVE_NO_ALLOCA */
#ifdef __HAVE_NO_ALLOCA
int __alloca_free_ptr(char *ptr,char *ref)
{if(ptr!=ref) free(ptr);
 return 0;}

#define __ALLOCA_alloca(size) malloc(size)
#define __ALLOCA_free(ptr,ref) __alloca_free_ptr((char *)ptr,(char *)ref)

#ifdef YY_FogParser_LSP_NEEDED
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		    __ALLOCA_free(yyls,yylsa)+\
		   (num)); } while(0)
#else
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		   (num)); } while(0)
#endif
#else
#define __ALLOCA_return(num) do { return(num); } while(0)
#define __ALLOCA_alloca(size) alloca(size)
#define __ALLOCA_free(ptr,ref) 
#endif

/* ENDALLOCA SIMULATION */

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (YY_FogParser_CHAR = YYEMPTY)
#define YYEMPTY         -2
#define YYEOF           0
#define YYACCEPT        __ALLOCA_return(0)
#define YYABORT         __ALLOCA_return(1)
#define YYERROR         YYGOTO(yyerrlab1)
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL          YYGOTO(yyerrlab)
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do                                                              \
  if (YY_FogParser_CHAR == YYEMPTY && yylen == 1)                               \
    { YY_FogParser_CHAR = (token), YY_FogParser_LVAL = (value);                 \
      yychar1 = YYTRANSLATE (YY_FogParser_CHAR);                                \
      YYPOPSTACK;                                               \
      YYGOTO(yybackup);                                            \
    }                                                           \
  else                                                          \
    { YY_FogParser_ERROR ("syntax error: cannot back up"); YYERROR; }   \
while (0)

#define YYTERROR        1
#define YYERRCODE       256

#ifndef YY_FogParser_PURE
/* UNPURE */
#define YYLEX           YY_FogParser_LEX()
#ifndef YY_USE_CLASS
/* If nonreentrant, and not class , generate the variables here */
int     YY_FogParser_CHAR;                      /*  the lookahead symbol        */
YY_FogParser_STYPE      YY_FogParser_LVAL;              /*  the semantic value of the */
				/*  lookahead symbol    */
int YY_FogParser_NERRS;                 /*  number of parse errors so far */
#ifdef YY_FogParser_LSP_NEEDED
YY_FogParser_LTYPE YY_FogParser_LLOC;   /*  location data for the lookahead     */
			/*  symbol                              */
#endif
#endif


#else
/* PURE */
#ifdef YY_FogParser_LSP_NEEDED
#define YYLEX           YY_FogParser_LEX(&YY_FogParser_LVAL, &YY_FogParser_LLOC)
#else
#define YYLEX           YY_FogParser_LEX(&YY_FogParser_LVAL)
#endif
#endif
#ifndef YY_USE_CLASS
#if YY_FogParser_DEBUG != 0
int YY_FogParser_DEBUG_FLAG;                    /*  nonzero means print parse trace     */
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif
#endif



/*  YYINITDEPTH indicates the initial size of the parser's stacks       */

#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif


#if __GNUC__ > 1                /* GNU C and GNU C++ define this.  */
#define __yy_bcopy(FROM,TO,COUNT)       __builtin_memcpy(TO,FROM,COUNT)
#else                           /* not GNU C or C++ */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */

#ifdef __cplusplus
static void __yy_bcopy (char *from, char *to, int count)
#else
#ifdef __STDC__
static void __yy_bcopy (char *from, char *to, int count)
#else
static void __yy_bcopy (from, to, count)
     char *from;
     char *to;
     int count;
#endif
#endif
{
  char *f = from;
  char *t = to;
  int i = count;

  while (i-- > 0)
    *t++ = *f++;
}
#endif


int
#ifdef YY_USE_CLASS
 YY_FogParser_CLASS::
#endif
     YY_FogParser_PARSE(YY_FogParser_PARSE_PARAM)
#ifndef __STDC__
#ifndef __cplusplus
#ifndef YY_USE_CLASS
/* parameter definition without protypes */
YY_FogParser_PARSE_PARAM_DEF
#endif
#endif
#endif
{
  int yystate;
  int yyn;
  short *yyssp;
  YY_FogParser_STYPE *yyvsp;
  int yyerrstatus;      /*  number of tokens to shift before error messages enabled */
  int yychar1=0;          /*  lookahead token as an internal (translated) token number */

  short yyssa[YYINITDEPTH];     /*  the state stack                     */
  YY_FogParser_STYPE yyvsa[YYINITDEPTH];        /*  the semantic value stack            */

  short *yyss = yyssa;          /*  refer to the stacks thru separate pointers */
  YY_FogParser_STYPE *yyvs = yyvsa;     /*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YY_FogParser_LSP_NEEDED
  YY_FogParser_LTYPE yylsa[YYINITDEPTH];        /*  the location stack                  */
  YY_FogParser_LTYPE *yyls = yylsa;
  YY_FogParser_LTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YY_FogParser_PURE
  int YY_FogParser_CHAR;
  YY_FogParser_STYPE YY_FogParser_LVAL;
  int YY_FogParser_NERRS;
#ifdef YY_FogParser_LSP_NEEDED
  YY_FogParser_LTYPE YY_FogParser_LLOC;
#endif
#endif

  YY_FogParser_STYPE yyval;             /*  the variable used to return         */
				/*  semantic values from the action     */
				/*  routines                            */

  int yylen;
/* start loop, in which YYGOTO may be used. */
YYBEGINGOTO

#if YY_FogParser_DEBUG != 0
  if (YY_FogParser_DEBUG_FLAG)
    fprintf(stderr, "Starting parse\n");
#endif
  yystate = 0;
  yyerrstatus = 0;
  YY_FogParser_NERRS = 0;
  YY_FogParser_CHAR = YYEMPTY;          /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YY_FogParser_LSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
YYLABEL(yynewstate)

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YY_FogParser_STYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YY_FogParser_LSP_NEEDED
      YY_FogParser_LTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YY_FogParser_LSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YY_FogParser_LSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  YY_FogParser_ERROR("parser stack overflow");
	  __ALLOCA_return(2);
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) __ALLOCA_alloca (yystacksize * sizeof (*yyssp));
      __yy_bcopy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      __ALLOCA_free(yyss1,yyssa);
      yyvs = (YY_FogParser_STYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yyvsp));
      __yy_bcopy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
      __ALLOCA_free(yyvs1,yyvsa);
#ifdef YY_FogParser_LSP_NEEDED
      yyls = (YY_FogParser_LTYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yylsp));
      __yy_bcopy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
      __ALLOCA_free(yyls1,yylsa);
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YY_FogParser_LSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YY_FogParser_DEBUG != 0
      if (YY_FogParser_DEBUG_FLAG)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YY_FogParser_DEBUG != 0
  if (YY_FogParser_DEBUG_FLAG)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  YYGOTO(yybackup);
YYLABEL(yybackup)

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* YYLABEL(yyresume) */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yydefault);

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (YY_FogParser_CHAR == YYEMPTY)
    {
#if YY_FogParser_DEBUG != 0
      if (YY_FogParser_DEBUG_FLAG)
	fprintf(stderr, "Reading a token: ");
#endif
      YY_FogParser_CHAR = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (YY_FogParser_CHAR <= 0)           /* This means end of input. */
    {
      yychar1 = 0;
      YY_FogParser_CHAR = YYEOF;                /* Don't call YYLEX any more */

#if YY_FogParser_DEBUG != 0
      if (YY_FogParser_DEBUG_FLAG)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(YY_FogParser_CHAR);

#if YY_FogParser_DEBUG != 0
      if (YY_FogParser_DEBUG_FLAG)
	{
	  fprintf (stderr, "Next token is %d (%s", YY_FogParser_CHAR, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, YY_FogParser_CHAR, YY_FogParser_LVAL);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    YYGOTO(yydefault);

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrlab);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrlab);

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YY_FogParser_DEBUG != 0
  if (YY_FogParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting token %d (%s), ", YY_FogParser_CHAR, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (YY_FogParser_CHAR != YYEOF)
    YY_FogParser_CHAR = YYEMPTY;

  *++yyvsp = YY_FogParser_LVAL;
#ifdef YY_FogParser_LSP_NEEDED
  *++yylsp = YY_FogParser_LLOC;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  YYGOTO(yynewstate);

/* Do the default action for the current state.  */
YYLABEL(yydefault)

  yyn = yydefact[yystate];
  if (yyn == 0)
    YYGOTO(yyerrlab);

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
YYLABEL(yyreduce)
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YY_FogParser_DEBUG != 0
  if (YY_FogParser_DEBUG_FLAG)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
{ yyval.name = yyvsp[0].identifier; ;
    break;}
case 2:
{ yyval.name = yyvsp[0].meta_type; ;
    break;}
case 20:
{ yyval.name = yyvsp[0].segment; ;
    break;}
case 21:
{ yyval.name = yyvsp[0].utility; ;
    break;}
case 23:
{ yyval.name = YACC_TREE_ID(yyvsp[0].name); ;
    break;}
case 24:
{ yyval.name = YACC_NAME(yyvsp[0].name); ;
    break;}
case 25:
{ yyval.name = YACC_TEMPLATE_NAME(yyvsp[-4].name, yyvsp[-1].template_arguments); ;
    break;}
case 26:
{ yyval.name = yyvsp[-3].name; ERRMSG("Empty template-argument-list"); ;
    break;}
case 27:
{ yyval.name = YACC_NAME(yyvsp[-2].name); ;
    break;}
case 29:
{ template_test(); ;
    break;}
case 30:
{ yyval.is_template = IS_DEFAULT; ;
    break;}
case 31:
{ yyval.is_template = IS_TEMPLATE; ;
    break;}
case 32:
{ yyval.name = YACC_NESTED_SCOPE(yyvsp[-1].name); ;
    break;}
case 34:
{ yyval.name = YACC_NESTED_ID(yyvsp[-1].name, yyvsp[0].name); ;
    break;}
case 36:
{ yyval.name = YACC_GLOBAL_ID(yyvsp[-1].is_template, yyvsp[0].name); ;
    break;}
case 37:
{ yyval.name = YACC_DESTRUCTOR_ID(yyvsp[0].name); ;
    break;}
case 38:
{ yyval.name = YACC_SET_TEMPLATE_ID(yyvsp[0].name); ;
    break;}
case 41:
{ yyval.name = YACC_SET_TEMPLATE_ID(yyvsp[0].name); ;
    break;}
case 43:
{ yyval.name = YACC_NESTED_ID(yyvsp[-1].name, yyvsp[0].name); ;
    break;}
case 44:
{ yyval.name = YACC_NESTED_ID(yyvsp[-1].name, yyvsp[0].name); ;
    break;}
case 46:
{ yyval.name = YACC_GLOBAL_ID(yyvsp[-1].is_template, yyvsp[0].name); ;
    break;}
case 51:
{ yyval.built_in_id = YACC_BUILT_IN_IDS(yyvsp[-1].built_in_id, yyvsp[0].built_in_id); ;
    break;}
case 52:
{ yyval.name = YACC_PSEUDO_DESTRUCTOR_ID(yyvsp[-3].built_in_id, yyvsp[0].built_in_id); ;
    break;}
case 53:
{ yyval.name = YACC_PSEUDO_DESTRUCTOR_ID(0, yyvsp[0].built_in_id); ;
    break;}
case 54:
{ yyval.name = YACC_SET_TEMPLATE_ID(yyvsp[0].name); ;
    break;}
case 56:
{ yyval.name = YACC_NESTED_ID(yyvsp[-1].name, yyvsp[0].name); ;
    break;}
case 58:
{ yyval.name = YACC_GLOBAL_ID(yyvsp[-1].is_template, yyvsp[0].name); ;
    break;}
case 59:
{ yyval.strings = yyvsp[0].string_literal; ;
    break;}
case 60:
{ yyval.expression = YACC_INTEGER_LITERAL_EXPRESSION(yyvsp[0].integer_literal); ;
    break;}
case 61:
{ yyval.expression = YACC_CHARACTER_LITERAL_EXPRESSION(yyvsp[0].character_literal); ;
    break;}
case 62:
{ yyval.expression = YACC_FLOATING_LITERAL_EXPRESSION(yyvsp[0].floating_literal); ;
    break;}
case 63:
{ yyval.expression = YACC_STRING_LITERAL_EXPRESSION(yyvsp[0].strings); ;
    break;}
case 65:
{ yyval.expression = YACC_NUMBER_LITERAL_EXPRESSION(yyvsp[0].number_literal); ;
    break;}
case 66:
{ yyval.expression = yyvsp[0].strings; ;
    break;}
case 67:
{ yyval.expression = yyvsp[0].name; ;
    break;}
case 68:
{ yyval.expression = YACC_FALSE_EXPRESSION(); ;
    break;}
case 69:
{ yyval.expression = YACC_TRUE_EXPRESSION(); ;
    break;}
case 70:
{ YACC_RESULT(yyvsp[0].declarations); ;
    break;}
case 71:
{ YACC_RESULT(yyvsp[-6].declarations); YACC_UNBANG(yyvsp[-2].bang, "Bad declaration."); ;
    break;}
case 72:
{ YACC_RESULT(yyvsp[0].expression); YYACCEPT; ;
    break;}
case 73:
{ YACC_RESULT(yyvsp[-1].expression); YYACCEPT; ;
    break;}
case 74:
{ YACC_UNBANG(yyvsp[-1].bang, "Bad tree-expression."); YYABORT; ;
    break;}
case 75:
{ YACC_UNBANG(yyvsp[-2].bang, "Bad ${tree-expression}."); YYABORT; ;
    break;}
case 77:
{ yyval.expression = YACC_THIS_EXPRESSION(); ;
    break;}
case 78:
{ yyval.expression = yyvsp[0].name; ;
    break;}
case 80:
{ yyval.expression = YACC_ABSTRACT_FUNCTION_EXPRESSION(yyvsp[0].parenthesised); ;
    break;}
case 81:
{ yyval.expression = YACC_ABSTRACT_ARRAY_EXPRESSION(yyvsp[-1].expression); ;
    break;}
case 82:
{ yyval.expression = YACC_SET_TEMPLATE_EXPRESSION(YACC_ABSTRACT_FUNCTION_EXPRESSION(yyvsp[0].parenthesised)); ;
    break;}
case 83:
{ yyval.type1_parameters = YACC_TYPE1_PARAMETERS(0, yyvsp[-1].parameters); ;
    break;}
case 84:
{ yyval.type1_parameters = YACC_TYPE1_PARAMETERS(yyvsp[-2].type1_parameters, yyvsp[-1].parameters); ;
    break;}
case 85:
{ yyval.mark = mark_type1(); ;
    break;}
case 87:
{ yyval.expression = YACC_CALL_EXPRESSION(yyvsp[-3].expression, yyvsp[-2].parenthesised); ;
    break;}
case 88:
{ yyerrok; remark_type1(yyvsp[-2].mark); unmark(); unmark(yyvsp[-3].type1_parameters); yyval.expression = YACC_TYPE1_EXPRESSION(yyvsp[-7].expression, yyvsp[-6].parenthesised, yyvsp[-3].type1_parameters); ;
    break;}
case 89:
{ yyerrok; remark_type1(yyvsp[-4].mark); unmark(); unmark(); yyval.expression = YACC_CALL_EXPRESSION(yyvsp[-6].expression, yyvsp[-5].parenthesised); ;
    break;}
case 90:
{ yyerrok; remark_type1(yyvsp[-2].mark); unmark(); yyval.expression = YACC_CALL_EXPRESSION(yyvsp[-4].expression, yyvsp[-3].parenthesised); ;
    break;}
case 91:
{ yyval.expression = YACC_ARRAY_EXPRESSION(yyvsp[-3].expression, yyvsp[-1].expression); ;
    break;}
case 92:
{ yyval.expression = YACC_DOT_EXPRESSION(yyvsp[-2].expression, yyvsp[0].name); ;
    break;}
case 93:
{ yyval.expression = YACC_DOT_EXPRESSION(yyvsp[-2].expression, yyvsp[0].name); ;
    break;}
case 94:
{ yyval.expression = YACC_ARROW_EXPRESSION(yyvsp[-2].expression, yyvsp[0].name); ;
    break;}
case 95:
{ yyval.expression = YACC_ARROW_EXPRESSION(yyvsp[-2].expression, yyvsp[0].name); ;
    break;}
case 96:
{ yyval.expression = YACC_POST_INCREMENT_EXPRESSION(yyvsp[-1].expression); ;
    break;}
case 97:
{ yyval.expression = YACC_POST_DECREMENT_EXPRESSION(yyvsp[-1].expression); ;
    break;}
case 98:
{ yyval.expression = YACC_DYNAMIC_CAST_EXPRESSION(yyvsp[-4].expression, yyvsp[-1].expression); ;
    break;}
case 99:
{ yyval.expression = YACC_STATIC_CAST_EXPRESSION(yyvsp[-4].expression, yyvsp[-1].expression); ;
    break;}
case 100:
{ yyval.expression = YACC_REINTERPRET_CAST_EXPRESSION(yyvsp[-4].expression, yyvsp[-1].expression); ;
    break;}
case 101:
{ yyval.expression = YACC_CONST_CAST_EXPRESSION(yyvsp[-4].expression, yyvsp[-1].expression); ;
    break;}
case 102:
{ yyval.expression = YACC_TYPEID_EXPRESSION(yyvsp[0].parameters); ;
    break;}
case 103:
{ yyval.expressions = YACC_EXPRESSIONS(0, 0); ;
    break;}
case 105:
{ yyval.expressions = YACC_EXPRESSIONS(0, yyvsp[0].expression); ;
    break;}
case 106:
{ yyval.expressions = YACC_EXPRESSIONS(yyvsp[-2].expressions, yyvsp[0].expression); ;
    break;}
case 108:
{ yyval.expression = YACC_PRE_INCREMENT_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 109:
{ yyval.expression = YACC_PRE_DECREMENT_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 110:
{ yyval.expression = YACC_POINTER_EXPRESSION(yyvsp[-1].declarator, yyvsp[0].expression); ;
    break;}
case 111:
{ yyval.expression = YACC_SCOPED_POINTER_EXPRESSION(yyvsp[-2].name, yyvsp[-1].pointer_declarator, yyvsp[0].expression); ;
    break;}
case 112:
{ yyval.expression = YACC_PLUS_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 113:
{ yyval.expression = YACC_MINUS_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 114:
{ yyval.expression = YACC_NOT_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 115:
{ yyval.expression = YACC_COMPLEMENT_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 116:
{ yyval.expression = YACC_SIZEOF_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 117:
{ yyval.expression = yyvsp[0].new_expression; ;
    break;}
case 118:
{ yyval.expression = YACC_GLOBAL_EXPRESSION(yyvsp[-1].is_template, yyvsp[0].new_expression); ;
    break;}
case 119:
{ yyval.expression = yyvsp[0].delete_expression; ;
    break;}
case 120:
{ yyval.expression = YACC_GLOBAL_EXPRESSION(yyvsp[-1].is_template, yyvsp[0].delete_expression); ;
    break;}
case 121:
{ yyval.delete_expression = YACC_DELETE_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 122:
{ yyval.new_expression = YACC_NEW_TYPE_ID_EXPRESSION(0, yyvsp[-1].expression, yyvsp[0].expressions); ;
    break;}
case 123:
{ yyval.new_expression = YACC_NEW_TYPE_ID_EXPRESSION(yyvsp[-2].parameters, yyvsp[-1].expression, yyvsp[0].expressions); ;
    break;}
case 124:
{ yyval.new_expression = YACC_NEW_EXPRESSION(yyvsp[0].parameters, 0, 0); ;
    break;}
case 125:
{ yyval.new_expression = YACC_NEW_EXPRESSION(yyvsp[-2].parameters, yyvsp[-1].parameters, yyvsp[0].expressions); ;
    break;}
case 126:
{ yyval.expression = YACC_TYPED_EXPRESSION(yyvsp[-1].name, yyvsp[0].expression); ;
    break;}
case 127:
{ yyval.expression = YACC_TYPED_EXPRESSION(yyvsp[-1].name, yyvsp[0].expression); ;
    break;}
case 128:
{ yyval.expression = YACC_TYPED_EXPRESSION(yyvsp[-1].name, yyvsp[0].expression); ;
    break;}
case 129:
{ yyval.expression = YACC_POINTER_EXPRESSION(yyvsp[-1].declarator, yyvsp[0].expression); ;
    break;}
case 131:
{ yyval.expression = YACC_ABSTRACT_ARRAY_EXPRESSION(yyvsp[-1].expression); ;
    break;}
case 132:
{ yyval.expression = YACC_ARRAY_EXPRESSION(yyvsp[-3].expression, yyvsp[-1].expression); ;
    break;}
case 133:
{ yyval.expressions = YACC_EXPRESSIONS(0, 0); ;
    break;}
case 134:
{ yyval.expressions = yyvsp[-1].expressions; ;
    break;}
case 136:
{ yyval.expression = YACC_CAST_EXPRESSION(yyvsp[-1].expression, yyvsp[0].expression); ;
    break;}
case 138:
{ yyval.expression = YACC_DOT_STAR_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 139:
{ yyval.expression = YACC_ARROW_STAR_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 141:
{ yyval.expression = YACC_MULTIPLY_EXPRESSION(yyvsp[-2].expression, yyvsp[-1].pointer_declarator, yyvsp[0].expression); ;
    break;}
case 142:
{ yyval.expression = YACC_DIVIDE_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 143:
{ yyval.expression = YACC_MODULUS_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 145:
{ yyval.expression = YACC_ADD_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 146:
{ yyval.expression = YACC_SUBTRACT_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 148:
{ yyval.expression = YACC_SHIFT_LEFT_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 149:
{ yyval.expression = YACC_SHIFT_RIGHT_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 151:
{ yyval.expression = YACC_LESS_THAN_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 152:
{ yyval.expression = YACC_GREATER_THAN_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 153:
{ yyval.expression = YACC_LESS_EQUAL_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 154:
{ yyval.expression = YACC_GREATER_EQUAL_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 156:
{ yyval.expression = YACC_EQUAL_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 157:
{ yyval.expression = YACC_NOT_EQUAL_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 159:
{ yyval.expression = YACC_AND_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 161:
{ yyval.expression = YACC_EXCLUSIVE_OR_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 163:
{ yyval.expression = YACC_INCLUSIVE_OR_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 165:
{ yyval.expression = YACC_LOGICAL_AND_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 167:
{ yyval.expression = YACC_LOGICAL_OR_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 169:
{ yyval.expression = YACC_CONDITIONAL_EXPRESSION(yyvsp[-4].expression, yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 171:
{ yyval.expression = YACC_ASSIGNMENT_EXPRESSION(yyvsp[-2].expression, yyvsp[-1].keyword, yyvsp[0].expression); ;
    break;}
case 172:
{ yyval.expression = YACC_ASSIGNMENT_EXPRESSION(yyvsp[-2].expression, yyvsp[-1].keyword, yyvsp[0].initializer_clause); ;
    break;}
case 185:
{ yyval.expression = YACC_EXPRESSION(0); ;
    break;}
case 188:
{ yyval.expression = YACC_EXPRESSION(YACC_EXPRESSIONS(yyvsp[-2].expressions, yyvsp[0].expression)); ;
    break;}
case 191:
{ yyval.expression = YACC_LESS_THAN_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 192:
{ yyval.expression = YACC_LESS_EQUAL_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 193:
{ yyval.expression = YACC_GREATER_EQUAL_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 195:
{ yyval.expression = YACC_EQUAL_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 196:
{ yyval.expression = YACC_NOT_EQUAL_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 198:
{ yyval.expression = YACC_AND_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 200:
{ yyval.expression = YACC_EXCLUSIVE_OR_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 202:
{ yyval.expression = YACC_INCLUSIVE_OR_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 204:
{ yyval.expression = YACC_LOGICAL_AND_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 206:
{ yyval.expression = YACC_LOGICAL_OR_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 208:
{ yyval.expression = YACC_CONDITIONAL_EXPRESSION(yyvsp[-4].expression, yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 210:
{ yyval.expression = YACC_ASSIGNMENT_EXPRESSION(yyvsp[-2].expression, yyvsp[-1].keyword, yyvsp[0].expression); ;
    break;}
case 213:
{ yyval.expression = YACC_EXPRESSION(YACC_EXPRESSIONS(yyvsp[-2].expressions, yyvsp[0].expression)); ;
    break;}
case 214:
{ yyval.expressions = YACC_EXPRESSIONS(0, yyvsp[0].expression); ;
    break;}
case 215:
{ yyval.expressions = YACC_EXPRESSIONS(yyvsp[-2].expressions, yyvsp[0].expression); ;
    break;}
case 216:
{ yyval.statement = YACC_LINED_STATEMENT(yyvsp[0].statement, yyvsp[-1].line); end_search(yyval.statement); ;
    break;}
case 218:
{ yyval.statement = yyvsp[0].statement; ;
    break;}
case 219:
{ yyval.statement = 0; ;
    break;}
case 224:
{ yyval.statement = YACC_META_STATEMENT(yyvsp[0].statement); ;
    break;}
case 225:
{ yyval.statement = YACC_META_DECLARATION(yyvsp[0].expression); ;
    break;}
case 230:
{ yyval.statement = YACC_LABEL_STATEMENT(yyvsp[-2].name, yyvsp[0].statement); ;
    break;}
case 231:
{ yyval.statement = YACC_CASE_STATEMENT(yyvsp[-2].expression, yyvsp[0].statement); ;
    break;}
case 232:
{ yyval.statement = YACC_DEFAULT_STATEMENT(yyvsp[0].statement); ;
    break;}
case 233:
{ yyval.statement = YACC_COMPOUND_STATEMENT(yyvsp[-1].statements); ;
    break;}
case 234:
{ yyval.statement = yyvsp[-4].statements; YACC_UNBANG(yyvsp[-1].bang, "Bad statement-seq."); ;
    break;}
case 235:
{ yyval.statements = YACC_STATEMENTS(0, 0); ;
    break;}
case 236:
{ yyval.statements = YACC_STATEMENTS(yyvsp[-1].statements, YACC_COMPILE_STATEMENT(yyvsp[0].statement)); ;
    break;}
case 237:
{ yyval.statements = yyvsp[-5].statements; YACC_UNBANG(yyvsp[-2].bang, "Bad statement."); ;
    break;}
case 238:
{ yyval.statement = YACC_IF_STATEMENT(yyvsp[-2].condition, yyvsp[0].statement, 0); ;
    break;}
case 239:
{ yyval.statement = YACC_IF_STATEMENT(yyvsp[-4].condition, yyvsp[-2].statement, yyvsp[0].statement); ;
    break;}
case 240:
{ yyval.statement = YACC_SWITCH_STATEMENT(yyvsp[-2].condition, yyvsp[0].statement); ;
    break;}
case 241:
{ yyval.condition = YACC_CONDITION(0); ;
    break;}
case 243:
{ yyval.condition = YACC_CONDITION(yyvsp[0].parameters); ;
    break;}
case 244:
{ yyval.statement = YACC_WHILE_STATEMENT(yyvsp[-2].condition, yyvsp[0].statement); ;
    break;}
case 245:
{ yyval.statement = YACC_DO_WHILE_STATEMENT(yyvsp[-5].statement, yyvsp[-2].expression); ;
    break;}
case 246:
{ yyval.statement = YACC_FOR_STATEMENT(yyvsp[-5].expression, yyvsp[-4].condition, yyvsp[-2].expression, yyvsp[0].statement); ;
    break;}
case 248:
{ yyval.statement = YACC_BREAK_STATEMENT(); ;
    break;}
case 249:
{ yyval.statement = YACC_CONTINUE_STATEMENT(); ;
    break;}
case 250:
{ yyval.statement = YACC_RETURN_STATEMENT(yyvsp[-1].expression); ;
    break;}
case 251:
{ yyval.statement = YACC_GOTO_STATEMENT(yyvsp[-1].name); ;
    break;}
case 252:
{ yyval.statement = YACC_DECLARATION_STATEMENT(yyvsp[0].declaration); ;
    break;}
case 253:
{ yyval.declarations = yyvsp[-1].declarations; unnest(yyvsp[-2].nest); ;
    break;}
case 254:
{ yyval.declarations = yyvsp[-5].declarations; unnest(yyvsp[-6].nest); YACC_UNBANG(yyvsp[-1].bang, "Bad declaration-seq."); ;
    break;}
case 255:
{ yyval.declarations = YACC_DECLARATIONS(0, 0); ;
    break;}
case 256:
{ yyval.declarations = YACC_DECLARATIONS(yyvsp[-2].declarations, YACC_COMPILE_DECLARATION(yyvsp[-1].utility, yyvsp[0].declaration)); ;
    break;}
case 257:
{ yyval.declarations = yyvsp[-6].declarations; YACC_UNBANG(yyvsp[-2].bang, "Bad declaration."); ;
    break;}
case 258:
{ yyval.declaration = YACC_LINED_DECLARATION(yyvsp[0].declaration, yyvsp[-1].line); end_search(yyval.declaration); ;
    break;}
case 260:
{ yyval.declaration = yyvsp[0].declaration; ;
    break;}
case 261:
{ yyval.declaration = 0; ;
    break;}
case 262:
{ yyval.declaration = YACC_LINED_DECLARATION(yyvsp[0].declaration, yyvsp[-1].line); ;
    break;}
case 264:
{ yyval.declaration = YACC_SIMPLE_DECLARATION(yyvsp[0].expression); ;
    break;}
case 269:
{ yyval.declaration = yyvsp[0].declarations; ;
    break;}
case 270:
{ yyval.declaration = YACC_META_STATEMENT(yyvsp[0].meta_statement); ;
    break;}
case 271:
{ yyval.declaration = YACC_META_STATEMENT(yyvsp[0].meta_statement); ;
    break;}
case 272:
{ yyval.declaration = yyvsp[-1].meta_class; ;
    break;}
case 273:
{ yyval.declaration = YACC_META_DECLARATION(yyvsp[0].expression); ;
    break;}
case 274:
{ yyval.declaration = YACC_META_DECLARATION(yyvsp[0].expression); ;
    break;}
case 279:
{ yyval.declaration = YACC_FILESPACE_DECLARATION(yyvsp[-1].name); ;
    break;}
case 280:
{ yyval.declaration = YACC_LINKAGE_SPECIFICATION(yyvsp[0].name); ;
    break;}
case 281:
{ yyval.declaration = YACC_NAMESPACE_DECLARATION(yyvsp[0].name); ;
    break;}
case 282:
{ yyval.declaration = YACC_NAMESPACE_DECLARATION(yyvsp[0].name); ;
    break;}
case 283:
{ yyval.declaration = YACC_SET_TEMPLATE_DECLARATION(yyvsp[0].declaration); ;
    break;}
case 284:
{ yyval.declaration = YACC_SIMPLE_DECLARATION(yyvsp[0].expression); ;
    break;}
case 289:
{ yyval.declaration = YACC_SET_TEMPLATE_DECLARATION(yyvsp[0].declaration); ;
    break;}
case 290:
{ yyval.expression = YACC_EXPRESSION(0); ;
    break;}
case 292:
{ yyval.expression = YACC_EXPRESSIONS(yyvsp[-3].expressions, yyvsp[-1].expression); ;
    break;}
case 293:
{ yyval.expression = yyvsp[-1].expressions; ;
    break;}
case 294:
{ yyval.expression = YACC_DECL_SPECIFIER_EXPRESSION(yyvsp[0].expression, yyvsp[-1].decl_specifier_id); ;
    break;}
case 295:
{ yyval.name = yyvsp[0].built_in_id; ;
    break;}
case 296:
{ yyval.name = YACC_BUILT_IN_NAME(yyvsp[-1].name, yyvsp[0].built_in_id); ;
    break;}
case 297:
{ yyval.name = YACC_DECL_SPECIFIER_NAME(yyvsp[-1].name, yyvsp[0].decl_specifier_id); ;
    break;}
case 298:
{ yyval.name = yyvsp[0].name; ;
    break;}
case 299:
{ yyval.name = YACC_SET_TEMPLATE_NAME(yyvsp[0].name); ;
    break;}
case 300:
{ yyval.name = yyvsp[0].name; ;
    break;}
case 301:
{ yyval.name = yyvsp[0].name; ;
    break;}
case 302:
{ yyval.name = YACC_DECL_SPECIFIER_NAME(yyvsp[-1].name, yyvsp[0].decl_specifier_id); ;
    break;}
case 303:
{ yyval.name = YACC_NAME_EXPRESSION(yyvsp[0].name); ;
    break;}
case 304:
{ yyval.name = YACC_TYPED_NAME(yyvsp[-1].name, yyvsp[0].name); ;
    break;}
case 306:
{ yyval.name = YACC_TYPED_NAME(yyvsp[-1].name, yyvsp[0].name); ;
    break;}
case 307:
{ yyval.name = YACC_NAME_EXPRESSION(yyvsp[0].name); ;
    break;}
case 309:
{ yyval.name = YACC_TYPED_NAME(yyvsp[-1].name, yyvsp[0].name); ;
    break;}
case 311:
{ yyval.name = YACC_TYPED_NAME(yyvsp[-1].name, yyvsp[0].name); ;
    break;}
case 314:
{ yyval.name = YACC_TYPED_NAME(yyvsp[-2].name, yyvsp[-1].name); ;
    break;}
case 315:
{ yyval.name = YACC_NAME_EXPRESSION(yyvsp[-1].name); ;
    break;}
case 320:
{ yyval.decl_specifier_id = yyvsp[0].cv_qualifiers; ;
    break;}
case 321:
{ yyval.decl_specifier_id = YACC_ACCESS_SPECIFIER_ID(yyvsp[0].access_specifier); ;
    break;}
case 326:
{ yyval.decl_specifier_id = YACC_SET_TEMPLATE_DECL_SPECIFIER(yyvsp[0].decl_specifier_id); ;
    break;}
case 331:
{ yyval.decl_specifier_id = YACC_NOT_STATIC(); ;
    break;}
case 335:
{ yyval.decl_specifier_id = YACC_NOT_INLINE(); ;
    break;}
case 336:
{ yyval.decl_specifier_id = YACC_INLINE_IN_IMPLEMENTATION(); ;
    break;}
case 337:
{ yyval.decl_specifier_id = YACC_INLINE_IN_INTERFACE(); ;
    break;}
case 338:
{ yyval.decl_specifier_id = YACC_NOT_VIRTUAL(); ;
    break;}
case 339:
{ yyval.decl_specifier_id = YACC_PURE_VIRTUAL(); ;
    break;}
case 342:
{ yyval.name = YACC_CV_DECL_SPECIFIER(yyvsp[0].cv_qualifiers); ;
    break;}
case 343:
{ yyval.name = YACC_NOT_CONST(); ;
    break;}
case 344:
{ yyval.name = YACC_NOT_VOLATILE(); ;
    break;}
case 348:
{ yyval.name = YACC_SET_TEMPLATE_ID(yyvsp[0].name); ;
    break;}
case 350:
{ yyval.name = YACC_BUILT_IN_ID_ID(yyvsp[0].built_in_id); ;
    break;}
case 354:
{ yyval.name = YACC_ELABORATED_TYPE_SPECIFIER(yyvsp[-1].class_key, yyvsp[0].name); ;
    break;}
case 355:
{ yyval.name = YACC_ELABORATED_TYPE_SPECIFIER(yyvsp[-1].class_key, yyvsp[0].name); ;
    break;}
case 356:
{ yyval.name = YACC_ENUM_SPECIFIER_ID(yyvsp[-1].name, yyvsp[0].enumerators); ;
    break;}
case 357:
{ yyval.name = YACC_ENUM_SPECIFIER_ID(0, yyvsp[0].enumerators); ;
    break;}
case 358:
{ yyval.enumerators = YACC_ENUMERATORS(0, 0); ;
    break;}
case 359:
{ yyval.enumerators = yyvsp[-1].enumerators; ;
    break;}
case 360:
{ yyval.enumerators = yyvsp[-2].enumerators; ;
    break;}
case 361:
{ ;
    break;}
case 362:
{ YACC_UNBANG(yyvsp[-1].bang, "Bad enumerator-list."); ;
    break;}
case 363:
{ ;
    break;}
case 364:
{ YACC_UNBANG(yyvsp[-1].bang, "Bad enumerator-definition."); ;
    break;}
case 366:
{ YACC_UNBANG(yyvsp[-2].bang, "Bad enumerator-definition."); ;
    break;}
case 367:
{ yyval.enumerators = YACC_ENUMERATORS(0, 0); ;
    break;}
case 369:
{ yyval.enumerators = YACC_ENUMERATORS(yyvsp[-1].enumerators, yyvsp[0].enumerator); ;
    break;}
case 370:
{ yyval.enumerator = YACC_ENUMERATOR(yyvsp[0].name, 0); ;
    break;}
case 371:
{ yyval.enumerator = YACC_ENUMERATOR(yyvsp[-2].name, yyvsp[0].expression); ;
    break;}
case 373:
{ yyval.name = YACC_NAMESPACE_DEFINITION(yyvsp[-1].name, yyvsp[0].declarations); ;
    break;}
case 374:
{ yyval.name = YACC_NAMESPACE_DEFINITION(0, yyvsp[0].declarations); ;
    break;}
case 375:
{ yyval.declaration = YACC_NAMESPACE_ALIAS_DEFINITION(yyvsp[-3].name, yyvsp[-1].name); ;
    break;}
case 376:
{ yyval.name = YACC_ELABORATED_TYPE_SPECIFIER(yyvsp[-2].class_key, yyvsp[-1].name); ;
    break;}
case 377:
{ yyval.declaration = YACC_USING_DIRECTIVE(yyvsp[-1].name); ;
    break;}
case 378:
{ yyval.declaration = YACC_ASM_DEFINITION(yyvsp[-2].strings); ;
    break;}
case 379:
{ yyval.name = YACC_LINKAGE_SPECIFIER(yyvsp[-1].strings, yyvsp[0].declaration); ;
    break;}
case 380:
{ yyval.expressions = YACC_EXPRESSIONS(YACC_EXPRESSIONS(0, yyvsp[-2].expression), yyvsp[0].expression); ;
    break;}
case 381:
{ yyval.expressions = YACC_EXPRESSIONS(yyvsp[-2].expressions, yyvsp[0].expression); ;
    break;}
case 382:
{ yyval.expressions = YACC_EXPRESSIONS(YACC_EXPRESSIONS(0, yyvsp[-2].expression), yyvsp[0].expression); ;
    break;}
case 383:
{ yyval.expressions = YACC_EXPRESSIONS(yyvsp[-2].expressions, yyvsp[0].expression); ;
    break;}
case 384:
{ yyval.expressions = YACC_EXPRESSIONS(yyvsp[-2].expressions, yyvsp[0].expression); ;
    break;}
case 388:
{ yyval.expression = YACC_OBJECT_SCOPE_EXPRESSION(yyvsp[-1].expression, yyvsp[0].subspace); ;
    break;}
case 389:
{ yyval.expression = YACC_OBJECT_SCOPE_EXPRESSION(yyvsp[-1].expression, yyvsp[0].subspace); ;
    break;}
case 390:
{ yyval.pointer_declarator = YACC_POINTER_DECLARATOR(); ;
    break;}
case 391:
{ yyval.pointer_declarator = YACC_CV_DECLARATOR(yyvsp[-1].pointer_declarator, yyvsp[0].cv_qualifiers); ;
    break;}
case 392:
{ yyval.declarator = yyvsp[0].pointer_declarator; ;
    break;}
case 393:
{ yyval.declarator = YACC_NESTED_DECLARATOR(yyvsp[-1].name, yyvsp[0].declarator); ;
    break;}
case 394:
{ yyval.declarator = YACC_REFERENCE_DECLARATOR(); ;
    break;}
case 395:
{ yyval.declarator = yyvsp[0].declarator; ;
    break;}
case 396:
{ yyval.declarator = YACC_GLOBAL_DECLARATOR(yyvsp[-1].is_template, yyvsp[0].declarator); ;
    break;}
case 397:
{ yyval.expression = YACC_POINTER_EXPRESSION(yyvsp[0].declarator, YACC_EPSILON()); ;
    break;}
case 398:
{ yyval.expression = YACC_POINTER_EXPRESSION(yyvsp[-1].declarator, yyvsp[0].expression); ;
    break;}
case 399:
{ yyval.expression = YACC_EXPRESSION(0); ;
    break;}
case 400:
{ yyval.expression = YACC_POINTER_EXPRESSION(yyvsp[-1].declarator, yyvsp[0].expression); ;
    break;}
case 401:
{ yyval.cv_qualifiers = YACC_CV_QUALIFIERS(0, 0); ;
    break;}
case 402:
{ yyval.cv_qualifiers = YACC_CV_QUALIFIERS(yyvsp[-1].cv_qualifiers, yyvsp[0].cv_qualifiers); ;
    break;}
case 405:
{ yyval.expression = YACC_TYPED_EXPRESSION(yyvsp[-1].name, yyvsp[0].expression); ;
    break;}
case 406:
{ yyval.expression = YACC_TYPED_EXPRESSION(yyvsp[-1].name, yyvsp[0].expression); ;
    break;}
case 407:
{ yyval.expression = YACC_EPSILON(); ;
    break;}
case 408:
{ yyval.expression = YACC_POINTER_EXPRESSION(yyvsp[-1].declarator, yyvsp[0].expression); ;
    break;}
case 410:
{ yyval.expression = YACC_EPSILON(); ;
    break;}
case 412:
{ yyval.expression = YACC_CALL_EXPRESSION(yyvsp[-1].expression, yyvsp[0].parenthesised); ;
    break;}
case 413:
{ yyval.expression = YACC_ARRAY_EXPRESSION(yyvsp[-2].expression, 0); ;
    break;}
case 414:
{ yyval.expression = YACC_ARRAY_EXPRESSION(yyvsp[-3].expression, yyvsp[-1].expression); ;
    break;}
case 415:
{ yyval.parenthesised = YACC_PARENTHESISED(yyvsp[-1].parameters, yyvsp[0].cv_qualifiers, 0); ;
    break;}
case 416:
{ yyval.parenthesised = YACC_PARENTHESISED(yyvsp[-2].parameters, yyvsp[-1].cv_qualifiers, yyvsp[0].exception_specification); ;
    break;}
case 417:
{ yyval.parameters = yyvsp[-1].parameters; ;
    break;}
case 418:
{ yyval.parameters = YACC_PARAMETERS(0, 0); ;
    break;}
case 420:
{ yyval.parameters = YACC_PARAMETERS(yyvsp[-1].parameters, YACC_ELLIPSIS_EXPRESSION()); ;
    break;}
case 421:
{ yyval.parameters = YACC_PARAMETERS(0, yyvsp[0].parameter); ;
    break;}
case 422:
{ yyval.parameters = YACC_PARAMETERS(yyvsp[-2].parameters, yyvsp[0].parameter); ;
    break;}
case 424:
{ yyval.expression = YACC_MULTIPLY_EXPRESSION(yyvsp[-2].expression, yyvsp[-1].pointer_declarator, yyvsp[0].expression); ;
    break;}
case 426:
{ yyval.expression = YACC_AND_EXPRESSION(yyvsp[-1].expression, YACC_EPSILON()); ;
    break;}
case 427:
{ yyval.expression = YACC_AND_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 429:
{ yyval.expression = YACC_ASSIGNMENT_EXPRESSION(yyvsp[-2].expression, yyvsp[-1].keyword, yyvsp[0].expression); ;
    break;}
case 430:
{ yyval.expression = YACC_ELLIPSIS_EXPRESSION(); ;
    break;}
case 431:
{ yyval.parameter = YACC_EXPRESSION_PARAMETER(yyvsp[0].expression); ;
    break;}
case 432:
{ yyval.parameter = YACC_EXPRESSION_PARAMETER(yyvsp[0].expression); ;
    break;}
case 433:
{ yyval.parameter = YACC_DECL_SPECIFIER_PARAMETER(yyvsp[0].parameter, yyvsp[-1].decl_specifier_id); ;
    break;}
case 434:
{ yyval.parameter = YACC_EXPRESSION_PARAMETER(yyvsp[0].expression); ;
    break;}
case 435:
{ yyval.parameter = YACC_EXPRESSION_PARAMETER(yyvsp[0].expression); ;
    break;}
case 436:
{ yyval.parameter = YACC_EXPRESSION_PARAMETER(YACC_ASSIGNMENT_EXPRESSION(yyvsp[-2].expression, yyvsp[-1].keyword, yyvsp[0].expression)); ;
    break;}
case 437:
{ yyval.parameter = YACC_DECL_SPECIFIER_PARAMETER(yyvsp[0].parameter, yyvsp[-1].decl_specifier_id); ;
    break;}
case 439:
{ yyval.expression = YACC_AND_EXPRESSION(yyvsp[-1].expression, 0); ;
    break;}
case 440:
{ yyval.expression = YACC_AND_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 443:
{ yyval.expression = YACC_FUNCTION_DEFINITION(yyvsp[-1].expression, yyvsp[0].function_body); ;
    break;}
case 444:
{ yyval.expression = YACC_FUNCTION_DEFINITION(yyvsp[-1].expression, yyvsp[0].function_body); ;
    break;}
case 445:
{ yyval.expression = YACC_DECL_SPECIFIER_EXPRESSION(yyvsp[0].expression, yyvsp[-1].decl_specifier_id); ;
    break;}
case 446:
{ yyval.expression = YACC_CTOR_DEFINITION(yyvsp[-1].expressions, yyvsp[0].function_body); ;
    break;}
case 447:
{ yyval.expression = YACC_CTOR_DEFINITION(yyvsp[-1].expressions, yyvsp[0].function_body); ;
    break;}
case 448:
{ yyval.expression = YACC_DECL_SPECIFIER_EXPRESSION(yyvsp[0].expression, yyvsp[-1].decl_specifier_id); ;
    break;}
case 449:
{ yyval.expressions = YACC_EXPRESSIONS(0, yyvsp[0].expression); ;
    break;}
case 450:
{ yyval.expressions = YACC_EXPRESSIONS(yyvsp[-2].expressions, yyvsp[0].expression); ;
    break;}
case 451:
{ yyval.function_body = YACC_TRY_FUNCTION_BLOCK(yyvsp[-1].function_body, yyvsp[0].handlers); ;
    break;}
case 452:
{ yyval.function_body = YACC_CTOR_FUNCTION_BLOCK(yyvsp[0].function_body, yyvsp[-1].mem_initializers); ;
    break;}
case 453:
{ yyval.function_body = YACC_FUNCTION_BLOCK(yyvsp[0].statement); ;
    break;}
case 454:
{ yyval.initializer_clause = YACC_INITIALIZER_EXPRESSION_CLAUSE(yyvsp[0].expression); ;
    break;}
case 456:
{ yyval.initializer_clause = YACC_INITIALIZER_LIST_CLAUSE(yyvsp[-1].initializer_clauses); ;
    break;}
case 457:
{ yyval.initializer_clause = YACC_INITIALIZER_LIST_CLAUSE(yyvsp[-2].initializer_clauses); ;
    break;}
case 458:
{ yyval.initializer_clause = YACC_INITIALIZER_LIST_CLAUSE(0); ;
    break;}
case 459:
{ yyval.initializer_clause = 0; YACC_UNBANG(yyvsp[-1].bang, "Bad initializer_clause."); ;
    break;}
case 460:
{ yyval.initializer_clause = yyvsp[-5].initializer_clauses; YACC_UNBANG(yyvsp[-1].bang, "Bad initializer_clause."); ;
    break;}
case 461:
{ yyval.initializer_clauses = YACC_INITIALIZER_CLAUSES(0, yyvsp[0].initializer_clause); ;
    break;}
case 462:
{ yyval.initializer_clauses = YACC_INITIALIZER_CLAUSES(yyvsp[-2].initializer_clauses, yyvsp[0].initializer_clause); ;
    break;}
case 463:
{ yyval.initializer_clause = yyvsp[0].initializer_clause; end_search(yyval.initializer_clause); ;
    break;}
case 465:
{ yyval.initializer_clause = yyvsp[0].initializer_clause; ;
    break;}
case 466:
{ yyval.initializer_clause = 0; ;
    break;}
case 467:
{ yyval.mark = mark(); ;
    break;}
case 468:
{ yyval.name = YACC_ELABORATED_TYPE_SPECIFIER(yyvsp[-1].class_key, yyvsp[0].name); ;
    break;}
case 469:
{ yyval.name = YACC_ELABORATED_TYPE_SPECIFIER(yyvsp[-3].class_key, yyvsp[-2].name); rewind_colon(yyvsp[-1].mark, yyval.name); ;
    break;}
case 470:
{ unmark(yyvsp[-1].base_specifiers); yyval._class = YACC_CLASS_SPECIFIER_ID(yyvsp[-4].class_key, yyvsp[-3].name, yyvsp[-1].base_specifiers); ;
    break;}
case 471:
{ yyval._class = YACC_CLASS_SPECIFIER_ID(yyvsp[-3].class_key, 0, yyvsp[-1].base_specifiers); ;
    break;}
case 472:
{ yyval._class = YACC_CLASS_SPECIFIER_ID(yyvsp[-2].class_key, yyvsp[-1].name, 0); ;
    break;}
case 473:
{ yyval._class = YACC_CLASS_SPECIFIER_ID(yyvsp[-1].class_key, 0, 0); ;
    break;}
case 477:
{ yyval.name = YACC_CLASS_MEMBERS(yyvsp[-3]._class, yyvsp[-1].declarations); unnest(yyvsp[-2].nest); ;
    break;}
case 478:
{ yyval.name = YACC_CLASS_MEMBERS(yyvsp[-7]._class, yyvsp[-5].declarations); unnest(yyvsp[-6].nest); YACC_UNBANG(yyvsp[-1].bang, "Bad member_specification.opt."); ;
    break;}
case 479:
{ yyval.declaration = YACC_ACCESSIBILITY_SPECIFIER(yyvsp[-1].access_specifier); ;
    break;}
case 480:
{ yyval.expression = YACC_BIT_FIELD_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 481:
{ yyval.expression = YACC_BIT_FIELD_EXPRESSION(0, yyvsp[0].expression); ;
    break;}
case 483:
{ yyval.expression = YACC_CONDITIONAL_EXPRESSION(yyvsp[-4].expression, yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 485:
{ yyval.expression = YACC_ASSIGNMENT_EXPRESSION(yyvsp[-2].expression, yyvsp[-1].keyword, yyvsp[0].initializer_clause); ;
    break;}
case 486:
{ yyval.base_specifiers = YACC_BASE_SPECIFIERS(0, yyvsp[0].base_specifier); ;
    break;}
case 487:
{ yyval.base_specifiers = YACC_BASE_SPECIFIERS(yyvsp[-2].base_specifiers, yyvsp[0].base_specifier); ;
    break;}
case 488:
{ yyval.base_specifier = YACC_BASE_SPECIFIER(yyvsp[0].name); ;
    break;}
case 489:
{ yyval.base_specifier = YACC_ACCESS_BASE_SPECIFIER(yyvsp[0].base_specifier, yyvsp[-1].access_specifier); ;
    break;}
case 490:
{ yyval.base_specifier = YACC_VIRTUAL_BASE_SPECIFIER(yyvsp[0].base_specifier); ;
    break;}
case 491:
{ yyval.base_specifier = YACC_NOT_VIRTUAL_BASE_SPECIFIER(yyvsp[0].base_specifier); ;
    break;}
case 492:
{ yyval.base_specifier = YACC_META_BASE_SPECIFIER(yyvsp[0].base_specifier); ;
    break;}
case 493:
{ yyval.base_specifier = YACC_BASE_SPECIFIER(yyvsp[0].built_in_id); ;
    break;}
case 497:
{ yyval.name = YACC_CONVERSION_FUNCTION_ID(yyvsp[0].expression); ;
    break;}
case 498:
{ yyval.expression = YACC_TYPED_EXPRESSION(yyvsp[-1].name, yyvsp[0].expression); ;
    break;}
case 499:
{ yyval.expression = YACC_TYPED_EXPRESSION(yyvsp[-1].name, yyvsp[0].expression); ;
    break;}
case 500:
{ yyval.mem_initializers = YACC_MEM_INITIALIZERS(0, 0); ;
    break;}
case 502:
{ yyval.mem_initializers = yyvsp[0].mem_initializers; ;
    break;}
case 503:
{ yyval.mem_initializers = yyvsp[-2].mem_initializers; YACC_UNBANG(yyvsp[-1].bang, "Bad ctor-initializer."); ;
    break;}
case 504:
{ yyval.mem_initializers = YACC_MEM_INITIALIZERS(0, yyvsp[0].mem_initializer); ;
    break;}
case 505:
{ yyval.mem_initializers = YACC_MEM_INITIALIZERS(yyvsp[-1].mem_initializers, yyvsp[0].mem_initializer); ;
    break;}
case 507:
{ YACC_UNBANG(yyvsp[-2].bang, "Bad mem-initializer."); ;
    break;}
case 508:
{ YACC_UNBANG(yyvsp[-2].bang, "Bad mem-initializer."); ;
    break;}
case 509:
{ yyval.mem_initializer = YACC_MEM_INITIALIZER(yyvsp[-3].name, yyvsp[-1].expressions); ;
    break;}
case 511:
{ yyval.name = YACC_OPERATOR_FUNCTION_ID(yyvsp[0].name); ;
    break;}
case 512:
{ yyval.name = YACC_OPERATOR_NEW_ID(); ;
    break;}
case 513:
{ yyval.name = YACC_OPERATOR_DELETE_ID(); ;
    break;}
case 514:
{ yyval.name = YACC_OPERATOR_ADD_ID(); ;
    break;}
case 515:
{ yyval.name = YACC_OPERATOR_SUB_ID(); ;
    break;}
case 516:
{ yyval.name = YACC_OPERATOR_MUL_ID(); ;
    break;}
case 517:
{ yyval.name = YACC_OPERATOR_DIV_ID(); ;
    break;}
case 518:
{ yyval.name = YACC_OPERATOR_MOD_ID(); ;
    break;}
case 519:
{ yyval.name = YACC_OPERATOR_XOR_ID(); ;
    break;}
case 520:
{ yyval.name = YACC_OPERATOR_BIT_AND_ID(); ;
    break;}
case 521:
{ yyval.name = YACC_OPERATOR_BIT_OR_ID(); ;
    break;}
case 522:
{ yyval.name = YACC_OPERATOR_BIT_NOT_ID(); ;
    break;}
case 523:
{ yyval.name = YACC_OPERATOR_LOG_NOT_ID(); ;
    break;}
case 524:
{ yyval.name = YACC_OPERATOR_ASS_ID(); ;
    break;}
case 525:
{ yyval.name = YACC_OPERATOR_LT_ID(); ;
    break;}
case 526:
{ yyval.name = YACC_OPERATOR_GT_ID(); ;
    break;}
case 527:
{ yyval.name = YACC_OPERATOR_ASS_ADD_ID(); ;
    break;}
case 528:
{ yyval.name = YACC_OPERATOR_ASS_SUB_ID(); ;
    break;}
case 529:
{ yyval.name = YACC_OPERATOR_ASS_MUL_ID(); ;
    break;}
case 530:
{ yyval.name = YACC_OPERATOR_ASS_DIV_ID(); ;
    break;}
case 531:
{ yyval.name = YACC_OPERATOR_ASS_MOD_ID(); ;
    break;}
case 532:
{ yyval.name = YACC_OPERATOR_ASS_XOR_ID(); ;
    break;}
case 533:
{ yyval.name = YACC_OPERATOR_ASS_BIT_AND_ID(); ;
    break;}
case 534:
{ yyval.name = YACC_OPERATOR_ASS_BIT_OR_ID(); ;
    break;}
case 535:
{ yyval.name = YACC_OPERATOR_SHL_ID(); ;
    break;}
case 536:
{ yyval.name = YACC_OPERATOR_SHR_ID(); ;
    break;}
case 537:
{ yyval.name = YACC_OPERATOR_ASS_SHR_ID(); ;
    break;}
case 538:
{ yyval.name = YACC_OPERATOR_ASS_SHL_ID(); ;
    break;}
case 539:
{ yyval.name = YACC_OPERATOR_EQ_ID(); ;
    break;}
case 540:
{ yyval.name = YACC_OPERATOR_NE_ID(); ;
    break;}
case 541:
{ yyval.name = YACC_OPERATOR_LE_ID(); ;
    break;}
case 542:
{ yyval.name = YACC_OPERATOR_GE_ID(); ;
    break;}
case 543:
{ yyval.name = YACC_OPERATOR_LOG_AND_ID(); ;
    break;}
case 544:
{ yyval.name = YACC_OPERATOR_LOG_OR_ID(); ;
    break;}
case 545:
{ yyval.name = YACC_OPERATOR_INC_ID(); ;
    break;}
case 546:
{ yyval.name = YACC_OPERATOR_DEC_ID(); ;
    break;}
case 547:
{ yyval.name = YACC_OPERATOR_COMMA_ID(); ;
    break;}
case 548:
{ yyval.name = YACC_OPERATOR_ARROW_STAR_ID(); ;
    break;}
case 549:
{ yyval.name = YACC_OPERATOR_ARROW_ID(); ;
    break;}
case 550:
{ yyval.name = YACC_OPERATOR_CALL_ID(); ;
    break;}
case 551:
{ yyval.name = YACC_OPERATOR_INDEX_ID(); ;
    break;}
case 552:
{ yyval.declaration = YACC_TEMPLATE_DECLARATION(yyvsp[-1].template_parameters, yyvsp[0].declaration); ;
    break;}
case 553:
{ yyval.declaration = YACC_DECL_SPECIFIER_DECLARATION(yyvsp[0].declaration, yyvsp[-1].decl_specifier_id); ;
    break;}
case 554:
{ yyval.declaration = YACC_DECL_SPECIFIER_DECLARATION(yyvsp[0].declaration, yyvsp[-1].decl_specifier_id); ;
    break;}
case 555:
{ yyval.template_parameters = yyvsp[-1].template_parameters; ;
    break;}
case 556:
{ yyval.template_parameters = YACC_TEMPLATE_PARAMETERS(0, yyvsp[0].template_parameter); ;
    break;}
case 557:
{ yyval.template_parameters = YACC_TEMPLATE_PARAMETERS(yyvsp[-2].template_parameters, yyvsp[0].template_parameter); ;
    break;}
case 558:
{ yyval.template_parameter = YACC_INIT_SIMPLE_TYPE_PARAMETER(yyvsp[0].simple_type_parameter, 0); ;
    break;}
case 559:
{ yyval.template_parameter = YACC_INIT_SIMPLE_TYPE_PARAMETER(yyvsp[-2].simple_type_parameter, yyvsp[0].expression); ;
    break;}
case 560:
{ yyval.template_parameter = YACC_INIT_TEMPLATED_PARAMETER(yyvsp[0].templated_type_parameter, 0); ;
    break;}
case 561:
{ yyval.template_parameter = YACC_INIT_TEMPLATED_PARAMETER(yyvsp[-2].templated_type_parameter, yyvsp[0].name); ;
    break;}
case 562:
{ yyval.template_parameter = YACC_TEMPLATE_PARAMETER(yyvsp[0].parameter); ;
    break;}
case 563:
{ yyval.template_parameter = 0; YACC_UNBANG(yyvsp[-1].bang, "Bad template-parameter."); ;
    break;}
case 564:
{ yyval.simple_type_parameter = YACC_CLASS_TYPE_PARAMETER(0); ;
    break;}
case 565:
{ yyval.simple_type_parameter = YACC_TYPENAME_TYPE_PARAMETER(0); ;
    break;}
case 566:
{ yyval.templated_type_parameter = YACC_TEMPLATED_TYPE_PARAMETER(yyvsp[-1].template_parameters, 0); ;
    break;}
case 567:
{ yyval.templated_type_parameter = YACC_TEMPLATED_TYPE_PARAMETER(yyvsp[-2].template_parameters, yyvsp[0].name); ;
    break;}
case 568:
{ yyval.name = YACC_TEMPLATE_NAME(yyvsp[-3].name, yyvsp[-1].template_arguments); ;
    break;}
case 569:
{ yyval.name = yyvsp[0].name; ;
    break;}
case 570:
{ yyval.template_arguments = YACC_TEMPLATE_ARGUMENTS(0, yyvsp[0].template_argument); ;
    break;}
case 571:
{ yyval.template_arguments = YACC_TEMPLATE_ARGUMENTS(yyvsp[-2].template_arguments, yyvsp[0].template_argument); ;
    break;}
case 572:
{ yyval.template_argument = YACC_TEMPLATE_ARGUMENT(yyvsp[0].parameter); ;
    break;}
case 573:
{ yyval.declaration = YACC_EXPLICIT_SPECIALIZATION(yyvsp[0].declaration); ;
    break;}
case 574:
{ yyval.declaration = YACC_DECL_SPECIFIER_DECLARATION(yyvsp[0].declaration, yyvsp[-1].decl_specifier_id); ;
    break;}
case 575:
{ yyval.statement = YACC_TRY_BLOCK(yyvsp[-1].statement, yyvsp[0].handlers); ;
    break;}
case 576:
{ yyval.handlers = YACC_HANDLERS(0, yyvsp[0].handler); ;
    break;}
case 577:
{ yyval.handlers = YACC_HANDLERS(yyvsp[0].handlers, yyvsp[-1].handler); ;
    break;}
case 578:
{ yyval.handler = YACC_HANDLER(yyvsp[-2].exception_declaration, yyvsp[0].statement); ;
    break;}
case 579:
{ yyval.exception_declaration = YACC_EXCEPTION_DECLARATION(yyvsp[0].parameter); ;
    break;}
case 580:
{ yyval.expression = YACC_THROW_EXPRESSION(0); ;
    break;}
case 581:
{ yyval.expression = YACC_THROW_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 582:
{ yyval.expression = YACC_THROW_EXPRESSION(0); ;
    break;}
case 583:
{ yyval.expression = YACC_THROW_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 584:
{ yyval.exception_specification = YACC_EXCEPTION_SPECIFICATION(0); ;
    break;}
case 585:
{ yyval.exception_specification = YACC_EXCEPTION_SPECIFICATION(yyvsp[-1].expressions); ;
    break;}
case 586:
{ yyval.expressions = YACC_EXPRESSIONS(0, yyvsp[0].expression); ;
    break;}
case 587:
{ yyval.expressions = YACC_EXPRESSIONS(yyvsp[-2].expressions, yyvsp[0].expression); ;
    break;}
case 588:
{ yyval.expression = YACC_TREE_EXPRESSION(yyvsp[0].name); ;
    break;}
case 589:
{ yyval.expression = yyvsp[-1].expression; ;
    break;}
case 590:
{ yyval.expression = yyvsp[0].expression; ;
    break;}
case 591:
{ yyval.expression = yyvsp[-1].expression; ;
    break;}
case 592:
{ yyval.expression = YACC_TREE_ARRAY_EXPRESSION(yyvsp[-2].expression, 0); ;
    break;}
case 593:
{ yyval.expression = YACC_TREE_ARRAY_EXPRESSION(yyvsp[-3].expression, yyvsp[-1].expression); ;
    break;}
case 594:
{ yyval.expression = YACC_TREE_CALL_EXPRESSION(yyvsp[-3].expression, yyvsp[-1].tokens); ;
    break;}
case 595:
{ yyval.expression = YACC_TREE_DOT_EXPRESSION(yyvsp[-2].expression, yyvsp[0].name); ;
    break;}
case 596:
{ yyval.expression = YACC_TREE_ARROW_EXPRESSION(yyvsp[-2].expression, yyvsp[0].name); ;
    break;}
case 598:
{ yyval.expression = YACC_TREE_POINTER_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 600:
{ yyval.tokens = YACC_TREE_ARGUMENTS(yyvsp[-2].tokens, yyvsp[0].tokens); ;
    break;}
case 602:
{ yyval.tokens = YACC_TREE_ARGUMENTS(0, yyvsp[0].expressions); ;
    break;}
case 603:
{ yyval.tokens = YACC_DECL_SPECIFIER_TREE_ARGUMENTS(yyvsp[0].tokens, yyvsp[-1].decl_specifier_id); ;
    break;}
case 604:
{ yyval.tokens = YACC_TREE_ARGUMENTS(0, (CxxToken *)0); ;
    break;}
case 605:
{ yyval.tokens = YACC_TREE_ARGUMENTS(0, yyvsp[0].token); ;
    break;}
case 606:
{ yyval.tokens = YACC_TREE_ARGUMENTS(0, yyvsp[0].expression); ;
    break;}
case 607:
{ yyval.tokens = YACC_TREE_ARGUMENTS(0, yyvsp[0].expression); ;
    break;}
case 609:
{ yyval.tokens = YACC_TREE_ARGUMENTS(YACC_TREE_ARGUMENTS(0, yyvsp[-2].expressions), yyvsp[0].token); ;
    break;}
case 610:
{ yyval.tokens = YACC_DECL_SPECIFIER_TREE_ARGUMENTS(yyvsp[0].tokens, yyvsp[-1].decl_specifier_id); ;
    break;}
case 612:
{ yyval.token = YACC_TREE_ARGUMENTS(0, yyvsp[0].expression); ;
    break;}
case 615:
{ yyval.token = YACC_TREE_ARGUMENT(yyvsp[0].expression); ;
    break;}
case 616:
{ yyval.token = YACC_TREE_ARGUMENT(yyvsp[-1].expression); ;
    break;}
case 617:
{ yyval.expression = yyvsp[0].decl_specifier_id; ;
    break;}
case 620:
{ yyval.expression = YACC_DECL_SPECIFIER_EXPRESSION(yyvsp[0].expression, yyvsp[-1].decl_specifier_id); ;
    break;}
case 621:
{ yyval.expression = YACC_DECL_SPECIFIER_EXPRESSION(yyvsp[0].expression, yyvsp[-1].decl_specifier_id); ;
    break;}
case 622:
{ yyval.token = YACC_LINED_TOKEN(yyvsp[0].token, yyvsp[-1].line); end_search(yyval.token); ;
    break;}
case 624:
{ yyval.token = yyvsp[0].token; ;
    break;}
case 625:
{ yyval.token = YACC_LINED_TOKEN(yyvsp[0].token, yyvsp[-1].line); end_search(yyval.token); ;
    break;}
case 627:
{ yyval.token = yyvsp[0].token; ;
    break;}
case 628:
{ yyval.token = 0; ;
    break;}
case 629:
{ yyval.token = YACC_TREE_ARGUMENT(YACC_EXPRESSION(0)); ;
    break;}
case 632:
{ yyval.token = YACC_TREE_ARGUMENT(yyvsp[0].expression); ;
    break;}
case 633:
{ yyval.token_statements = YACC_TREE_STATEMENTS(0, yyvsp[-1].tokens); ;
    break;}
case 634:
{ yyval.token_statements = YACC_TREE_STATEMENTS(yyvsp[-2].tokens, yyvsp[-1].token); ;
    break;}
case 635:
{ yyval.token_statements = YACC_TREE_STATEMENTS(yyvsp[-4].tokens, yyvsp[-3].token); YACC_UNBANG(yyvsp[-1].bang, "Bad compound-tree-statement."); ;
    break;}
case 636:
{ yyval.token_statements = YACC_TREE_STATEMENTS(0, yyvsp[-4].tokens); YACC_UNBANG(yyvsp[-1].bang, "Bad compound-tree-statement."); ;
    break;}
case 637:
{ yyval.tokens = YACC_TREE_ARGUMENTS(0, (CxxToken *)0); ;
    break;}
case 638:
{ yyval.tokens = YACC_TREE_ARGUMENTS(yyvsp[-1].tokens, yyvsp[0].token); ;
    break;}
case 639:
{ yyval.tokens = yyvsp[-5].tokens; YACC_UNBANG(yyvsp[-2].bang, "Bad tree-statement."); ;
    break;}
case 640:
{ yyval.token = YACC_TREE_ARGUMENT(yyvsp[0].declaration); ;
    break;}
case 641:
{ yyval.token = YACC_TREE_ARGUMENT(yyvsp[0].token_statements); ;
    break;}
case 642:
{ yyval.token = YACC_TREE_ARGUMENT(yyvsp[0].declaration); ;
    break;}
case 643:
{ yyval.token = YACC_TREE_ARGUMENT(yyvsp[0].declaration); ;
    break;}
case 644:
{ yyval.token = YACC_TREE_ARGUMENT(yyvsp[0].declaration); ;
    break;}
case 645:
{ yyval.token = YACC_TREE_ARGUMENT(yyvsp[-1].declaration); ;
    break;}
case 646:
{ yyval.token = YACC_TREE_ARGUMENT(yyvsp[0].statement); ;
    break;}
case 647:
{ yyval.token = YACC_TREE_ARGUMENT(yyvsp[0].statement); ;
    break;}
case 648:
{ yyval.token = YACC_TREE_ARGUMENT(yyvsp[0].name); ;
    break;}
case 649:
{ yyval.token = YACC_TREE_ARGUMENT(yyvsp[0].declaration); ;
    break;}
case 650:
{ yyval.token = YACC_TREE_ARGUMENT(yyvsp[0].name); ;
    break;}
case 651:
{ yyval.token = YACC_TREE_ARGUMENT(yyvsp[0].name); ;
    break;}
case 652:
{ yyval.token = YACC_TREE_ARGUMENT(yyvsp[0].statement); ;
    break;}
case 653:
{ yyval.token = YACC_TREE_ARGUMENT(yyvsp[0].declaration); ;
    break;}
case 654:
{ yyval.token = YACC_TREE_ARGUMENT(yyvsp[0].declaration); ;
    break;}
case 655:
{ yyval.token = YACC_TREE_ARGUMENT(YACC_META_STATEMENT(yyvsp[0].meta_statement)); ;
    break;}
case 656:
{ yyval.token = YACC_TREE_ARGUMENT(YACC_META_DECLARATION(yyvsp[0].expression)); ;
    break;}
case 657:
{ yyval.token = YACC_TREE_ARGUMENT(YACC_META_DECLARATION(yyvsp[0].expression)); ;
    break;}
case 658:
{ yyval.token = YACC_TREE_ARGUMENT(yyvsp[-1].keyword); ;
    break;}
case 660:
{ yyval.token = YACC_TREE_ARGUMENT(yyvsp[0].expression); ;
    break;}
case 661:
{ yyval.token = YACC_TREE_ARGUMENT(yyvsp[0].declaration); ;
    break;}
case 662:
{ yyval.token = YACC_TREE_ARGUMENT(yyvsp[0].name); ;
    break;}
case 663:
{ yyval.token = YACC_TREE_ARGUMENT(yyvsp[0].function_body); ;
    break;}
case 664:
{ yyval.token = YACC_TREE_ARGUMENT(yyvsp[0].handlers); ;
    break;}
case 665:
{ yyval.token = YACC_TREE_ARGUMENT(YACC_DECL_SPECIFIER_EXPRESSION(yyvsp[0].meta_class, yyvsp[-1].decl_specifier_id)); ;
    break;}
case 666:
{ yyval.token = YACC_TREE_ARGUMENT(yyvsp[0].simple_type_parameter); ;
    break;}
case 667:
{ yyval.token = yyvsp[0].keyword; ;
    break;}
case 668:
{ yyval.token = yyvsp[0].keyword; ;
    break;}
case 669:
{ yyval.token = YACC_TREE_ARGUMENT(yyvsp[0].decl_specifier_id); ;
    break;}
case 670:
{ yyval.token = YACC_TREE_ARGUMENT(yyvsp[0].class_key); ;
    break;}
case 671:
{ yyval.token = YACC_TREE_ARGUMENT(yyvsp[0].class_key); ;
    break;}
case 672:
{ yyval.token = YACC_TREE_ARGUMENT(yyvsp[0].class_key); ;
    break;}
case 673:
{ yyval.token = YACC_TREE_ARGUMENT(yyvsp[0].decl_specifier_id); ;
    break;}
case 674:
{ yyval.token = YACC_TREE_ARGUMENT(yyvsp[0].class_key); ;
    break;}
case 696:
{ yyval.keyword = yyvsp[0].decl_specifier_id; ;
    break;}
case 741:
{ yyval.expression = yyvsp[0].decl_specifier_id; ;
    break;}
case 743:
{ yyval.expression = YACC_EXPRESSIONS(yyvsp[-2].expressions, yyvsp[0].expression); ;
    break;}
case 744:
{ yyval.expression = yyvsp[0].expressions; ;
    break;}
case 746:
{ yyval.expression = YACC_DECL_SPECIFIER_EXPRESSION(yyvsp[0].expression, yyvsp[-1].decl_specifier_id); ;
    break;}
case 747:
{ yyval.subspace = yyvsp[-1].subspace; ;
    break;}
case 748:
{ yyval.subspace = yyvsp[-4].subspace; YACC_UNBANG(yyvsp[-1].bang, "Bad object-statements-clause.");;
    break;}
case 749:
{ yyval.subspace = YACC_SUBSPACE(0, 0); ;
    break;}
case 750:
{ yyval.subspace = YACC_SUBSPACE(yyvsp[-1].subspace, yyvsp[0].declaration); ;
    break;}
case 751:
{ yyval.subspace = yyvsp[-5].subspace; YACC_UNBANG(yyvsp[-2].bang, "Bad object-statement."); ;
    break;}
case 752:
{ yyval.declaration = YACC_LINED_STATEMENT(yyvsp[0].declaration, yyvsp[-1].line); end_search(yyval.declaration); ;
    break;}
case 754:
{ yyval.declaration = yyvsp[0].declaration; ;
    break;}
case 755:
{ yyval.declaration = 0; ;
    break;}
case 756:
{ yyval.declaration = 0; ;
    break;}
case 757:
{ yyval.declaration = yyvsp[0].function_body; ;
    break;}
case 758:
{ yyval.declaration = YACC_INIT_EXPRESSION(yyvsp[-1].initializer_clause); ;
    break;}
case 759:
{ yyval.declaration = YACC_CTOR_EXPRESSION(yyvsp[-2].expressions); ;
    break;}
case 762:
{ yyval.declaration = YACC_FILESPACE_DECLARATION(yyvsp[-1].name); ;
    break;}
case 763:
{ yyval.declaration = YACC_META_STATEMENT(yyvsp[0].meta_statement); ;
    break;}
case 764:
{ yyval.declaration = YACC_META_STATEMENT(yyvsp[0].meta_statement); ;
    break;}
case 765:
{ yyval.declaration = YACC_META_DECLARATION(yyvsp[0].expression); ;
    break;}
case 766:
{ yyval.declaration = YACC_META_DECLARATION(yyvsp[0].expression); ;
    break;}
case 767:
{ yyval.declaration = YACC_DERIVED_CLAUSE(yyvsp[-1].expression, yyvsp[0].declaration); ;
    break;}
case 768:
{ yyval.declaration = YACC_DERIVED_CLAUSE(yyvsp[-4].expression, yyvsp[-1].subspace); ;
    break;}
case 769:
{ yyval.declaration = yyval.declaration = YACC_DERIVED_CLAUSE(yyvsp[-8].expression, yyvsp[-5].subspace); YACC_UNBANG(yyvsp[-2].bang, "Bad object-statement."); ;
    break;}
case 772:
{ yyval.function_body = YACC_CTOR_FUNCTION_BLOCK(0, yyvsp[-1].mem_initializers); ;
    break;}
case 773:
{ yyval.function_body = YACC_USING_FUNCTION_BLOCK(yyvsp[0].function_body, yyvsp[-1].file_ids); ;
    break;}
case 774:
{ yyval.function_body = YACC_SEGMENT_FUNCTION_BLOCK(yyvsp[0].function_body, yyvsp[-1].segment); ;
    break;}
case 775:
{ yyval.segment = YACC_SEGMENT(yyvsp[0].segment, body); ;
    break;}
case 776:
{ yyval.segment = YACC_SEGMENT(yyvsp[0].segment, entry); ;
    break;}
case 777:
{ yyval.segment = YACC_SEGMENT(yyvsp[0].segment, exit); ;
    break;}
case 778:
{ yyval.segment = YACC_SEGMENT(yyvsp[0].segment, post); ;
    break;}
case 779:
{ yyval.segment = YACC_SEGMENT(yyvsp[0].segment, pre); ;
    break;}
case 780:
{ yyval.expression = yyvsp[-1].expression; ;
    break;}
case 781:
{ yyval.name = yyvsp[0].name; ;
    break;}
case 782:
{ yyval.name = yyvsp[0].meta_type; ;
    break;}
case 783:
{ yyval.name = yyvsp[0].decl_specifier_id; ;
    break;}
case 784:
{ yyval.name = yyvsp[-1].name; ;
    break;}
case 785:
{ yyval.name = yyvsp[0].name; ;
    break;}
case 786:
{ yyval.name = YACC_NESTED_ID(yyvsp[-2].name, YACC_DESTRUCTOR_ID(yyvsp[0].name)); ;
    break;}
case 787:
{ yyval.name = YACC_NESTED_ID(yyvsp[-1].name, yyvsp[0].name); ;
    break;}
case 789:
{ yyval.name = YACC_GLOBAL_ID(yyvsp[-1].is_template, yyvsp[0].name); ;
    break;}
case 790:
{ yyval.meta_class = YACC_META_CLASS(yyvsp[-1].name, 0, yyvsp[0].declarations); ;
    break;}
case 791:
{ yyval.meta_class = YACC_META_CLASS(yyvsp[-3].name, yyvsp[-1].base_specifiers, yyvsp[0].declarations); ;
    break;}
case 792:
{ yyval.meta_type = YACC_META_TYPE(yyvsp[0].class_key); ;
    break;}
case 793:
{ yyval.meta_type = YACC_META_TYPE(yyvsp[0].class_key); ;
    break;}
case 794:
{ yyval.meta_type = YACC_META_TYPE(yyvsp[0].class_key); ;
    break;}
case 795:
{ yyval.meta_type = YACC_META_TYPE(yyvsp[0].decl_specifier_id); ;
    break;}
case 796:
{ yyval.meta_type = YACC_META_TYPE(yyvsp[0].class_key); ;
    break;}
case 797:
{ yyval.meta_type = YACC_META_TYPE(yyvsp[0].decl_specifier_id); ;
    break;}
case 798:
{ yyval.meta_type = YACC_META_TYPE(yyvsp[0].built_in_id); ;
    break;}
case 803:
{ yyval.expression = YACC_META_FUNCTION(0, yyvsp[-1].expression, yyvsp[0].token_statements); ;
    break;}
case 804:
{ yyval.expression = YACC_META_FUNCTION('~', yyvsp[-1].expression, yyvsp[0].token_statements); ;
    break;}
case 805:
{ yyval.expression = YACC_DECL_SPECIFIER_EXPRESSION(yyvsp[0].expression, yyvsp[-1].cv_qualifiers); ;
    break;}
case 806:
{ yyval.expression = YACC_DECL_SPECIFIER_EXPRESSION(yyvsp[0].expression, yyvsp[-1].decl_specifier_id); ;
    break;}
case 807:
{ yyval.expression = YACC_DECL_SPECIFIER_EXPRESSION(yyvsp[0].expression, YACC_NOT_STATIC()); ;
    break;}
case 808:
{ yyval.meta_statement = YACC_LINED_STATEMENT(yyvsp[0].meta_statement, yyvsp[-1].line); ;
    break;}
case 809:
{ yyval.meta_statement = YACC_CASE_STATEMENT(yyvsp[-2].expression, yyvsp[0].declaration); ;
    break;}
case 810:
{ yyval.meta_statement = YACC_DEFAULT_STATEMENT(yyvsp[0].declaration); ;
    break;}
case 811:
{ yyval.meta_statement = YACC_DO_WHILE_STATEMENT(yyvsp[-5].declaration, yyvsp[-2].expression); ;
    break;}
case 812:
{ yyval.meta_statement = YACC_IF_STATEMENT(yyvsp[-2].condition, yyvsp[0].declaration, 0); ;
    break;}
case 813:
{ yyval.meta_statement = YACC_IF_STATEMENT(yyvsp[-4].condition, yyvsp[-2].declaration, yyvsp[0].declaration); ;
    break;}
case 814:
{ yyval.meta_statement = YACC_SWITCH_STATEMENT(yyvsp[-2].expression, yyvsp[0].declaration); ;
    break;}
case 815:
{ yyval.meta_statement = YACC_WHILE_STATEMENT(yyvsp[-2].condition, yyvsp[0].declaration); ;
    break;}
case 816:
{ yyval.meta_statement = YACC_FOR_STATEMENT(yyvsp[-5].expression, yyvsp[-4].condition, yyvsp[-2].expression, yyvsp[0].declaration); ;
    break;}
case 817:
{ yyval.meta_statement = yyvsp[0].statement; ;
    break;}
case 818:
{ yyval.expression = yyvsp[0].name; ;
    break;}
case 819:
{ yyval.expression = YACC_TYPED_NAME(yyvsp[-1].meta_type, yyvsp[0].name); ;
    break;}
case 820:
{ yyval.expression = YACC_TYPED_NAME(yyvsp[-1].meta_type, yyvsp[0].name); ;
    break;}
case 822:
{ yyval.expression = YACC_TYPED_NAME(yyvsp[-1].meta_type, yyvsp[0].name); ;
    break;}
case 824:
{ yyval.expression = YACC_THIS_EXPRESSION(); ;
    break;}
case 826:
{ yyval.expression = YACC_TOKENS_EXPRESSION(yyvsp[-1].tokens); ;
    break;}
case 827:
{ yyval.expression = YACC_TREE_CALL_EXPRESSION(yyvsp[-3].expression, yyvsp[-1].tokens); ;
    break;}
case 828:
{ yyval.expression = YACC_ARRAY_EXPRESSION(yyvsp[-2].expression, 0); ;
    break;}
case 831:
{ yyval.expression = YACC_ARRAY_EXPRESSION(yyvsp[-3].expression, yyvsp[-1].expression); ;
    break;}
case 832:
{ yyval.expression = YACC_DOT_EXPRESSION(yyvsp[-2].expression, yyvsp[0].name); ;
    break;}
case 833:
{ yyval.expression = YACC_ARROW_EXPRESSION(yyvsp[-2].expression, yyvsp[0].name); ;
    break;}
case 834:
{ yyval.expression = YACC_POST_INCREMENT_EXPRESSION(yyvsp[-1].expression); ;
    break;}
case 835:
{ yyval.expression = YACC_POST_DECREMENT_EXPRESSION(yyvsp[-1].expression); ;
    break;}
case 837:
{ yyval.expression = YACC_PRE_INCREMENT_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 838:
{ yyval.expression = YACC_PRE_DECREMENT_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 839:
{ yyval.expression = YACC_POINTER_EXPRESSION(yyvsp[-1].pointer_declarator, yyvsp[0].expression); ;
    break;}
case 840:
{ yyval.expression = YACC_POINTER_EXPRESSION(YACC_REFERENCE_DECLARATOR(), yyvsp[0].expression); ;
    break;}
case 841:
{ yyval.expression = YACC_PLUS_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 842:
{ yyval.expression = YACC_MINUS_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 843:
{ yyval.expression = YACC_NOT_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 844:
{ yyval.expression = YACC_COMPLEMENT_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 845:
{ yyval.expression = YACC_SIZEOF_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 849:
{ yyval.expression = YACC_MULTIPLY_EXPRESSION(yyvsp[-2].expression, yyvsp[-1].pointer_declarator, yyvsp[0].expression); ;
    break;}
case 850:
{ yyval.expression = YACC_DIVIDE_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 851:
{ yyval.expression = YACC_MODULUS_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 853:
{ yyval.expression = YACC_ADD_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 854:
{ yyval.expression = YACC_SUBTRACT_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 856:
{ yyval.expression = YACC_SHIFT_LEFT_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 857:
{ yyval.expression = YACC_SHIFT_RIGHT_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 859:
{ yyval.expression = YACC_LESS_THAN_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 860:
{ yyval.expression = YACC_GREATER_THAN_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 861:
{ yyval.expression = YACC_LESS_EQUAL_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 862:
{ yyval.expression = YACC_GREATER_EQUAL_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 864:
{ yyval.expression = YACC_EQUAL_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 865:
{ yyval.expression = YACC_NOT_EQUAL_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 867:
{ yyval.expression = YACC_AND_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 869:
{ yyval.expression = YACC_EXCLUSIVE_OR_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 871:
{ yyval.expression = YACC_INCLUSIVE_OR_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 873:
{ yyval.expression = YACC_LOGICAL_AND_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 875:
{ yyval.expression = YACC_LOGICAL_OR_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 877:
{ yyval.expression = YACC_CONDITIONAL_EXPRESSION(yyvsp[-4].expression, yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 878:
{ yyval.expression = yyvsp[-1].expression; ;
    break;}
case 879:
{ yyval.expression = YACC_OBJECT_SCOPE_EXPRESSION(yyvsp[-2].expression, yyvsp[-1].subspace); ;
    break;}
case 880:
{ yyval.expression = YACC_OBJECT_SCOPE_EXPRESSION(YACC_TYPED_NAME(yyvsp[-3].meta_type, yyvsp[-2].name), yyvsp[-1].subspace); ;
    break;}
case 881:
{ yyval.expression = YACC_TREE_CALL_EXPRESSION(yyvsp[-5].expression, yyvsp[-3].tokens); ;
    break;}
case 882:
{ yyval.expression = YACC_OBJECT_SCOPE_EXPRESSION(YACC_ARRAY_EXPRESSION(yyvsp[-4].expression, 0), yyvsp[-1].subspace); ;
    break;}
case 883:
{ yyval.expression = YACC_OBJECT_SCOPE_EXPRESSION(YACC_ARRAY_EXPRESSION(yyvsp[-5].expression, yyvsp[-3].expression), yyvsp[-1].subspace); ;
    break;}
case 884:
{ yyval.expression = YACC_META_ASSIGNMENT_EXPRESSION(yyvsp[-3].expression, yyvsp[-2].keyword, YACC_LINED_TOKEN(yyvsp[0].token, yyvsp[-1].line)); ;
    break;}
case 885:
{ yyval.expression = YACC_DECL_SPECIFIER_EXPRESSION(yyvsp[0].expression, yyvsp[-1].cv_qualifiers); ;
    break;}
case 886:
{ yyval.expression = YACC_DECL_SPECIFIER_EXPRESSION(yyvsp[0].expression, yyvsp[-1].decl_specifier_id); ;
    break;}
case 887:
{ yyval.expression = YACC_DECL_SPECIFIER_EXPRESSION(yyvsp[0].expression, YACC_NOT_STATIC()); ;
    break;}
case 888:
{ yyval.declaration = YACC_SYNTAX_MACRO_DEFINITION(yyvsp[-5].meta_type, IS_ENCAPSULATED, yyvsp[-4].name, yyvsp[-2].syntax_macro_parameters, yyvsp[0].token_statements); ;
    break;}
case 889:
{ yyval.declaration = YACC_SYNTAX_MACRO_DEFINITION(yyvsp[-7].meta_type, IS_EXPOSED, yyvsp[-6].name, yyvsp[-4].syntax_macro_parameters, yyvsp[0].token_statements); ;
    break;}
case 890:
{ yyval.declaration = YACC_SYNTAX_MACRO_DEFINITION(yyvsp[-4].meta_type, IS_ENCAPSULATED, yyvsp[-3].name, 0, yyvsp[0].token_statements); ;
    break;}
case 891:
{ yyval.declaration = YACC_SYNTAX_MACRO_DEFINITION(yyvsp[-6].meta_type, IS_EXPOSED, yyvsp[-5].name, 0, yyvsp[0].token_statements); ;
    break;}
case 892:
{ yyval.syntax_macro_parameters = YACC_SYNTAX_MACRO_PARAMETERS(0, yyvsp[0].syntax_macro_parameter); ;
    break;}
case 893:
{ yyval.syntax_macro_parameters = YACC_SYNTAX_MACRO_PARAMETERS(yyvsp[-2].syntax_macro_parameters, yyvsp[0].syntax_macro_parameter); ;
    break;}
case 894:
{ yyval.syntax_macro_parameter = YACC_SYNTAX_MACRO_PARAMETER(yyvsp[-1].meta_type, IS_ENCAPSULATED, yyvsp[0].name); ;
    break;}
case 895:
{ yyval.syntax_macro_parameter = YACC_SYNTAX_MACRO_PARAMETER(yyvsp[-3].meta_type, IS_EXPOSED, yyvsp[-2].name); ;
    break;}
case 896:
{ yyval.syntax_macro_parameter = YACC_SYNTAX_MACRO_PARAMETER(0, IS_ENCAPSULATED, yyvsp[0].name); ;
    break;}
case 897:
{ yyval.syntax_macro_parameter = YACC_SYNTAX_MACRO_PARAMETER(0, IS_ENCAPSULATED, yyvsp[0].keyword); ;
    break;}
case 898:
{ yyval.syntax_macro_parameter = YACC_SYNTAX_MACRO_PARAMETER(yyvsp[0].keyword, IS_ENCAPSULATED, 0); ;
    break;}
case 899:
{ yyval.syntax_macro_parameter = YACC_SYNTAX_MACRO_PARAMETER(yyvsp[0].keyword, IS_ENCAPSULATED, 0); ;
    break;}
case 900:
{ yyval.syntax_macro_parameter = YACC_SYNTAX_MACRO_PARAMETER(yyvsp[0].keyword, IS_ENCAPSULATED, 0); ;
    break;}
case 901:
{ yyval.syntax_macro_parameter = YACC_SYNTAX_MACRO_PARAMETER(yyvsp[0].brace, IS_ENCAPSULATED, 0); ;
    break;}
case 902:
{ yyval.syntax_macro_parameter = YACC_SYNTAX_MACRO_PARAMETER(yyvsp[0].keyword, IS_ENCAPSULATED, 0); ;
    break;}
case 903:
{ yyval.syntax_macro_parameter = YACC_SYNTAX_MACRO_PARAMETER(yyvsp[0].keyword, IS_ENCAPSULATED, 0); ;
    break;}
case 904:
{ yyval.syntax_macro_parameter = YACC_SYNTAX_MACRO_PARAMETER(yyvsp[0].keyword, IS_ENCAPSULATED, 0); ;
    break;}
case 905:
{ yyval.syntax_macro_parameter = 0; YACC_UNBANG(yyvsp[-1].bang, "bad syntax-macro-parameter."); ;
    break;}
case 906:
{ yyval.declaration = YACC_INCLUDE_DECLARATION(yyvsp[0].strings, YACC_UTILITY(emit)); ;
    break;}
case 907:
{ yyval.declaration = YACC_INCLUDE_DECLARATION(yyvsp[0].expression, YACC_UTILITY(emit)); ;
    break;}
case 908:
{ yyval.declaration = YACC_INCLUDE_DECLARATION(yyvsp[0].expression, yyvsp[-1].utility); ;
    break;}
case 909:
{ yyval.declaration = YACC_INCLUDE_DECLARATION(yyvsp[0].expression, yyvsp[-1].utility); ;
    break;}
case 914:
{ yyval.declaration = YACC_USING_IMPLEMENTATION_DECLARATION(yyvsp[-1].file_id); ;
    break;}
case 915:
{ yyval.declaration = YACC_USING_INTERFACE_DECLARATION(yyvsp[-1].file_id); ;
    break;}
case 916:
{ yyval.file_id = yyvsp[0].file_id; ;
    break;}
case 917:
{ yyval.file_id = yyvsp[0].file_id; ;
    break;}
case 918:
{ yyval.file_id = yyvsp[0].file_id; ;
    break;}
case 919:
{ yyval.file_id = yyvsp[0].file_id; ;
    break;}
case 920:
{ yyval.file_id = YACC_INPUT_FILE(yyvsp[0].file_id); ;
    break;}
case 921:
{ yyval.file_id = YACC_FILE_ID_INTERFACE(yyvsp[0].name); ;
    break;}
case 922:
{ yyval.declaration = YACC_EXPORT_IMPLEMENTATION_DECLARATION(yyvsp[-1].file_id); ;
    break;}
case 923:
{ yyval.declaration = YACC_EXPORT_INTERFACE_DECLARATION(yyvsp[-1].file_id); ;
    break;}
case 924:
{ yyval.declaration = YACC_EXPORT_ALL_DECLARATION(yyvsp[-1].file_id); ;
    break;}
case 925:
{ yyval.declaration = YACC_EXPORT_NOIMPLEMENTATION_DECLARATION(); ;
    break;}
case 926:
{ yyval.declaration = YACC_EXPORT_UTILITY_DECLARATION(yyvsp[-1].utility); ;
    break;}
case 927:
{ yyval.file_id = yyvsp[0].file_id; ;
    break;}
case 928:
{ yyval.file_id = yyvsp[0].file_id; ;
    break;}
case 929:
{ yyval.file_id = yyvsp[0].file_id; ;
    break;}
case 930:
{ yyval.file_id = yyvsp[0].file_id; ;
    break;}
case 931:
{ yyval.file_id = yyvsp[0].file_id; ;
    break;}
case 932:
{ yyval.file_id = yyvsp[0].file_id; ;
    break;}
case 934:
{ yyval.file_id = YACC_FILE_ID_IMPLEMENTATION(yyvsp[0].name); ;
    break;}
case 936:
{ yyval.file_id = YACC_FILE_ID_INTERFACE(yyvsp[0].name); ;
    break;}
case 937:
{ yyval.file_name = YACC_FILE_NAME(yyvsp[0].strings); ;
    break;}
case 938:
{ yyval.file_name = YACC_FILE_NAME_INTERFACE(yyvsp[-2].file_name); ;
    break;}
case 939:
{ yyval.file_name = YACC_FILE_NAME_IMPLEMENTATION(yyvsp[-2].file_name); ;
    break;}
case 940:
{ yyval.file_name = YACC_FILE_NAME_TEMPLATE(yyvsp[-2].file_name); ;
    break;}
case 941:
{ yyval.file_name = YACC_FILE_NAME_UTILITY(yyvsp[-2].file_name, yyvsp[0].utility); ;
    break;}
case 942:
{ yyval.file_name = YACC_FILE_NAME_GUARD(yyvsp[-4].file_name, yyvsp[0].expression); ;
    break;}
case 943:
{ yyval.file_name = YACC_FILE_NAME_NOGUARD(yyvsp[-2].file_name); ;
    break;}
case 944:
{ yyval.file_name = YACC_FILE_NAME_PATH(yyvsp[-4].file_name, yyvsp[0].expression); ;
    break;}
case 945:
{ yyval.file_name = YACC_FILE_NAME_PREFIX(yyvsp[-4].file_name, yyvsp[0].expression); ;
    break;}
case 946:
{ yyval.file_name = YACC_FILE_NAME_SUFFIX(yyvsp[-4].file_name, yyvsp[0].expression); ;
    break;}
case 949:
{ yyval.name = YACC_ELABORATED_TYPE_SPECIFIER(yyvsp[-1].class_key, yyvsp[0].name); ;
    break;}
case 950:
{ yyval.file_id = YACC_FILE_ID(yyvsp[0].file_name); ;
    break;}
case 951:
{ yyval.file_id = YACC_FILE_ID_IMPLEMENTATION(yyvsp[-2].name); ;
    break;}
case 952:
{ yyval.file_id = YACC_FILE_ID_INTERFACE(yyvsp[-2].name); ;
    break;}
case 953:
{ yyval.file_ids = YACC_FILE_IDS(0, yyvsp[0].file_id); ;
    break;}
case 954:
{ yyval.file_ids = YACC_FILE_IDS(yyvsp[-2].file_ids, yyvsp[0].file_id); ;
    break;}
case 955:
{ yyval.name = YACC_FILESPACE_SPECIFIER(yyvsp[-1].file_name, yyvsp[0].declarations); ;
    break;}
case 956:
{ ;
    break;}
case 957:
{ ;
    break;}
case 958:
{ YACC_UNBANG(yyvsp[-2].bang, "Extra text ignored before '}'."); ;
    break;}
case 959:
{ YACC_UNBANG(yyvsp[-2].bang, "Missing '}'."); ;
    break;}
case 960:
{ YACC_UNBANG(yyvsp[-2].bang, "Missing '}'."); ;
    break;}
case 961:
{ ;
    break;}
case 962:
{ ;
    break;}
case 963:
{ YACC_UNBANG(yyvsp[-1].bang, "Extra text ignored before ';'.");;
    break;}
case 968:
{ yyerrok; advance_search(); ;
    break;}
case 969:
{ yyval.bang = YACC_BANG(); ;
    break;}
case 970:
{ yyval.line = YACC_LINE(); ;
    break;}
case 971:
{ yyval.mark = mark(); ;
    break;}
case 972:
{ yyval.nest = nest(); ;
    break;}
case 973:
{ yyval.line = YACC_LINE(); start_search(false); ;
    break;}
case 974:
{ yyval.line = YACC_LINE(); start_search(true); ;
    break;}
case 975:
{ yyval.utility = YACC_UTILITY_MODE(); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign  */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YY_FogParser_LSP_NEEDED
  yylsp -= yylen;
#endif

#if YY_FogParser_DEBUG != 0
  if (YY_FogParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YY_FogParser_LSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = YY_FogParser_LLOC.first_line;
      yylsp->first_column = YY_FogParser_LLOC.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  YYGOTO(yynewstate);

YYLABEL(yyerrlab)   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++YY_FogParser_NERRS;

#ifdef YY_FogParser_ERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      YY_FogParser_ERROR(msg);
	      free(msg);
	    }
	  else
	    YY_FogParser_ERROR ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YY_FogParser_ERROR_VERBOSE */
	YY_FogParser_ERROR("parse error");
    }

  YYGOTO(yyerrlab1);
YYLABEL(yyerrlab1)   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (YY_FogParser_CHAR == YYEOF)
	YYABORT;

#if YY_FogParser_DEBUG != 0
      if (YY_FogParser_DEBUG_FLAG)
	fprintf(stderr, "Discarding token %d (%s).\n", YY_FogParser_CHAR, yytname[yychar1]);
#endif

      YY_FogParser_CHAR = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;              /* Each real token shifted decrements this */

  YYGOTO(yyerrhandle);

YYLABEL(yyerrdefault)  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) YYGOTO(yydefault);
#endif

YYLABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YY_FogParser_LSP_NEEDED
  yylsp--;
#endif

#if YY_FogParser_DEBUG != 0
  if (YY_FogParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

YYLABEL(yyerrhandle)

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yyerrdefault);

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    YYGOTO(yyerrdefault);

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrpop);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrpop);

  if (yyn == YYFINAL)
    YYACCEPT;

#if YY_FogParser_DEBUG != 0
  if (YY_FogParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = YY_FogParser_LVAL;
#ifdef YY_FogParser_LSP_NEEDED
  *++yylsp = YY_FogParser_LLOC;
#endif

  yystate = yyn;
  YYGOTO(yynewstate);
/* end loop, in which YYGOTO may be used. */
  YYENDGOTO
}

/* END */

#ifndef FOGBRACE_HXX
#include <FogBrace.hxx>
#endif

class CxxSearchContext
{
	NEEDS_A_FRIEND_FOR_GNUC
private:
    CxxSearchContext *_next;
    size_t _index;
    size_t _depth;
    size_t _size;
    YACC_MARK_TYPE _mark;
    bool _enable_type1;
    bool _status[32];
private:
    CxxSearchContext(CxxSearchContext *nextSearch)
        : _next(nextSearch), _index(0), _depth(0), _size(sizeof(_status)/sizeof(_status[0])), _mark(0), _enable_type1(false) {}
    CxxSearchContext(const CxxSearchContext& nextSearch);
    CxxSearchContext& operator=(const CxxSearchContext&);
    bool did_search() const { return _depth > 0 ? true : false; }
    void initialise(YACC_MARK_TYPE markIndex, bool enableType1);
    CxxSearchContext *queue(CxxSearchContext *& listHead);
public:
    bool advance();
    bool is_template();
    YACC_MARK_TYPE mark() const { return _mark; }
private:
    static CxxSearchContext *_current;
    static CxxSearchContext *_free;
public:
    static CxxSearchContext *current() { return _current; }
    static void release();
    static void start(YACC_MARK_TYPE anIndex, bool enableType1);
    static void terminate();
};

CxxSearchContext *CxxSearchContext::_current = 0;
CxxSearchContext *CxxSearchContext::_free = 0;

//
//  Implements a binary search counter, performing the increment at the
//  _index of othe failed search.
//
bool CxxSearchContext::advance()
{
    size_t i = _depth;
    if (i <= 0)
        return false;
    while (--i > _index)
        _status[i] = false;
    while (true)
    {
        if (!_status[i])
        {
            _status[i] = true;
            _index = 0;
            return true;
        }
        if (i <= 0)
            return false;
        _status[i--] = false;
    }
}

void CxxSearchContext::initialise(YACC_MARK_TYPE markIndex, bool enableType1)
{
    _index = 0;
    _depth = 0;
    _mark = markIndex;
    _enable_type1 = enableType1;
}

bool CxxSearchContext::is_template()
{
    if (_index >= _depth)
    {
        if (_depth >= _size)
        {
            ERRMSG("Binary search depth exceeded.");
            return false;
        }
        _status[_depth++] = false;
    }
    return _status[_index++] ? false : true;
}

//
//  Put this element onto listHead, returning element under this one.
//
CxxSearchContext *CxxSearchContext::queue(CxxSearchContext *& listHead)
{
    CxxSearchContext *oldNext = _next;
    _next = listHead;
    listHead = this;
    return oldNext;
}

//
//  Release the current search buffer.
//
void CxxSearchContext::release()
{
    if (_current)
        _current = _current->queue(_free);
}

void CxxSearchContext::start(YACC_MARK_TYPE anIndex, bool enableType1)
{
    if (!_free)
        _current = new CxxSearchContext(_current);
    else
        _free = _free->queue(_current);
    _current->initialise(anIndex, enableType1);
}

//
//  Release all buffers to avoid memory leaks.
//
void CxxSearchContext::terminate()
{
    if (_current)
        delete _current;
    while (_free)
    {
        _free = _free->queue(_current);
        delete _current;
    }
}

TYPEINFO_SINGLE(FogParser, Super)

FogParser::~FogParser()
{
    CONDMSG(YY_FogParser_DEBUG_FLAG, "Exiting " << title() << " parser.\n");
    if (_bang)
        raw_error("BUG - exited parser with errors suppressed.");
}

//
//  Advance the binary search of template attempts. Rewinds and forces '+' into the input sequence
//  to proceed with the search. Rewinds and forces '-' to terminate it. Also forces a '#' that may then
//  be used to initiate error propagation.
//
void FogParser::advance_search()
{
    check_lookahead(yychar);
    remark(CxxSearchContext::current()->mark());
    if (CxxSearchContext::current() && CxxSearchContext::current()->advance())
        queue(FogTokenType::get_character('+'));
    else
    {
        queue(FogTokenType::get_character('#'));
        queue(FogTokenType::get_character('-'));
    }
    check_lookahead(yychar);
}

//
//  Complete a search, releasing the search context object and popping a mark off the stack.
//
void FogParser::end_search(FogToken *aToken)
{
    check_lookahead(yychar);
    CxxSearchContext::release();
    unmark(aToken);
    check_lookahead(yychar);
}

void FogParser::make_result(FogToken *aResult) { set_result(aResult, yychar && (yychar != YYEMPTY)); }

//
//  Mark the current context.
//
//  It is possible, in principle to permit a lookahead to occur concurrently with a mark as in:
//      production:     KEYWORD ...
//          |           mark something_complex
//  if KEYWORD cannot occur at the start of something_complex, however the necessary unget of the
//  lookahead potentially conflicts with an unget as a result of a $xxx peeking for a ( and so the
//  need to unget to mark correctly is diagnosed, although correct functionality results unless
//  the mark is followed by a $ expression unget.
//
//  Wrong. The possibility of multiple function bodies combined with the lack of a guaranteed ;
//  means that a lookahead is necessary at the end of any function declaration and so there is no
//  way to stop a mark with lookahead on the following statement. Since that cannot be avoided there
//  is a small benefit to be gained by not marking when the leading token makes the context clear.
//
//  The multiple mark problem is resolved by LexerRecorder and LexerInput backing up over unget's that
//  match prior output, avoiding the need for an unget buffer large than one element.
//
//  Well, that was the principle. Making the unget buffers unlimited avoids constraints.
//
YACC_MARK_TYPE FogParser::mark()
{
    check_lookahead(yychar);
    YACC_MARK_TYPE p = Super::mark(yychar != YYEMPTY);
    yyclearin;
    _bang++;
    check_lookahead(yychar);
    return p;
}

//
//  If it is appropriate to do type I function parameter parsing perform a mark and force a '+' token
//  into the input stream. Otherwise just force a '-' token in.
//
YACC_MARK_TYPE FogParser::mark_type1()
{
    check_lookahead(yychar);
//  if (!CxxSearchContext::current() && !tokenMarkDepth)    // No Type I's in statements or argument lists
//  {
//      primed_tokens[0] = &FogTokenType::get_character('+');
//      primed_tokens[1] = PARSE_DOT yylval.token;
//      return mark();
//  }
//  else
    {
        if (yychar != YYEMPTY)
            queue(*yylval.token);
        queue(FogTokenType::get_character('-'));
        yyclearin; 
        check_lookahead(yychar);
        return 0;           // Never used.
    }
}

//
//  Pop a bang context off the error suppression stack, restoring the context of a push_bang.
//
void FogParser::pop_bang(YACC_BANG_TYPE bangValue)
{
    check_lookahead(yychar);
    _bang = bangValue;
}

//
//  Push a bang context onto the error suppression stack, returning the context for restoration by pop_bang.
//
YACC_BANG_TYPE FogParser::push_bang()
{
    check_lookahead(yychar);
    return _bang++;
}

//
//  Reposition the input to restart at the position returned by a mark().
//
void FogParser::remark(YACC_MARK_TYPE anIndex)
{
    check_lookahead(yychar);
    Super::remark(anIndex);
    yyclearin;
    check_lookahead(yychar);
}

//
//  Reposition the input to restart at the position returned by a mark().
//
void FogParser::remark_type1(YACC_MARK_TYPE anIndex)
{
    remark(anIndex);
}
    
//
//  Rewind the input stream back to anIndex and force a : prior to resuming input.
//
void FogParser::rewind_colon(YACC_MARK_TYPE anIndex, const FogToken *aToken)
{
    check_lookahead(yychar);
    FogTokenRefToConst theToken(aToken);            // Prevent premature demise.
    remark(anIndex);
    unmark(aToken);
    queue(FogTokenType::get(FogTokenType::character(':')));
    check_lookahead(yychar);
}

//
//  Start a new binary search over the template/arithmetic alternative parses of a statement.
//  Marks the current position and saves it in a binary search context maintained on a private stack.
//
void FogParser::start_search(bool enableType1)
{
    check_lookahead(yychar);
    CxxSearchContext::start(mark(), enableType1);
    check_lookahead(yychar);
}

//
//  Determine whether the just parsed < should be interpreted as a template or arithmetic operator.
//  The implementation here interacts with a binary search to traverse all possibilities in
//  multiple passes. The search proceeds by branch and bound presuming the template interpretation.
//  A '+' token is forced into the input stream to take the template interpretation. A '-' token
//  otherwise.
//
//  An alternate implementation that keeps track of scopes may interact with semantic knowledge to make
//  the correct decision directly.
//
void FogParser::template_test()
{
    check_lookahead(yychar);
    if (!CxxSearchContext::current() || CxxSearchContext::current()->is_template())
        queue(FogTokenType::get_character('+'));
    else
    {
        queue(FogTokenType::get_character('<'));
        queue(FogTokenType::get_character('-'));
    }
    check_lookahead(yychar);
}

void FogParser::terminate() { CxxSearchContext::terminate(); }

void FogParser::unmark(const FogToken *aToken)
{
    check_lookahead(yychar);
    if (_bang)
        _bang--;
    else
        raw_error("BUG - should not unmark with 0 bang.");
    Super::unmark(aToken, yychar != YYEMPTY);
    check_lookahead(yychar);
}

//
//  Pass msg to the lexer to get a sensible error message.
//
void FogParser::yyerror(const char *msg)
{
    if (_bang <= 0)
        error(msg);
}

//
//  Get the next token.
//
int FogParser::yylex()
{
    check_lookahead(yychar);
    yylval.token = Super::yylex();
    check_lookahead(yychar);
    if (yylval.token)
        return yylval.token->token_type_enum();
    if (_bang <= 0)
        return 0;
    return '#';                         // Extend file to provoke error recovery through nested unterminated { etc.
}

//
//  Pass msg to the lexer to get a sensible warning message.
//
void FogParser::yywarn(const char *msg)
{
    if (_bang <= 0)
        warning(msg);
}
/*EndDiscard*/
