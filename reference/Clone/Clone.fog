
/*
In languages such as Smalltalk, creating a copy of an object presents no problem,
since there is direct language support. In C++, creating a copy of an object whose
type is known at compile-time makes use of the copy constructor. However when
the type is not statically known, the programmer must provide support code.
Stroustrup on p424 of [Stroustrup97] refers to this support code as a virtual
constructor. The technique is also referred to a cloning and forms part of the
Prototype pattern [Gamma95].
The support code requires that every concrete 1 class implements a virtual
function to create a clone of itself.
	class RootClass {
		//...
		public:
		virtual RootClass *clone() const = 0;
	};
	class IntermediateClass : public RootClass {
		//...
	};
	class ConcreteClass : public IntermediateClass {
		//...
		public:
		virtual RootClass *clone() const;
	};
	RootClass *ConcreteClass::clone() const {
		return new ConcreteClass(*this);
	}
	
Invocation of the virtual function upon an object of unknown type therefore invokes
the appropriate class-specific method to create the clone.
const RootClass& someObject = ...;
	RootClass *clonedObject = someObject.clone();

Implementation of this idiom requires contributions to the interface and to the
implementation of each concrete class. These will often be in different files,
because of the need to avoid excess include file dependencies. Observance of the
protocol is largely enforced by the use of a pure virtual function. However an
inaccurate implementation can arise through failing to create an instance of the
correct class, or through failing to implement clone when one concrete class
inherits from another concrete class.
A FOG meta-function using a derivation rule can generate all derived class code
automatically
*/

auto declaration Prototype() {
	public virtual $Scope *clone() const = 0 :{
		derived(!Scope.is_pure()) { return new @{Scope}(*this); };
	};
}

auto declaration Ctor() {
	@{Scope} () :{derived(!Scope.is_pure()) {}}
}

auto statement CopyContents() {
	auto if (!Super.is_pure())
		${Super} :: operator=(src);
	auto for (iterator i = ${${Scope}::variables()}; i; ++i) {
		auto if (!i->is_static())
			$i->name() = src . $i->name() ;
	}
}

auto declaration CtorCopy() {
	@{Scope} (const @{Scope}& src) :{
		derived(!Scope.is_pure()) {
			$CopyContents();
		}
	}
}

auto declaration OperatorAssign() {
	void operator= (const @{Scope}& src) :{
		derived(!Scope.is_pure()) {
			$CopyContents();
		}
	}
}

class RootClass {
	
	public:
	$Ctor();
	$CtorCopy();
	$OperatorAssign();
	$Prototype();
};

class IntermediateClass : public RootClass {
	int ic0, ic1;
	double ic2;
	
};

class ConcreteClass : public IntermediateClass {
	int cc0;
	double cc1;
	
};







// Rest are unrelated testing


// Some class variable must be declared or typedef'd for the header to be included
auto statement HiddenUsage1(identifier cls_name) {
	typedef $cls_name _;
}

struct CloneExample {
	$HiddenUsage1(ConcreteClass);
	
	static int Main() {
		ConcreteClass src;
		ConcreteClass* dst = new ConcreteClass(src);
		src = *dst;
		delete dst;
		return 0;
	}
};




auto statement GuiAppMain(identifier cls_name) {
	$cls_name __main;
	!inline int main() {
		return __main.Main();
	}
}

$GuiAppMain(CloneExample);

