
#ifndef PRIMERRNO_HXX
#define PRIMERRNO_HXX


#if !defined(NO_PRIM_STREAMS)


#endif

//  
//  		PrimErrNo defines error numbers for all errors and warnings generated by the Prim library,
//  		and defines an extensible logging protocol for use by other libraries.
//  
class PrimErrNo
{
public:
 //  
 //  	PrimErrNo::PrimErrSeq enumerates the library code numbers. Derived classes should start
 //  	their library codes at NEXT.
 //  
 enum PrimErrSeq { PRIM, NEXT };
 //  
 //  	PrimErrNo::PrimErrSeq enumerates the possible severities of a message.
 //  
 #undef ERROR
 enum PrimErrSev { DIAGNOSTIC, WARNING, ERROR };
 //  
 //  	PrimErrNo::PrimErrNum enumerates all the messages generated by the Prim library.
 //  
 enum PrimErrNum
 {
  BAD_ENUM,      /*   Illegal enumeration index. */
  BAD_FLOAT_OP,     /*   Attempted to use no-floating point operator on floating types. */
  BAD_PARSE,      /*   Inconsistent/duplicate PrimComParse token. */
  BAD_PROMOTE,     /*   PrimNumber failed to promote operands to compatibility. */
  BAD_TOKEN,      /*   Bad argument to PrimComParse::removeToken. */
  BAD_TYPE_ORDER,     /*   Run-time type checking tables misordered. */
  BAD_ZERO,      /*   Attempted to use 0 as the LHS of an expression. */
  MISSING_TOKEN,     /*   Required command line token missing. */
  NO_MEM,       /*   Memory allocation failure. */
  UNKNOWN       /*   Undiagnosed error */
 };
 static void generate_message(int aMessageCode);
 //  
 //  	Generate the aMessageNumber message from the library identified as aLibCode with the
 //  	message severity aSeverity.
 //  
 inline static void generate_message(int aLibCode, PrimErrSev aSeverity, int aMessageNumber)
  { generate_message((aLibCode << 12) | (aMessageNumber << 2) | aSeverity); }
};

#ifndef NO_PRIM_STREAMS
#define PRIMCOND(flag, no, msg) CONDMSG(flag, msg)
#define PRIMDIA(no, msg) DIAMSG(msg)
#define PRIMERR(no, msg) ERRMSG(msg)
#define PRIMWRN(no, msg) WRNMSG(msg)
#else
#define PRIMCOND(flag, no, msg) do { if (flag) \
  PrimErrNo::generate_message(PrimErrNo::PRIM, PrimErrNo::DIAGNOSTIC, PrimErrNo:: no); } while (false)
#define PRIMDIA(no, msg) PrimErrNo::generate_message(PrimErrNo::PRIM, PrimErrNo::DIAGNOSTIC, PrimErrNo:: no)
#define PRIMERR(no, msg) PrimErrNo::generate_message(PrimErrNo::PRIM, PrimErrNo::ERROR, PrimErrNo:: no)
#define PRIMWRN(no, msg) PrimErrNo::generate_message(PrimErrNo::PRIM, PrimErrNo::WARNING, PrimErrNo:: no)
#endif

#endif
 
