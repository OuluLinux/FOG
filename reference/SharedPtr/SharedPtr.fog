

/*

	The shared_ptr<> method might be better in many cases, but if are used to make typedefs like
	"typedef shared_ptr<some_class> ref_some_class;", then this method is equivalent.
	
	
*/

class RefCount {
private:
	mutable unsigned int shares;
	
public:
	RefCount() : shares(1) {}
	RefCount(const RefCount&) : shares(1) {}
	RefCount& operator=(const RefCount&) { return *this; }
	~RefCount() { /* ASSERT(_shares == 1); */ }
	bool Dec() const { if (shares == 1) return false; ((unsigned int&)shares)--; return true; }
	void Inc() const { ((unsigned int&)shares)++; }
	unsigned int GetRefCount() const { return shares; }
};


auto declaration RefCount::Install() {
	auto if (!Builtin::Defined(has_reference_count)) {
		auto bool has_reference_count = true;
		private mutable RefCount shares;
		public void Inc() const { shares.Inc(); }
		public void Dec() const {
			if (!shares.Dec())
				delete ($Scope *)this;
		}
		public int GetRefCount() {return shares.GetRefCount();}
		friend inline void Dec(const $Scope *anObject) { if (anObject) anObject->Dec(); }
	}
}

auto statement HaveRef() {
	$RefCount::Install();
	
	public class Ref {
		$${Scope}* obj = 0;
	public:
		Ref() {}
		Ref(const Ref& r) {obj = r.obj; obj->Inc();}
		Ref($${Scope} * obj) : obj(obj) {}
		~Ref() {Clear();}
		void Clear() {if (obj) obj->Dec(); obj = 0;}
		bool IsEmpty() const {return obj == 0;}
		Ref& operator=(const Ref& r) {if (obj) obj->Dec(); obj = r.obj; obj->Inc(); return *this;}
		$${Scope}* operator->() {return obj;}
		const $${Scope}* operator->() const {return obj;}
		int GetRefCount() const {if (obj) return obj->GetRefCount(); return 0;}
	};
}

class Core;

public static void Core::ASSERT(bool b) {
	if (!b) {int* i = 0; *i = 0;}
}


class ApplicationClass {
	$HaveRef();
	
public:
	int i = 0;
	void SomeCall() {i++;}
};

struct SharedPtrExample : Core {
	typedef ApplicationClass _;
	
	int Main() {
		ApplicationClass::Ref some_var = new ApplicationClass();
		some_var->SomeCall();
		ApplicationClass::Ref other_var;
		other_var = some_var;
		
		ASSERT(other_var.GetRefCount() == 2);
	}
};

SharedPtrExample app;

!inline int main() {return app.Main();}
