#define YY_FogHashParser_h_included
#define YY_USE_CLASS

/*  A Bison++ parser, made from FogHashParser.y  */

 /* with Bison++ version bison++ Version 1.21.9-1, adapted from GNU bison by coetmeur@icdc.fr
Maintained by Magnus Ekdahl <magnus@debian.org>
  */

#define YY_USE_CLASS
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Bob Corbett and Richard Stallman

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  

   As a special exception, when this file is copied by Bison++ into a
   Bison++ output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison, and has been in Bison++ since 1.21.9.  

*/

/* HEADER SECTION */
#if defined( _MSDOS ) || defined(MSDOS) || defined(__MSDOS__) 
 #define __MSDOS_AND_ALIKE
#endif

#if defined(_WINDOWS) && defined(_MSC_VER)
 #define __HAVE_NO_ALLOCA
 #define __MSDOS_AND_ALIKE
#endif

#ifndef alloca
 #if defined( __GNUC__)
  #define alloca __builtin_alloca

 #elif (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc)  || defined (__sgi)
  #include <alloca.h>

 #elif defined (__MSDOS_AND_ALIKE)
  #include <malloc.h>
  #ifndef __TURBOC__
   /* MS C runtime lib */
   #define alloca _alloca
  #endif

 #elif defined(_AIX)
  /* pragma must be put before any C/C++ instruction !! */
  #pragma alloca
  #include <malloc.h>

 #elif defined(__hpux)
  #ifdef __cplusplus
   extern "C" {
     void *alloca (unsigned int);
   };
  #else /* not __cplusplus */
   void *alloca ();
  #endif /* not __cplusplus */

 #endif /* not _AIX  not MSDOS, or __TURBOC__ or _AIX, not sparc.  */
#endif /* alloca not defined.  */

#ifdef c_plusplus
 #ifndef __cplusplus
  #define __cplusplus
 #endif
#endif

#ifdef __cplusplus
 #ifndef YY_USE_CLASS
/*#warning "For C++ its recomended to use bison++, otherwise classes won't be generated"*/
 #endif
#else
 #ifndef __STDC__
  #define const
 #endif
 #ifdef YY_USE_CLASS
  #error "This is a C++ header generated by bison++, please use a C++ compiler!"
 #endif
#endif

#include <stdio.h>
#define YYBISON 1  
#define YY_FogHashParser_DEBUG  1
#define YY_FogHashParser_ENUM_TOKEN  FogHashParserEnums
#define YY_FogHashParser_STYPE  FogParserValue
#define YY_FogHashParser_INHERIT  : public PrimPrint
#define YY_FogHashParser_MEMBERS  \
	FogLexerMacro& _lexer; \
	bool _truth; \
	bool _primed; \
	FogTokenContext _context; \
	PrimAdopted<PrimOstrstream> _s; \
	PrimAdopted<PrimIdList> _formals; \
	PrimIdHandle _id; \
	size_t _line; \
	FogStringRefToConst _string; \
	FogTokensRef _toks; \
	const FogLexerState& _lexer_state; \
private: \
	void invoke(const FogKeyword& anId, bool canBeDEFINED); \
	inline bool is_defined(const FogKeyword& anId); \
	const FogLexerState& set_state(FogTokenType::TokenType tokenType); \
	void start_define(const FogKeyword *anId); \
public: \
	virtual ~FogHashParser(); \
	const PrimIdList *formals() const { return _formals.get(); } \
	const PrimId& id() const { return *_id; } \
	size_t line_number() const { return _line; } \
	PrimOstrstream *stream() { return _s.get(); } \
	const PrimId& string_id() const { return _string->bin_id(); } \
	FogTokens& tokens() const { return *_toks; } \
	bool truth() const { return _truth; }
#define YY_FogHashParser_CONSTRUCTOR_PARAM  FogLexerMacro& aLexer, const FogTokenContext& startContext
#define YY_FogHashParser_CONSTRUCTOR_INIT  : \
	_lexer(aLexer), \
	_truth(true), \
	_primed(true), \
	_context(startContext), \
	_line(0), \
	_lexer_state(set_state(startContext.token().pp_token_type_enum()))
#define YY_FogHashParser_CONSTRUCTOR_CODE  \
	YY_FogHashParser_DEBUG_FLAG = Fog::debug_yacc(); \
	CONDMSG(YY_FogHashParser_DEBUG_FLAG || Fog::debug_lex2hash(), \
		"\nStarting # directive parser.");

#include <Fog/FogIncludeAll.h>
/* %{ and %header{ and %union, during decl */
#define YY_FogHashParser_BISON 1

#ifndef YY_FogHashParser_COMPATIBILITY
 #ifndef YY_USE_CLASS
  #define  YY_FogHashParser_COMPATIBILITY 1
 #else
  #define  YY_FogHashParser_COMPATIBILITY 0
 #endif
#endif

#if YY_FogHashParser_COMPATIBILITY != 0
 /* backward compatibility */
 #ifdef YYLTYPE
  #ifndef YY_FogHashParser_LTYPE
   #define YY_FogHashParser_LTYPE YYLTYPE
  #endif
 #endif
/* Testing alternative bison solution
   /#ifdef YYSTYPE*/
#ifndef YY_FogHashParser_STYPE 
   #define YY_FogHashParser_STYPE YYSTYPE
#endif
/*#endif*/
 #ifdef YYDEBUG
  #ifndef YY_FogHashParser_DEBUG
   #define  YY_FogHashParser_DEBUG YYDEBUG
  #endif
 #endif
 
 /* use goto to be compatible */
 #ifndef YY_FogHashParser_USE_GOTO
  #define YY_FogHashParser_USE_GOTO 1
 #endif
#endif

/* use no goto to be clean in C++ */
#ifndef YY_FogHashParser_USE_GOTO
 #define YY_FogHashParser_USE_GOTO 0
#endif

#ifndef YY_FogHashParser_PURE
/*  YY_FogHashParser_PURE */
#endif

/* section apres lecture def, avant lecture grammaire S2 */
/* prefix */
#ifndef YY_FogHashParser_DEBUG
#define YY_FogHashParser_DEBUG 1
/* YY_FogHashParser_DEBUG */
#endif


#ifndef YY_FogHashParser_LSP_NEEDED
 /* YY_FogHashParser_LSP_NEEDED*/
#endif



/* DEFAULT LTYPE*/
#ifdef YY_FogHashParser_LSP_NEEDED
#ifndef YY_FogHashParser_LTYPE
#ifndef BISON_YYLTYPE_ISDECLARED
#define BISON_YYLTYPE_ISDECLARED
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#endif
#define YY_FogHashParser_LTYPE yyltype
#endif
#endif
/* DEFAULT STYPE*/
      /* We used to use `unsigned long' as YY_FogHashParser_STYPE on MSDOS,
	 but it seems better to be consistent.
	 Most programs should declare their own type anyway.  */

#ifndef YY_FogHashParser_STYPE
#define YY_FogHashParser_STYPE int
#endif
/* DEFAULT MISCELANEOUS */
#ifndef YY_FogHashParser_PARSE
#define YY_FogHashParser_PARSE yyparse
#endif
#ifndef YY_FogHashParser_LEX
#define YY_FogHashParser_LEX yylex
#endif
#ifndef YY_FogHashParser_LVAL
#define YY_FogHashParser_LVAL yylval
#endif
#ifndef YY_FogHashParser_LLOC
#define YY_FogHashParser_LLOC yylloc
#endif
#ifndef YY_FogHashParser_CHAR
#define YY_FogHashParser_CHAR yychar
#endif
#ifndef YY_FogHashParser_NERRS
#define YY_FogHashParser_NERRS yynerrs
#endif
#ifndef YY_FogHashParser_DEBUG_FLAG
#define YY_FogHashParser_DEBUG_FLAG yydebug
#endif
#ifndef YY_FogHashParser_ERROR
#define YY_FogHashParser_ERROR yyerror
#endif

#ifndef YY_FogHashParser_PARSE_PARAM
 #ifndef YY_USE_CLASS
  #ifdef YYPARSE_PARAM
   #define YY_FogHashParser_PARSE_PARAM void* YYPARSE_PARAM 
  #else
   #ifndef __STDC__
    #ifndef __cplusplus
     #define YY_FogHashParser_PARSE_PARAM
    #endif
   #endif
  #endif
 #endif
 #ifndef YY_FogHashParser_PARSE_PARAM
  #define YY_FogHashParser_PARSE_PARAM void
 #endif
#endif

#if YY_FogHashParser_COMPATIBILITY != 0
/* backward compatibility */
#ifdef YY_FogHashParser_LTYPE
#ifndef YYLTYPE
#define YYLTYPE YY_FogHashParser_LTYPE
#else
/* WARNING obsolete !!! user defined YYLTYPE not reported into generated header */
#endif
#endif

/* Removed due to bison compabilityproblems
/#ifndef YYSTYPE
/#define YYSTYPE YY_FogHashParser_STYPE
/#else*/
/* WARNING obsolete !!! user defined YYSTYPE not reported into generated header */
/*#endif*/

#ifdef YY_FogHashParser_PURE
#  ifndef YYPURE
#    define YYPURE YY_FogHashParser_PURE
#  endif
#endif

#ifdef YY_FogHashParser_DEBUG
#  ifndef YYDEBUG
#    define YYDEBUG YY_FogHashParser_DEBUG 
#  endif
#endif

#ifndef YY_FogHashParser_ERROR_VERBOSE
 #ifdef YYERROR_VERBOSE
  #define YY_FogHashParser_ERROR_VERBOSE YYERROR_VERBOSE
 #endif
#endif

#ifndef YY_FogHashParser_LSP_NEEDED
#  ifdef YYLSP_NEEDED
#    define YY_FogHashParser_LSP_NEEDED YYLSP_NEEDED
#  endif
#endif

#endif

#ifndef YY_USE_CLASS
/* TOKEN C */
#define	ASM	258
#define	AUTO	259
#define	BREAK	260
#define	CASE	261
#define	CATCH	262
#define	CLASS	263
#define	CONST	264
#define	CONST_CAST	265
#define	CONTINUE	266
#define	DEFAULT	267
#define	DELETE	268
#define	DO	269
#define	DYNAMIC_CAST	270
#define	ELSE	271
#define	ENUM	272
#define	EXPLICIT	273
#define	EXPORT	274
#define	EXTERN	275
#define	FALSE	276
#define	FOR	277
#define	FRIEND	278
#define	GOTO	279
#define	IF	280
#define	INLINE	281
#define	MUTABLE	282
#define	NAMESPACE	283
#define	NEW	284
#define	OPERATOR	285
#define	PRIVATE	286
#define	PROTECTED	287
#define	PUBLIC	288
#define	REGISTER	289
#define	REINTERPRET_CAST	290
#define	RETURN	291
#define	SIZEOF	292
#define	STATIC	293
#define	STATIC_CAST	294
#define	STRUCT	295
#define	SWITCH	296
#define	TEMPLATE	297
#define	THIS	298
#define	THROW	299
#define	TRUE	300
#define	TRY	301
#define	TYPEDEF	302
#define	TYPEID	303
#define	TYPENAME	304
#define	UNION	305
#define	USING	306
#define	VIRTUAL	307
#define	VOLATILE	308
#define	WHILE	309
#define	ELLIPSIS	310
#define	SCOPE	311
#define	SHL	312
#define	SHR	313
#define	EQ	314
#define	NE	315
#define	LE	316
#define	GE	317
#define	LOG_AND	318
#define	LOG_OR	319
#define	INC	320
#define	DEC	321
#define	ARROW	322
#define	ARROW_STAR	323
#define	DOT_STAR	324
#define	ASS_ADD	325
#define	ASS_AND	326
#define	ASS_DIV	327
#define	ASS_MOD	328
#define	ASS_MUL	329
#define	ASS_OR	330
#define	ASS_SHL	331
#define	ASS_SHR	332
#define	ASS_SUB	333
#define	ASS_XOR	334
#define	BuiltInTypeSpecifier	335
#define	CharacterLiteral	336
#define	Identifier	337
#define	MetaType	338
#define	NewLine	339
#define	NumberLiteral	340
#define	StringLiteral	341
#define	TreeLiteral	342
#define	ERROR	343
#define	NIL	344
#define	RAMMARG	345
#define	BODY	346
#define	DERIVED	347
#define	EMIT	348
#define	ENTRY	349
#define	EXIT	350
#define	FILE	351
#define	FROZEN	352
#define	GUARD	353
#define	IMPLEMENTATION	354
#define	INCLUDE	355
#define	INTERFACE	356
#define	NOGUARD	357
#define	NOIMPLEMENTATION	358
#define	OVERLOAD	359
#define	PATH	360
#define	POOL	361
#define	POST	362
#define	PRE	363
#define	PREFIX	364
#define	PURE	365
#define	SUFFIX	366
#define	UTILITY	367
#define	ALL	368
#define	PLACEHOLDER	369
#define	PLACEMENT	370
#define	NOAUTO	371
#define	HASH_BLANK	372
#define	HASH_DEFINE	373
#define	HASH_ELIF	374
#define	HASH_ELSE	375
#define	HASH_ENDIF	376
#define	HASH_ERROR	377
#define	HASH_IF	378
#define	HASH_IFDEF	379
#define	HASH_IFNDEF	380
#define	HASH_INCLUDE	381
#define	HASH_LINE	382
#define	HASH_PRAGMA	383
#define	HASH_UNDEF	384
#define	HASH_HASH	385
#define	DI_HASH_HASH	386
#define	DI_HASH	387
#define	DI_SQUARE	388
#define	DI_ERAUQS	389
#define	DI_ECARB	390
#define	DEFINED	391
#define	DO_FUNCTION	392
#define	MacroId	393
#define	Punct	394
#define	Text	395
#define	SHIFT_THERE	396
#define	REDUCE_HERE_MOSTLY	397
#define	REDUCE_HERE	398
#define	BOOL	399
#define	CHAR	400
#define	DOUBLE	401
#define	FLOAT	402
#define	INT	403
#define	LONG	404
#define	SHORT	405
#define	SIGNED	406
#define	UNSIGNED	407
#define	VOID	408
#define	WCHAR_T	409
#define	IntegerLiteral	410
#define	FloatingLiteral	411

 /* #defines tokens */
#else
/* CLASS */
#ifndef YY_FogHashParser_CLASS
#define YY_FogHashParser_CLASS FogHashParser
#endif
#ifndef YY_FogHashParser_INHERIT
#define YY_FogHashParser_INHERIT
#endif
#ifndef YY_FogHashParser_MEMBERS
#define YY_FogHashParser_MEMBERS 
#endif
#ifndef YY_FogHashParser_LEX_BODY
#define YY_FogHashParser_LEX_BODY  
#endif
#ifndef YY_FogHashParser_ERROR_BODY
#define YY_FogHashParser_ERROR_BODY  
#endif
#ifndef YY_FogHashParser_CONSTRUCTOR_PARAM
#define YY_FogHashParser_CONSTRUCTOR_PARAM
#endif
#ifndef YY_FogHashParser_CONSTRUCTOR_CODE
#define YY_FogHashParser_CONSTRUCTOR_CODE
#endif
#ifndef YY_FogHashParser_CONSTRUCTOR_INIT
#define YY_FogHashParser_CONSTRUCTOR_INIT
#endif
/* choose between enum and const */
#ifndef YY_FogHashParser_USE_CONST_TOKEN
#define YY_FogHashParser_USE_CONST_TOKEN 0
/* yes enum is more compatible with flex,  */
/* so by default we use it */ 
#endif
#if YY_FogHashParser_USE_CONST_TOKEN != 0
#ifndef YY_FogHashParser_ENUM_TOKEN
#define YY_FogHashParser_ENUM_TOKEN yy_FogHashParser_enum_token
#endif
#endif

class YY_FogHashParser_CLASS YY_FogHashParser_INHERIT
{
public: 
#if YY_FogHashParser_USE_CONST_TOKEN != 0
/* static const int token ... */
static const int ASM;
static const int AUTO;
static const int BREAK;
static const int CASE;
static const int CATCH;
static const int CLASS;
static const int CONST;
static const int CONST_CAST;
static const int CONTINUE;
static const int DEFAULT;
static const int DELETE;
static const int DO;
static const int DYNAMIC_CAST;
static const int ELSE;
static const int ENUM;
static const int EXPLICIT;
static const int EXPORT;
static const int EXTERN;
static const int FALSE;
static const int FOR;
static const int FRIEND;
static const int GOTO;
static const int IF;
static const int INLINE;
static const int MUTABLE;
static const int NAMESPACE;
static const int NEW;
static const int OPERATOR;
static const int PRIVATE;
static const int PROTECTED;
static const int PUBLIC;
static const int REGISTER;
static const int REINTERPRET_CAST;
static const int RETURN;
static const int SIZEOF;
static const int STATIC;
static const int STATIC_CAST;
static const int STRUCT;
static const int SWITCH;
static const int TEMPLATE;
static const int THIS;
static const int THROW;
static const int TRUE;
static const int TRY;
static const int TYPEDEF;
static const int TYPEID;
static const int TYPENAME;
static const int UNION;
static const int USING;
static const int VIRTUAL;
static const int VOLATILE;
static const int WHILE;
static const int ELLIPSIS;
static const int SCOPE;
static const int SHL;
static const int SHR;
static const int EQ;
static const int NE;
static const int LE;
static const int GE;
static const int LOG_AND;
static const int LOG_OR;
static const int INC;
static const int DEC;
static const int ARROW;
static const int ARROW_STAR;
static const int DOT_STAR;
static const int ASS_ADD;
static const int ASS_AND;
static const int ASS_DIV;
static const int ASS_MOD;
static const int ASS_MUL;
static const int ASS_OR;
static const int ASS_SHL;
static const int ASS_SHR;
static const int ASS_SUB;
static const int ASS_XOR;
static const int BuiltInTypeSpecifier;
static const int CharacterLiteral;
static const int Identifier;
static const int MetaType;
static const int NewLine;
static const int NumberLiteral;
static const int StringLiteral;
static const int TreeLiteral;
static const int ERROR;
static const int NIL;
static const int RAMMARG;
static const int BODY;
static const int DERIVED;
static const int EMIT;
static const int ENTRY;
static const int EXIT;
static const int FILE;
static const int FROZEN;
static const int GUARD;
static const int IMPLEMENTATION;
static const int INCLUDE;
static const int INTERFACE;
static const int NOGUARD;
static const int NOIMPLEMENTATION;
static const int OVERLOAD;
static const int PATH;
static const int POOL;
static const int POST;
static const int PRE;
static const int PREFIX;
static const int PURE;
static const int SUFFIX;
static const int UTILITY;
static const int ALL;
static const int PLACEHOLDER;
static const int PLACEMENT;
static const int NOAUTO;
static const int HASH_BLANK;
static const int HASH_DEFINE;
static const int HASH_ELIF;
static const int HASH_ELSE;
static const int HASH_ENDIF;
static const int HASH_ERROR;
static const int HASH_IF;
static const int HASH_IFDEF;
static const int HASH_IFNDEF;
static const int HASH_INCLUDE;
static const int HASH_LINE;
static const int HASH_PRAGMA;
static const int HASH_UNDEF;
static const int HASH_HASH;
static const int DI_HASH_HASH;
static const int DI_HASH;
static const int DI_SQUARE;
static const int DI_ERAUQS;
static const int DI_ECARB;
static const int DEFINED;
static const int DO_FUNCTION;
static const int MacroId;
static const int Punct;
static const int Text;
static const int SHIFT_THERE;
static const int REDUCE_HERE_MOSTLY;
static const int REDUCE_HERE;
static const int BOOL;
static const int CHAR;
static const int DOUBLE;
static const int FLOAT;
static const int INT;
static const int LONG;
static const int SHORT;
static const int SIGNED;
static const int UNSIGNED;
static const int VOID;
static const int WCHAR_T;
static const int IntegerLiteral;
static const int FloatingLiteral;

 /* decl const */
#else
enum YY_FogHashParser_ENUM_TOKEN { YY_FogHashParser_NULL_TOKEN=0
	,ASM=258
	,AUTO=259
	,BREAK=260
	,CASE=261
	,CATCH=262
	,CLASS=263
	,CONST=264
	,CONST_CAST=265
	,CONTINUE=266
	,DEFAULT=267
	,DELETE=268
	,DO=269
	,DYNAMIC_CAST=270
	,ELSE=271
	,ENUM=272
	,EXPLICIT=273
	,EXPORT=274
	,EXTERN=275
	,FALSE=276
	,FOR=277
	,FRIEND=278
	,GOTO=279
	,IF=280
	,INLINE=281
	,MUTABLE=282
	,NAMESPACE=283
	,NEW=284
	,OPERATOR=285
	,PRIVATE=286
	,PROTECTED=287
	,PUBLIC=288
	,REGISTER=289
	,REINTERPRET_CAST=290
	,RETURN=291
	,SIZEOF=292
	,STATIC=293
	,STATIC_CAST=294
	,STRUCT=295
	,SWITCH=296
	,TEMPLATE=297
	,THIS=298
	,THROW=299
	,TRUE=300
	,TRY=301
	,TYPEDEF=302
	,TYPEID=303
	,TYPENAME=304
	,UNION=305
	,USING=306
	,VIRTUAL=307
	,VOLATILE=308
	,WHILE=309
	,ELLIPSIS=310
	,SCOPE=311
	,SHL=312
	,SHR=313
	,EQ=314
	,NE=315
	,LE=316
	,GE=317
	,LOG_AND=318
	,LOG_OR=319
	,INC=320
	,DEC=321
	,ARROW=322
	,ARROW_STAR=323
	,DOT_STAR=324
	,ASS_ADD=325
	,ASS_AND=326
	,ASS_DIV=327
	,ASS_MOD=328
	,ASS_MUL=329
	,ASS_OR=330
	,ASS_SHL=331
	,ASS_SHR=332
	,ASS_SUB=333
	,ASS_XOR=334
	,BuiltInTypeSpecifier=335
	,CharacterLiteral=336
	,Identifier=337
	,MetaType=338
	,NewLine=339
	,NumberLiteral=340
	,StringLiteral=341
	,TreeLiteral=342
	,ERROR=343
	,NIL=344
	,RAMMARG=345
	,BODY=346
	,DERIVED=347
	,EMIT=348
	,ENTRY=349
	,EXIT=350
	,FILE=351
	,FROZEN=352
	,GUARD=353
	,IMPLEMENTATION=354
	,INCLUDE=355
	,INTERFACE=356
	,NOGUARD=357
	,NOIMPLEMENTATION=358
	,OVERLOAD=359
	,PATH=360
	,POOL=361
	,POST=362
	,PRE=363
	,PREFIX=364
	,PURE=365
	,SUFFIX=366
	,UTILITY=367
	,ALL=368
	,PLACEHOLDER=369
	,PLACEMENT=370
	,NOAUTO=371
	,HASH_BLANK=372
	,HASH_DEFINE=373
	,HASH_ELIF=374
	,HASH_ELSE=375
	,HASH_ENDIF=376
	,HASH_ERROR=377
	,HASH_IF=378
	,HASH_IFDEF=379
	,HASH_IFNDEF=380
	,HASH_INCLUDE=381
	,HASH_LINE=382
	,HASH_PRAGMA=383
	,HASH_UNDEF=384
	,HASH_HASH=385
	,DI_HASH_HASH=386
	,DI_HASH=387
	,DI_SQUARE=388
	,DI_ERAUQS=389
	,DI_ECARB=390
	,DEFINED=391
	,DO_FUNCTION=392
	,MacroId=393
	,Punct=394
	,Text=395
	,SHIFT_THERE=396
	,REDUCE_HERE_MOSTLY=397
	,REDUCE_HERE=398
	,BOOL=399
	,CHAR=400
	,DOUBLE=401
	,FLOAT=402
	,INT=403
	,LONG=404
	,SHORT=405
	,SIGNED=406
	,UNSIGNED=407
	,VOID=408
	,WCHAR_T=409
	,IntegerLiteral=410
	,FloatingLiteral=411

 /* enum token */
     }; /* end of enum declaration */
#endif
public:
 int YY_FogHashParser_PARSE (YY_FogHashParser_PARSE_PARAM);
 virtual void YY_FogHashParser_ERROR(const char *msg) YY_FogHashParser_ERROR_BODY;
#ifdef YY_FogHashParser_PURE
#ifdef YY_FogHashParser_LSP_NEEDED
 virtual int  YY_FogHashParser_LEX (YY_FogHashParser_STYPE *YY_FogHashParser_LVAL,YY_FogHashParser_LTYPE *YY_FogHashParser_LLOC) YY_FogHashParser_LEX_BODY;
#else
 virtual int  YY_FogHashParser_LEX (YY_FogHashParser_STYPE *YY_FogHashParser_LVAL) YY_FogHashParser_LEX_BODY;
#endif
#else
 virtual int YY_FogHashParser_LEX() YY_FogHashParser_LEX_BODY;
 YY_FogHashParser_STYPE YY_FogHashParser_LVAL;
#ifdef YY_FogHashParser_LSP_NEEDED
 YY_FogHashParser_LTYPE YY_FogHashParser_LLOC;
#endif
 int   YY_FogHashParser_NERRS;
 int    YY_FogHashParser_CHAR;
#endif
#if YY_FogHashParser_DEBUG != 0
 int YY_FogHashParser_DEBUG_FLAG;   /*  nonzero means print parse trace     */
#endif
public:
 YY_FogHashParser_CLASS(YY_FogHashParser_CONSTRUCTOR_PARAM);
public:
 YY_FogHashParser_MEMBERS 
};
/* other declare folow */
#if YY_FogHashParser_USE_CONST_TOKEN != 0
const int YY_FogHashParser_CLASS::ASM=258;
const int YY_FogHashParser_CLASS::AUTO=259;
const int YY_FogHashParser_CLASS::BREAK=260;
const int YY_FogHashParser_CLASS::CASE=261;
const int YY_FogHashParser_CLASS::CATCH=262;
const int YY_FogHashParser_CLASS::CLASS=263;
const int YY_FogHashParser_CLASS::CONST=264;
const int YY_FogHashParser_CLASS::CONST_CAST=265;
const int YY_FogHashParser_CLASS::CONTINUE=266;
const int YY_FogHashParser_CLASS::DEFAULT=267;
const int YY_FogHashParser_CLASS::DELETE=268;
const int YY_FogHashParser_CLASS::DO=269;
const int YY_FogHashParser_CLASS::DYNAMIC_CAST=270;
const int YY_FogHashParser_CLASS::ELSE=271;
const int YY_FogHashParser_CLASS::ENUM=272;
const int YY_FogHashParser_CLASS::EXPLICIT=273;
const int YY_FogHashParser_CLASS::EXPORT=274;
const int YY_FogHashParser_CLASS::EXTERN=275;
const int YY_FogHashParser_CLASS::FALSE=276;
const int YY_FogHashParser_CLASS::FOR=277;
const int YY_FogHashParser_CLASS::FRIEND=278;
const int YY_FogHashParser_CLASS::GOTO=279;
const int YY_FogHashParser_CLASS::IF=280;
const int YY_FogHashParser_CLASS::INLINE=281;
const int YY_FogHashParser_CLASS::MUTABLE=282;
const int YY_FogHashParser_CLASS::NAMESPACE=283;
const int YY_FogHashParser_CLASS::NEW=284;
const int YY_FogHashParser_CLASS::OPERATOR=285;
const int YY_FogHashParser_CLASS::PRIVATE=286;
const int YY_FogHashParser_CLASS::PROTECTED=287;
const int YY_FogHashParser_CLASS::PUBLIC=288;
const int YY_FogHashParser_CLASS::REGISTER=289;
const int YY_FogHashParser_CLASS::REINTERPRET_CAST=290;
const int YY_FogHashParser_CLASS::RETURN=291;
const int YY_FogHashParser_CLASS::SIZEOF=292;
const int YY_FogHashParser_CLASS::STATIC=293;
const int YY_FogHashParser_CLASS::STATIC_CAST=294;
const int YY_FogHashParser_CLASS::STRUCT=295;
const int YY_FogHashParser_CLASS::SWITCH=296;
const int YY_FogHashParser_CLASS::TEMPLATE=297;
const int YY_FogHashParser_CLASS::THIS=298;
const int YY_FogHashParser_CLASS::THROW=299;
const int YY_FogHashParser_CLASS::TRUE=300;
const int YY_FogHashParser_CLASS::TRY=301;
const int YY_FogHashParser_CLASS::TYPEDEF=302;
const int YY_FogHashParser_CLASS::TYPEID=303;
const int YY_FogHashParser_CLASS::TYPENAME=304;
const int YY_FogHashParser_CLASS::UNION=305;
const int YY_FogHashParser_CLASS::USING=306;
const int YY_FogHashParser_CLASS::VIRTUAL=307;
const int YY_FogHashParser_CLASS::VOLATILE=308;
const int YY_FogHashParser_CLASS::WHILE=309;
const int YY_FogHashParser_CLASS::ELLIPSIS=310;
const int YY_FogHashParser_CLASS::SCOPE=311;
const int YY_FogHashParser_CLASS::SHL=312;
const int YY_FogHashParser_CLASS::SHR=313;
const int YY_FogHashParser_CLASS::EQ=314;
const int YY_FogHashParser_CLASS::NE=315;
const int YY_FogHashParser_CLASS::LE=316;
const int YY_FogHashParser_CLASS::GE=317;
const int YY_FogHashParser_CLASS::LOG_AND=318;
const int YY_FogHashParser_CLASS::LOG_OR=319;
const int YY_FogHashParser_CLASS::INC=320;
const int YY_FogHashParser_CLASS::DEC=321;
const int YY_FogHashParser_CLASS::ARROW=322;
const int YY_FogHashParser_CLASS::ARROW_STAR=323;
const int YY_FogHashParser_CLASS::DOT_STAR=324;
const int YY_FogHashParser_CLASS::ASS_ADD=325;
const int YY_FogHashParser_CLASS::ASS_AND=326;
const int YY_FogHashParser_CLASS::ASS_DIV=327;
const int YY_FogHashParser_CLASS::ASS_MOD=328;
const int YY_FogHashParser_CLASS::ASS_MUL=329;
const int YY_FogHashParser_CLASS::ASS_OR=330;
const int YY_FogHashParser_CLASS::ASS_SHL=331;
const int YY_FogHashParser_CLASS::ASS_SHR=332;
const int YY_FogHashParser_CLASS::ASS_SUB=333;
const int YY_FogHashParser_CLASS::ASS_XOR=334;
const int YY_FogHashParser_CLASS::BuiltInTypeSpecifier=335;
const int YY_FogHashParser_CLASS::CharacterLiteral=336;
const int YY_FogHashParser_CLASS::Identifier=337;
const int YY_FogHashParser_CLASS::MetaType=338;
const int YY_FogHashParser_CLASS::NewLine=339;
const int YY_FogHashParser_CLASS::NumberLiteral=340;
const int YY_FogHashParser_CLASS::StringLiteral=341;
const int YY_FogHashParser_CLASS::TreeLiteral=342;
const int YY_FogHashParser_CLASS::ERROR=343;
const int YY_FogHashParser_CLASS::NIL=344;
const int YY_FogHashParser_CLASS::RAMMARG=345;
const int YY_FogHashParser_CLASS::BODY=346;
const int YY_FogHashParser_CLASS::DERIVED=347;
const int YY_FogHashParser_CLASS::EMIT=348;
const int YY_FogHashParser_CLASS::ENTRY=349;
const int YY_FogHashParser_CLASS::EXIT=350;
const int YY_FogHashParser_CLASS::FILE=351;
const int YY_FogHashParser_CLASS::FROZEN=352;
const int YY_FogHashParser_CLASS::GUARD=353;
const int YY_FogHashParser_CLASS::IMPLEMENTATION=354;
const int YY_FogHashParser_CLASS::INCLUDE=355;
const int YY_FogHashParser_CLASS::INTERFACE=356;
const int YY_FogHashParser_CLASS::NOGUARD=357;
const int YY_FogHashParser_CLASS::NOIMPLEMENTATION=358;
const int YY_FogHashParser_CLASS::OVERLOAD=359;
const int YY_FogHashParser_CLASS::PATH=360;
const int YY_FogHashParser_CLASS::POOL=361;
const int YY_FogHashParser_CLASS::POST=362;
const int YY_FogHashParser_CLASS::PRE=363;
const int YY_FogHashParser_CLASS::PREFIX=364;
const int YY_FogHashParser_CLASS::PURE=365;
const int YY_FogHashParser_CLASS::SUFFIX=366;
const int YY_FogHashParser_CLASS::UTILITY=367;
const int YY_FogHashParser_CLASS::ALL=368;
const int YY_FogHashParser_CLASS::PLACEHOLDER=369;
const int YY_FogHashParser_CLASS::PLACEMENT=370;
const int YY_FogHashParser_CLASS::NOAUTO=371;
const int YY_FogHashParser_CLASS::HASH_BLANK=372;
const int YY_FogHashParser_CLASS::HASH_DEFINE=373;
const int YY_FogHashParser_CLASS::HASH_ELIF=374;
const int YY_FogHashParser_CLASS::HASH_ELSE=375;
const int YY_FogHashParser_CLASS::HASH_ENDIF=376;
const int YY_FogHashParser_CLASS::HASH_ERROR=377;
const int YY_FogHashParser_CLASS::HASH_IF=378;
const int YY_FogHashParser_CLASS::HASH_IFDEF=379;
const int YY_FogHashParser_CLASS::HASH_IFNDEF=380;
const int YY_FogHashParser_CLASS::HASH_INCLUDE=381;
const int YY_FogHashParser_CLASS::HASH_LINE=382;
const int YY_FogHashParser_CLASS::HASH_PRAGMA=383;
const int YY_FogHashParser_CLASS::HASH_UNDEF=384;
const int YY_FogHashParser_CLASS::HASH_HASH=385;
const int YY_FogHashParser_CLASS::DI_HASH_HASH=386;
const int YY_FogHashParser_CLASS::DI_HASH=387;
const int YY_FogHashParser_CLASS::DI_SQUARE=388;
const int YY_FogHashParser_CLASS::DI_ERAUQS=389;
const int YY_FogHashParser_CLASS::DI_ECARB=390;
const int YY_FogHashParser_CLASS::DEFINED=391;
const int YY_FogHashParser_CLASS::DO_FUNCTION=392;
const int YY_FogHashParser_CLASS::MacroId=393;
const int YY_FogHashParser_CLASS::Punct=394;
const int YY_FogHashParser_CLASS::Text=395;
const int YY_FogHashParser_CLASS::SHIFT_THERE=396;
const int YY_FogHashParser_CLASS::REDUCE_HERE_MOSTLY=397;
const int YY_FogHashParser_CLASS::REDUCE_HERE=398;
const int YY_FogHashParser_CLASS::BOOL=399;
const int YY_FogHashParser_CLASS::CHAR=400;
const int YY_FogHashParser_CLASS::DOUBLE=401;
const int YY_FogHashParser_CLASS::FLOAT=402;
const int YY_FogHashParser_CLASS::INT=403;
const int YY_FogHashParser_CLASS::LONG=404;
const int YY_FogHashParser_CLASS::SHORT=405;
const int YY_FogHashParser_CLASS::SIGNED=406;
const int YY_FogHashParser_CLASS::UNSIGNED=407;
const int YY_FogHashParser_CLASS::VOID=408;
const int YY_FogHashParser_CLASS::WCHAR_T=409;
const int YY_FogHashParser_CLASS::IntegerLiteral=410;
const int YY_FogHashParser_CLASS::FloatingLiteral=411;

 /* const YY_FogHashParser_CLASS::token */
#endif
/*apres const  */
YY_FogHashParser_CLASS::YY_FogHashParser_CLASS(YY_FogHashParser_CONSTRUCTOR_PARAM) YY_FogHashParser_CONSTRUCTOR_INIT
{
#if YY_FogHashParser_DEBUG != 0
YY_FogHashParser_DEBUG_FLAG=0;
#endif
YY_FogHashParser_CONSTRUCTOR_CODE;
};
#endif


#define	YYFINAL		217
#define	YYFLAG		-32768
#define	YYNTBASE	188

#define YYTRANSLATE(x) ((unsigned)(x) <= 411 ? yytranslate[x] : 229)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,   187,   177,   185,   161,   183,   172,   174,   184,   162,
   163,   170,   168,   181,   169,   167,   171,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   165,   164,   179,
   178,   180,   166,   182,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   159,   186,   160,   173,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   157,   175,   158,   176,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156
};

#if YY_FogHashParser_DEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     6,     8,    10,    13,    16,    19,    21,    24,
    29,    34,    37,    39,    41,    44,    47,    50,    53,    56,
    58,    60,    64,    66,    70,    73,    79,    81,    84,    88,
    91,    93,    96,    99,   102,   105,   108,   111,   114,   116,
   119,   121,   124,   126,   129,   132,   135,   137,   140,   143,
   148,   151,   153,   156,   158,   161,   164,   168,   171,   174,
   183,   188,   191,   194,   197,   200,   204,   206,   208,   210,
   212,   215,   218,   222,   226,   230,   232,   236,   240,   242,
   246,   250,   252,   256,   260,   264,   268,   270,   274,   278,
   280,   284,   286,   290,   292,   296,   298,   302,   304,   308,
   310,   316,   318,   320,   322,   324,   326,   328,   330,   332,
   334,   336,   338,   340,   342,   344,   346,   348,   350,   352,
   354,   356,   358,   360,   362,   364,   366,   368,   370,   372,
   374,   376,   378,   380,   382,   384,   386,   388,   390,   392,
   394,   396,   398,   400,   402,   404,   406,   408,   411,   412
};

static const short yyrhs[] = {   189,
   223,     0,     1,   223,     0,   192,     0,   200,     0,   119,
   221,     0,   120,   228,     0,   121,   228,     0,   201,     0,
   123,   221,     0,   124,   228,   222,   228,     0,   125,   228,
   222,   228,     0,   202,   228,     0,   206,     0,   207,     0,
   208,   228,     0,   117,   228,     0,   190,    86,     0,   191,
    86,     0,   191,   187,     0,   190,     0,   191,     0,   118,
   228,    82,     0,   193,     0,   193,   162,   228,     0,   195,
    82,     0,   196,   228,   181,   228,    82,     0,   194,     0,
   195,   163,     0,   196,   228,   163,     0,   197,   227,     0,
   199,     0,   199,   227,     0,   198,   226,     0,   198,   157,
     0,   198,    81,     0,   198,    82,     0,   198,    85,     0,
   198,    86,     0,   197,     0,   197,   227,     0,   199,     0,
   199,   227,     0,   122,     0,   201,    86,     0,   201,   187,
     0,   126,   203,     0,    86,     0,   187,   203,     0,   224,
   203,     0,   127,   228,    85,   228,     0,   204,    86,     0,
   204,     0,   205,   228,     0,   128,     0,   207,    86,     0,
   207,   187,     0,   129,   228,    82,     0,   187,   209,     0,
   225,   209,     0,   225,   136,   228,   162,   228,   222,   228,
   163,     0,   225,   136,   228,   222,     0,   168,   209,     0,
   169,   209,     0,   177,   209,     0,   176,   209,     0,   162,
   221,   163,     0,    85,     0,    81,     0,   223,     0,   209,
     0,   210,   187,     0,   210,   225,     0,   210,   170,   209,
     0,   210,   171,   209,     0,   210,   172,   209,     0,   210,
     0,   211,   168,   210,     0,   211,   169,   210,     0,   211,
     0,   212,    57,   211,     0,   212,    58,   211,     0,   212,
     0,   213,   179,   212,     0,   213,    61,   212,     0,   213,
    62,   212,     0,   213,   180,   212,     0,   213,     0,   214,
    59,   213,     0,   214,    60,   213,     0,   214,     0,   215,
   174,   214,     0,   215,     0,   216,   173,   215,     0,   216,
     0,   217,   175,   216,     0,   217,     0,   218,    63,   217,
     0,   218,     0,   219,    64,   218,     0,   219,     0,   219,
   166,   221,   165,   221,     0,   220,     0,    82,     0,   138,
     0,    84,     0,    82,     0,    82,     0,   139,     0,   130,
     0,    57,     0,    58,     0,    59,     0,    60,     0,    61,
     0,    62,     0,    63,     0,    64,     0,   161,     0,   162,
     0,   181,     0,   163,     0,   158,     0,   159,     0,   160,
     0,   164,     0,   165,     0,   166,     0,   167,     0,   168,
     0,   169,     0,   170,     0,   171,     0,   172,     0,   173,
     0,   174,     0,   175,     0,   176,     0,   177,     0,   178,
     0,   179,     0,   180,     0,   182,     0,   183,     0,   184,
     0,   185,     0,   186,     0,   187,     0,   227,   187,     0,
     0,   228,   187,     0
};

#endif

#if (YY_FogHashParser_DEBUG != 0) || defined(YY_FogHashParser_ERROR_VERBOSE) 
static const short yyrline[] = { 0,
   254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
   264,   265,   266,   267,   268,   270,   271,   272,   273,   274,
   275,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   293,   294,   295,   296,
   297,   298,   300,   301,   302,   304,   305,   306,   307,   309,
   310,   311,   312,   314,   315,   316,   318,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   329,   330,   331,   334,
   335,   336,   337,   338,   340,   342,   343,   344,   345,   346,
   348,   351,   352,   353,   354,   355,   356,   357,   358,   359,
   360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
   370,   371,   373,   374,   375,   381,   382,   384,   384,   384,
   384,   384,   384,   384,   384,   384,   384,   385,   385,   385,
   385,   385,   385,   385,   385,   385,   385,   385,   386,   386,
   386,   386,   386,   386,   386,   386,   386,   386,   386,   386,
   386,   387,   387,   387,   387,   387,   389,   390,   391,   392
};

static const char * const yytname[] = {   "$","error","$illegal.","ASM","AUTO",
"BREAK","CASE","CATCH","CLASS","CONST","CONST_CAST","CONTINUE","DEFAULT","DELETE",
"DO","DYNAMIC_CAST","ELSE","ENUM","EXPLICIT","EXPORT","EXTERN","FALSE","FOR",
"FRIEND","GOTO","IF","INLINE","MUTABLE","NAMESPACE","NEW","OPERATOR","PRIVATE",
"PROTECTED","PUBLIC","REGISTER","REINTERPRET_CAST","RETURN","SIZEOF","STATIC",
"STATIC_CAST","STRUCT","SWITCH","TEMPLATE","THIS","THROW","TRUE","TRY","TYPEDEF",
"TYPEID","TYPENAME","UNION","USING","VIRTUAL","VOLATILE","WHILE","ELLIPSIS",
"SCOPE","SHL","SHR","EQ","NE","LE","GE","LOG_AND","LOG_OR","INC","DEC","ARROW",
"ARROW_STAR","DOT_STAR","ASS_ADD","ASS_AND","ASS_DIV","ASS_MOD","ASS_MUL","ASS_OR",
"ASS_SHL","ASS_SHR","ASS_SUB","ASS_XOR","BuiltInTypeSpecifier","CharacterLiteral",
"Identifier","MetaType","NewLine","NumberLiteral","StringLiteral","TreeLiteral",
"ERROR","NIL","RAMMARG","BODY","DERIVED","EMIT","ENTRY","EXIT","FILE","FROZEN",
"GUARD","IMPLEMENTATION","INCLUDE","INTERFACE","NOGUARD","NOIMPLEMENTATION",
"OVERLOAD","PATH","POOL","POST","PRE","PREFIX","PURE","SUFFIX","UTILITY","ALL",
"PLACEHOLDER","PLACEMENT","NOAUTO","HASH_BLANK","HASH_DEFINE","HASH_ELIF","HASH_ELSE",
"HASH_ENDIF","HASH_ERROR","HASH_IF","HASH_IFDEF","HASH_IFNDEF","HASH_INCLUDE",
"HASH_LINE","HASH_PRAGMA","HASH_UNDEF","HASH_HASH","DI_HASH_HASH","DI_HASH",
"DI_SQUARE","DI_ERAUQS","DI_ECARB","DEFINED","DO_FUNCTION","MacroId","Punct",
"Text","SHIFT_THERE","REDUCE_HERE_MOSTLY","REDUCE_HERE","BOOL","CHAR","DOUBLE",
"FLOAT","INT","LONG","SHORT","SIGNED","UNSIGNED","VOID","WCHAR_T","IntegerLiteral",
"FloatingLiteral","'{'","'}'","'['","']'","'#'","'('","')'","';'","':'","'?'",
"'.'","'+'","'-'","'*'","'/'","'%'","'^'","'&'","'|'","'~'","'!'","'='","'<'",
"'>'","','","'@'","'$'","'\\''","'\"'","'\\\\'","' '","grammar","hash_stmt",
"hash_blank1","hash_blank2","hash_blank","hash_define1","hash_define_ob","hash_define_fn",
"hash_define2","hash_define2a","hash_define3","hash_define4","hash_define","hash_error",
"hash_include","hash_include1","hash_line1","hash_line2","hash_line","hash_pragma",
"hash_undef","expr_val","expr_mul","expr_add","expr_shift","expr_rel","expr_eq",
"expr_and","expr_xor","expr_or","expr_log_and","expr_log_or","expr_cond","expr",
"is_defined_id","line","macro.include","macro.expr","punct","ws.seq","ws.opt",
""
};
#endif

static const short yyr1[] = {     0,
   188,   188,   189,   189,   189,   189,   189,   189,   189,   189,
   189,   189,   189,   189,   189,   190,   191,   191,   191,   192,
   192,   193,   194,   195,   196,   196,   197,   197,   197,   198,
   198,   198,   199,   199,   199,   199,   199,   199,   200,   200,
   200,   200,   201,   201,   201,   202,   203,   203,   203,   204,
   205,   206,   206,   207,   207,   207,   208,   209,   209,   209,
   209,   209,   209,   209,   209,   209,   209,   209,   209,   210,
   210,   210,   210,   210,   210,   211,   211,   211,   212,   212,
   212,   213,   213,   213,   213,   213,   214,   214,   214,   215,
   215,   216,   216,   217,   217,   218,   218,   219,   219,   220,
   220,   221,   222,   222,   223,   224,   225,   226,   226,   226,
   226,   226,   226,   226,   226,   226,   226,   226,   226,   226,
   226,   226,   226,   226,   226,   226,   226,   226,   226,   226,
   226,   226,   226,   226,   226,   226,   226,   226,   226,   226,
   226,   226,   226,   226,   226,   226,   227,   227,   228,   228
};

static const short yyr2[] = {     0,
     2,     2,     1,     1,     2,     2,     2,     1,     2,     4,
     4,     2,     1,     1,     2,     2,     2,     2,     2,     1,
     1,     3,     1,     3,     2,     5,     1,     2,     3,     2,
     1,     2,     2,     2,     2,     2,     2,     2,     1,     2,
     1,     2,     1,     2,     2,     2,     1,     2,     2,     4,
     2,     1,     2,     1,     2,     2,     3,     2,     2,     8,
     4,     2,     2,     2,     2,     3,     1,     1,     1,     1,
     2,     2,     3,     3,     3,     1,     3,     3,     1,     3,
     3,     1,     3,     3,     3,     3,     1,     3,     3,     1,
     3,     1,     3,     1,     3,     1,     3,     1,     3,     1,
     5,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     2,     0,     2
};

static const short yydefact[] = {     0,
     0,   149,   149,     0,   149,   149,    43,     0,   149,   149,
     0,   149,    54,   149,     0,    20,    21,     3,    23,    27,
     0,   149,    39,     0,    31,     4,     8,   149,    52,   149,
    13,    14,   149,   105,     2,    16,     0,    68,   107,    67,
     0,     0,     0,     0,     0,     0,    70,    76,    79,    82,
    87,    90,    92,    94,    96,    98,   100,   102,     5,    69,
     0,     6,     7,     9,     0,     0,   106,    47,     0,    46,
     0,     0,     0,     1,    17,    18,    19,   149,    25,    28,
     0,   147,    30,   110,   111,   112,   113,   114,   115,   116,
   117,    35,    36,    37,    38,   109,   108,    34,   122,   123,
   124,   118,   119,   121,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   120,   142,   143,   144,   145,   146,    33,    32,    44,
    45,    12,    51,    53,    55,    56,    15,   150,    22,     0,
    62,    63,    65,    64,    58,     0,     0,     0,    71,    72,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   149,    59,   103,   104,
   149,   149,    48,    49,   149,    57,    24,    29,   149,   148,
    66,    73,    74,    75,    77,    78,    80,    81,    84,    85,
    83,    86,    88,    89,    91,    93,    95,    97,    99,     0,
     0,    10,    11,    50,     0,     0,   149,    61,    26,   101,
     0,   149,     0,    60,     0,     0,     0
};

static const short yydefgoto[] = {   215,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    70,    29,    30,    31,    32,    33,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,   171,    60,    71,    61,   128,    83,    36
};

static const short yypact[] = {   125,
   -38,-32768,-32768,   -24,-32768,-32768,-32768,   -24,-32768,-32768,
   -60,-32768,-32768,-32768,   -38,   -21,   -55,-32768,   -94,-32768,
   -72,-32768,  -109,    55,   -76,-32768,   -39,-32768,    -5,-32768,
-32768,   -37,-32768,-32768,-32768,  -105,   -54,-32768,-32768,-32768,
   -24,   -24,   -24,   -24,   -24,   -24,-32768,   -66,  -125,     6,
   -49,     7,   -91,   -89,   -90,    23,   -31,-32768,-32768,-32768,
   -67,  -105,  -105,-32768,   -58,   -58,-32768,-32768,   -60,-32768,
   -60,   -40,   -53,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -131,-32768,   -64,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -63,-32768,
-32768,  -105,-32768,  -105,-32768,-32768,  -105,-32768,-32768,   -75,
-32768,-32768,-32768,-32768,-32768,   -24,   -24,   -24,-32768,-32768,
   -24,   -24,   -24,   -24,   -24,   -24,   -24,   -24,   -24,   -24,
   -24,   -24,   -24,   -24,   -24,   -24,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  -105,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   -66,   -66,  -125,  -125,     6,     6,
     6,     6,   -49,   -49,     7,   -91,   -89,   -90,    23,   -78,
   -59,  -105,  -105,  -105,   -41,   -24,-32768,-32768,-32768,-32768,
   -58,-32768,  -128,-32768,    89,    90,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   -29,-32768,-32768,-32768,-32768,-32768,
     9,   -80,   -77,  -119,   -86,   -69,   -68,   -70,   -65,   -57,
-32768,-32768,    -7,   -62,    47,-32768,   -43,-32768,    71,    -3
};


#define	YYLAST		254


static const short yytable[] = {    37,
    64,    62,    63,   172,   150,    65,    66,   -41,    72,    79,
    73,   155,   156,    38,    39,    39,    34,    40,    81,   -40,
   -42,    67,   169,   169,   132,    68,   134,   139,   176,   137,
    76,   178,   165,   140,   214,   189,   190,   191,   192,   173,
   209,   174,   151,   152,   175,    34,   130,    35,   135,   179,
   141,   142,   143,   144,   145,   138,    38,    39,   138,    34,
    40,    74,   153,   154,    75,   159,   160,    78,   167,   168,
   185,   186,   193,   194,   177,   187,   188,    82,   170,   170,
   133,   138,   161,   162,   163,   164,   206,   181,   216,   217,
    80,   195,   197,   196,    41,   129,     0,     0,   198,     0,
    42,    43,   207,   146,   147,   148,     0,   199,    44,    45,
    82,    84,    85,    86,    87,    88,    89,    90,    91,    46,
   149,     0,   180,   180,     0,     1,    69,   138,   138,   157,
   158,    77,   138,   138,   166,    92,    93,    41,   208,    94,
    95,   150,   150,    42,    43,   138,   138,   131,   212,   136,
     0,    44,    45,     0,   182,   183,   184,     0,   200,     0,
     0,     0,    46,   201,     0,     0,     0,   202,   203,     0,
     0,   204,     0,     0,     0,   205,     0,     0,     0,     0,
     0,     0,     0,     0,    96,     0,     0,     0,     0,     0,
     0,     0,     0,    97,     0,     0,     0,     0,   210,     0,
     0,     0,     0,   211,     0,     0,     0,     0,   213,     0,
     0,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,     2,     3,     4,     5,     6,     7,     8,     9,    10,
    11,    12,    13,    14
};

static const short yycheck[] = {     3,
     8,     5,     6,    66,    48,     9,    10,    84,    12,    82,
    14,    61,    62,    81,    82,    82,    84,    85,    22,    84,
    84,    82,    82,    82,    28,    86,    30,    82,    82,    33,
    86,   163,    64,    41,   163,   155,   156,   157,   158,    69,
    82,    71,   168,   169,    85,    84,    86,     1,    86,   181,
    42,    43,    44,    45,    46,   187,    81,    82,   187,    84,
    85,    15,    57,    58,    86,    59,    60,   162,   136,    61,
   151,   152,   159,   160,    78,   153,   154,   187,   138,   138,
    86,   187,   174,   173,   175,    63,   165,   163,     0,     0,
   163,   161,   163,   162,   162,    25,    -1,    -1,   164,    -1,
   168,   169,   162,   170,   171,   172,    -1,   165,   176,   177,
   187,    57,    58,    59,    60,    61,    62,    63,    64,   187,
   187,    -1,   187,   187,    -1,     1,   187,   187,   187,   179,
   180,   187,   187,   187,   166,    81,    82,   162,   201,    85,
    86,   185,   186,   168,   169,   187,   187,   187,   211,   187,
    -1,   176,   177,    -1,   146,   147,   148,    -1,   166,    -1,
    -1,    -1,   187,   167,    -1,    -1,    -1,   171,   172,    -1,
    -1,   175,    -1,    -1,    -1,   179,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   139,    -1,    -1,    -1,    -1,   206,    -1,
    -1,    -1,    -1,   207,    -1,    -1,    -1,    -1,   212,    -1,
    -1,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
   176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
   186,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129
};
 /* fattrs + tables */

/* parser code folow  */


/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: dollar marks section change
   the next  is replaced by the list of actions, each action
   as one case of the switch.  */ 

#if YY_FogHashParser_USE_GOTO != 0
/* 
 SUPRESSION OF GOTO : on some C++ compiler (sun c++)
  the goto is strictly forbidden if any constructor/destructor
  is used in the whole function (very stupid isn't it ?)
 so goto are to be replaced with a 'while/switch/case construct'
 here are the macro to keep some apparent compatibility
*/
#define YYGOTO(lb) {yy_gotostate=lb;continue;}
#define YYBEGINGOTO  enum yy_labels yy_gotostate=yygotostart; \
                     for(;;) switch(yy_gotostate) { case yygotostart: {
#define YYLABEL(lb) } case lb: {
#define YYENDGOTO } } 
#define YYBEGINDECLARELABEL enum yy_labels {yygotostart
#define YYDECLARELABEL(lb) ,lb
#define YYENDDECLARELABEL  };
#else
/* macro to keep goto */
#define YYGOTO(lb) goto lb
#define YYBEGINGOTO 
#define YYLABEL(lb) lb:
#define YYENDGOTO
#define YYBEGINDECLARELABEL 
#define YYDECLARELABEL(lb)
#define YYENDDECLARELABEL 
#endif
/* LABEL DECLARATION */
YYBEGINDECLARELABEL
  YYDECLARELABEL(yynewstate)
  YYDECLARELABEL(yybackup)
/* YYDECLARELABEL(yyresume) */
  YYDECLARELABEL(yydefault)
  YYDECLARELABEL(yyreduce)
  YYDECLARELABEL(yyerrlab)   /* here on detecting error */
  YYDECLARELABEL(yyerrlab1)   /* here on error raised explicitly by an action */
  YYDECLARELABEL(yyerrdefault)  /* current state does not do anything special for the error token. */
  YYDECLARELABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */
  YYDECLARELABEL(yyerrhandle)  
YYENDDECLARELABEL
/* ALLOCA SIMULATION */
/* __HAVE_NO_ALLOCA */
#ifdef __HAVE_NO_ALLOCA
int __alloca_free_ptr(char *ptr,char *ref)
{if(ptr!=ref) free(ptr);
 return 0;}

#define __ALLOCA_alloca(size) malloc(size)
#define __ALLOCA_free(ptr,ref) __alloca_free_ptr((char *)ptr,(char *)ref)

#ifdef YY_FogHashParser_LSP_NEEDED
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		    __ALLOCA_free(yyls,yylsa)+\
		   (num)); } while(0)
#else
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		   (num)); } while(0)
#endif
#else
#define __ALLOCA_return(num) do { return(num); } while(0)
#define __ALLOCA_alloca(size) alloca(size)
#define __ALLOCA_free(ptr,ref) 
#endif

/* ENDALLOCA SIMULATION */

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (YY_FogHashParser_CHAR = YYEMPTY)
#define YYEMPTY         -2
#define YYEOF           0
#define YYACCEPT        __ALLOCA_return(0)
#define YYABORT         __ALLOCA_return(1)
#define YYERROR         YYGOTO(yyerrlab1)
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL          YYGOTO(yyerrlab)
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do                                                              \
  if (YY_FogHashParser_CHAR == YYEMPTY && yylen == 1)                               \
    { YY_FogHashParser_CHAR = (token), YY_FogHashParser_LVAL = (value);                 \
      yychar1 = YYTRANSLATE (YY_FogHashParser_CHAR);                                \
      YYPOPSTACK;                                               \
      YYGOTO(yybackup);                                            \
    }                                                           \
  else                                                          \
    { YY_FogHashParser_ERROR ("syntax error: cannot back up"); YYERROR; }   \
while (0)

#define YYTERROR        1
#define YYERRCODE       256

#ifndef YY_FogHashParser_PURE
/* UNPURE */
#define YYLEX           YY_FogHashParser_LEX()
#ifndef YY_USE_CLASS
/* If nonreentrant, and not class , generate the variables here */
int     YY_FogHashParser_CHAR;                      /*  the lookahead symbol        */
YY_FogHashParser_STYPE      YY_FogHashParser_LVAL;              /*  the semantic value of the */
				/*  lookahead symbol    */
int YY_FogHashParser_NERRS;                 /*  number of parse errors so far */
#ifdef YY_FogHashParser_LSP_NEEDED
YY_FogHashParser_LTYPE YY_FogHashParser_LLOC;   /*  location data for the lookahead     */
			/*  symbol                              */
#endif
#endif


#else
/* PURE */
#ifdef YY_FogHashParser_LSP_NEEDED
#define YYLEX           YY_FogHashParser_LEX(&YY_FogHashParser_LVAL, &YY_FogHashParser_LLOC)
#else
#define YYLEX           YY_FogHashParser_LEX(&YY_FogHashParser_LVAL)
#endif
#endif
#ifndef YY_USE_CLASS
#if YY_FogHashParser_DEBUG != 0
int YY_FogHashParser_DEBUG_FLAG;                    /*  nonzero means print parse trace     */
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif
#endif



/*  YYINITDEPTH indicates the initial size of the parser's stacks       */

#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif


#if __GNUC__ > 1                /* GNU C and GNU C++ define this.  */
#define __yy_bcopy(FROM,TO,COUNT)       __builtin_memcpy(TO,FROM,COUNT)
#else                           /* not GNU C or C++ */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */

#ifdef __cplusplus
static void __yy_bcopy (char *from, char *to, int count)
#else
#ifdef __STDC__
static void __yy_bcopy (char *from, char *to, int count)
#else
static void __yy_bcopy (from, to, count)
     char *from;
     char *to;
     int count;
#endif
#endif
{
  char *f = from;
  char *t = to;
  int i = count;

  while (i-- > 0)
    *t++ = *f++;
}
#endif


int
#ifdef YY_USE_CLASS
 YY_FogHashParser_CLASS::
#endif
     YY_FogHashParser_PARSE(YY_FogHashParser_PARSE_PARAM)
#ifndef __STDC__
#ifndef __cplusplus
#ifndef YY_USE_CLASS
/* parameter definition without protypes */
YY_FogHashParser_PARSE_PARAM_DEF
#endif
#endif
#endif
{
  int yystate;
  int yyn;
  short *yyssp;
  YY_FogHashParser_STYPE *yyvsp;
  int yyerrstatus;      /*  number of tokens to shift before error messages enabled */
  int yychar1=0;          /*  lookahead token as an internal (translated) token number */

  short yyssa[YYINITDEPTH];     /*  the state stack                     */
  YY_FogHashParser_STYPE yyvsa[YYINITDEPTH];        /*  the semantic value stack            */

  short *yyss = yyssa;          /*  refer to the stacks thru separate pointers */
  YY_FogHashParser_STYPE *yyvs = yyvsa;     /*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YY_FogHashParser_LSP_NEEDED
  YY_FogHashParser_LTYPE yylsa[YYINITDEPTH];        /*  the location stack                  */
  YY_FogHashParser_LTYPE *yyls = yylsa;
  YY_FogHashParser_LTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YY_FogHashParser_PURE
  int YY_FogHashParser_CHAR;
  YY_FogHashParser_STYPE YY_FogHashParser_LVAL;
  int YY_FogHashParser_NERRS;
#ifdef YY_FogHashParser_LSP_NEEDED
  YY_FogHashParser_LTYPE YY_FogHashParser_LLOC;
#endif
#endif

  YY_FogHashParser_STYPE yyval;             /*  the variable used to return         */
				/*  semantic values from the action     */
				/*  routines                            */

  int yylen;
/* start loop, in which YYGOTO may be used. */
YYBEGINGOTO

#if YY_FogHashParser_DEBUG != 0
  if (YY_FogHashParser_DEBUG_FLAG)
    fprintf(stderr, "Starting parse\n");
#endif
  yystate = 0;
  yyerrstatus = 0;
  YY_FogHashParser_NERRS = 0;
  YY_FogHashParser_CHAR = YYEMPTY;          /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YY_FogHashParser_LSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
YYLABEL(yynewstate)

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YY_FogHashParser_STYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YY_FogHashParser_LSP_NEEDED
      YY_FogHashParser_LTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YY_FogHashParser_LSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YY_FogHashParser_LSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  YY_FogHashParser_ERROR("parser stack overflow");
	  __ALLOCA_return(2);
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) __ALLOCA_alloca (yystacksize * sizeof (*yyssp));
      __yy_bcopy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      __ALLOCA_free(yyss1,yyssa);
      yyvs = (YY_FogHashParser_STYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yyvsp));
      __yy_bcopy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
      __ALLOCA_free(yyvs1,yyvsa);
#ifdef YY_FogHashParser_LSP_NEEDED
      yyls = (YY_FogHashParser_LTYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yylsp));
      __yy_bcopy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
      __ALLOCA_free(yyls1,yylsa);
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YY_FogHashParser_LSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YY_FogHashParser_DEBUG != 0
      if (YY_FogHashParser_DEBUG_FLAG)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YY_FogHashParser_DEBUG != 0
  if (YY_FogHashParser_DEBUG_FLAG)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  YYGOTO(yybackup);
YYLABEL(yybackup)

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* YYLABEL(yyresume) */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yydefault);

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (YY_FogHashParser_CHAR == YYEMPTY)
    {
#if YY_FogHashParser_DEBUG != 0
      if (YY_FogHashParser_DEBUG_FLAG)
	fprintf(stderr, "Reading a token: ");
#endif
      YY_FogHashParser_CHAR = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (YY_FogHashParser_CHAR <= 0)           /* This means end of input. */
    {
      yychar1 = 0;
      YY_FogHashParser_CHAR = YYEOF;                /* Don't call YYLEX any more */

#if YY_FogHashParser_DEBUG != 0
      if (YY_FogHashParser_DEBUG_FLAG)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(YY_FogHashParser_CHAR);

#if YY_FogHashParser_DEBUG != 0
      if (YY_FogHashParser_DEBUG_FLAG)
	{
	  fprintf (stderr, "Next token is %d (%s", YY_FogHashParser_CHAR, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, YY_FogHashParser_CHAR, YY_FogHashParser_LVAL);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    YYGOTO(yydefault);

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrlab);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrlab);

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YY_FogHashParser_DEBUG != 0
  if (YY_FogHashParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting token %d (%s), ", YY_FogHashParser_CHAR, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (YY_FogHashParser_CHAR != YYEOF)
    YY_FogHashParser_CHAR = YYEMPTY;

  *++yyvsp = YY_FogHashParser_LVAL;
#ifdef YY_FogHashParser_LSP_NEEDED
  *++yylsp = YY_FogHashParser_LLOC;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  YYGOTO(yynewstate);

/* Do the default action for the current state.  */
YYLABEL(yydefault)

  yyn = yydefact[yystate];
  if (yyn == 0)
    YYGOTO(yyerrlab);

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
YYLABEL(yyreduce)
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YY_FogHashParser_DEBUG != 0
  if (YY_FogHashParser_DEBUG_FLAG)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
{ YYACCEPT; ;
    break;}
case 2:
{ YYABORT; ;
    break;}
case 5:
{ _truth = yyvsp[0]._long != 0; ;
    break;}
case 9:
{ _truth = yyvsp[0]._long != 0; ;
    break;}
case 10:
{ _truth = yyvsp[-1]._bool; ;
    break;}
case 11:
{ _truth = !yyvsp[-1]._bool; ;
    break;}
case 17:
{ WRNMSG("Unexpected trailing token(s) ignored"); ;
    break;}
case 22:
{ start_define(yyvsp[0].identifier); ;
    break;}
case 24:
{ _formals.reset(new PrimIdList); ;
    break;}
case 25:
{ if (yyvsp[0].identifier) _formals->add(yyvsp[0].identifier->id()); ;
    break;}
case 26:
{ if (yyvsp[0].identifier) _formals->add(yyvsp[0].identifier->id()); ;
    break;}
case 32:
{ _toks->add(FogTokenType::get_character(' ')); ;
    break;}
case 33:
{ if (yyvsp[0].keyword) _toks->add(*yyvsp[0].keyword); ;
    break;}
case 34:
{ if (yyvsp[0].brace) _toks->add(*yyvsp[0].brace); ;
    break;}
case 35:
{ if (yyvsp[0].character_literal) _toks->add(*yyvsp[0].character_literal); ;
    break;}
case 36:
{ if (yyvsp[0].identifier) _toks->add(*yyvsp[0].identifier); ;
    break;}
case 37:
{ if (yyvsp[0].number_literal) _toks->add(*yyvsp[0].number_literal); ;
    break;}
case 38:
{ if (yyvsp[0].string_literal) _toks->add(*yyvsp[0].string_literal); ;
    break;}
case 43:
{ _s.reset(new PrimOstrstream); if (_s) *_s << "#error "; ;
    break;}
case 44:
{ if (_s && yyvsp[0].string_literal) *_s << *yyvsp[0].string_literal; ;
    break;}
case 45:
{ if (_s) *_s << ' '; ;
    break;}
case 47:
{ if (yyvsp[0].string_literal) _string = *yyvsp[0].string_literal; ;
    break;}
case 48:
{;
    break;}
case 50:
{ _line = yyvsp[-1].number_literal ? yyvsp[-1].number_literal->as_int() : 0; ;
    break;}
case 51:
{ if (yyvsp[0].string_literal) _string = *yyvsp[0].string_literal; ;
    break;}
case 54:
{ _s.reset(new PrimOstrstream); ;
    break;}
case 55:
{ if (_s && yyvsp[0].string_literal) *_s << *yyvsp[0].string_literal; ;
    break;}
case 56:
{ if (_s) *_s << ' '; ;
    break;}
case 57:
{ if (yyvsp[0].identifier) _id = yyvsp[0].identifier->id(); ;
    break;}
case 58:
{ yyval._long = yyvsp[0]._long; ;
    break;}
case 59:
{ yyval._long = yyvsp[0]._long; ;
    break;}
case 60:
{ yyval._long = yyvsp[-2]._bool; ;
    break;}
case 61:
{ yyval._long = yyvsp[0]._bool; ;
    break;}
case 62:
{ yyval._long = yyvsp[0]._long; ;
    break;}
case 63:
{ yyval._long = -yyvsp[0]._long; ;
    break;}
case 64:
{ yyval._long = !yyvsp[0]._long; ;
    break;}
case 65:
{ yyval._long = ~yyvsp[0]._long; ;
    break;}
case 66:
{ yyval._long = yyvsp[-1]._long; ;
    break;}
case 67:
{ yyval._long = yyvsp[0].number_literal ? yyvsp[0].number_literal->as_int() : 0; ;
    break;}
case 68:
{ yyval._long = yyvsp[0].character_literal ? yyvsp[0].character_literal->value() : 0; ;
    break;}
case 69:
{ ERRMSG("Missing term in preprocessor constant expression.");
														  _truth = false; YYACCEPT; ;
    break;}
case 73:
{ yyval._long = yyvsp[-2]._long * yyvsp[0]._long; ;
    break;}
case 74:
{ if (yyvsp[0]._long == 0) { yyval._long = 0; WRNMSG("Divide by zero in preprocessor."); }
														  else { yyval._long = yyvsp[-2]._long / yyvsp[0]._long; } ;
    break;}
case 75:
{ if (yyvsp[0]._long == 0) { yyval._long = 0; WRNMSG("Modulus zero in preprocessor."); }
														  else { yyval._long = yyvsp[-2]._long % yyvsp[0]._long; } ;
    break;}
case 77:
{ yyval._long = yyvsp[-2]._long + yyvsp[0]._long; ;
    break;}
case 78:
{ yyval._long = yyvsp[-2]._long - yyvsp[0]._long; ;
    break;}
case 80:
{ if (yyvsp[0]._long < 0) { yyval._long = 0; WRNMSG("-ve left shift in preprocessor."); }
														  else { yyval._long = yyvsp[-2]._long << yyvsp[0]._long; } ;
    break;}
case 81:
{ if (yyvsp[0]._long < 0) { yyval._long = 0; WRNMSG("-ve right shift in preprocessor."); }
														  else { yyval._long = yyvsp[-2]._long >> yyvsp[0]._long;
															if (yyvsp[-2]._long < 0) WRNMSG("right shift of -ve in preprocessor."); } ;
    break;}
case 83:
{ yyval._long = yyvsp[-2]._long < yyvsp[0]._long; ;
    break;}
case 84:
{ yyval._long = yyvsp[-2]._long <= yyvsp[0]._long; ;
    break;}
case 85:
{ yyval._long = yyvsp[-2]._long >= yyvsp[0]._long; ;
    break;}
case 86:
{ yyval._long = yyvsp[-2]._long > yyvsp[0]._long; ;
    break;}
case 88:
{ yyval._long = yyvsp[-2]._long == yyvsp[0]._long; ;
    break;}
case 89:
{ yyval._long = yyvsp[-2]._long != yyvsp[0]._long; ;
    break;}
case 91:
{ yyval._long = yyvsp[-2]._long & yyvsp[0]._long; ;
    break;}
case 93:
{ yyval._long = yyvsp[-2]._long ^ yyvsp[0]._long; ;
    break;}
case 95:
{ yyval._long = yyvsp[-2]._long | yyvsp[0]._long; ;
    break;}
case 97:
{ yyval._long = yyvsp[-2]._long && yyvsp[0]._long; ;
    break;}
case 99:
{ yyval._long = yyvsp[-2]._long || yyvsp[0]._long; ;
    break;}
case 101:
{ yyval._long = yyvsp[-4]._long ? yyvsp[-2]._long : yyvsp[0]._long; ;
    break;}
case 103:
{ yyval._bool = yyvsp[0].identifier && is_defined(*yyvsp[0].identifier); ;
    break;}
case 104:
{ yyval._bool = yyvsp[0].keyword && is_defined(*yyvsp[0].keyword); ;
    break;}
case 105:
{ _lexer.raw_unget(_context); ;
    break;}
case 106:
{ if (yyvsp[0].identifier) invoke(*yyvsp[0].identifier, false); ;
    break;}
case 107:
{ if (yyvsp[0].identifier) invoke(*yyvsp[0].identifier, true); ;
    break;}
case 147:
{;
    break;}
case 148:
{;
    break;}
case 149:
{;
    break;}
case 150:
{;
    break;}
}
   /* the action file gets copied in in place of this dollarsign  */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YY_FogHashParser_LSP_NEEDED
  yylsp -= yylen;
#endif

#if YY_FogHashParser_DEBUG != 0
  if (YY_FogHashParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YY_FogHashParser_LSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = YY_FogHashParser_LLOC.first_line;
      yylsp->first_column = YY_FogHashParser_LLOC.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  YYGOTO(yynewstate);

YYLABEL(yyerrlab)   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++YY_FogHashParser_NERRS;

#ifdef YY_FogHashParser_ERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      YY_FogHashParser_ERROR(msg);
	      free(msg);
	    }
	  else
	    YY_FogHashParser_ERROR ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YY_FogHashParser_ERROR_VERBOSE */
	YY_FogHashParser_ERROR("parse error");
    }

  YYGOTO(yyerrlab1);
YYLABEL(yyerrlab1)   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (YY_FogHashParser_CHAR == YYEOF)
	YYABORT;

#if YY_FogHashParser_DEBUG != 0
      if (YY_FogHashParser_DEBUG_FLAG)
	fprintf(stderr, "Discarding token %d (%s).\n", YY_FogHashParser_CHAR, yytname[yychar1]);
#endif

      YY_FogHashParser_CHAR = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;              /* Each real token shifted decrements this */

  YYGOTO(yyerrhandle);

YYLABEL(yyerrdefault)  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) YYGOTO(yydefault);
#endif

YYLABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YY_FogHashParser_LSP_NEEDED
  yylsp--;
#endif

#if YY_FogHashParser_DEBUG != 0
  if (YY_FogHashParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

YYLABEL(yyerrhandle)

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yyerrdefault);

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    YYGOTO(yyerrdefault);

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrpop);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrpop);

  if (yyn == YYFINAL)
    YYACCEPT;

#if YY_FogHashParser_DEBUG != 0
  if (YY_FogHashParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = YY_FogHashParser_LVAL;
#ifdef YY_FogHashParser_LSP_NEEDED
  *++yylsp = YY_FogHashParser_LLOC;
#endif

  yystate = yyn;
  YYGOTO(yynewstate);
/* end loop, in which YYGOTO may be used. */
  YYENDGOTO
}

/* END */

#include <Fog/FogIncludeAll.h>

FogHashParser::~FogHashParser()
{
	_lexer.begin(_lexer_state);
	CONDMSG(YY_FogHashParser_DEBUG_FLAG || Fog::debug_lex2hash(), "Exiting # directive parser.\n");
}

void FogHashParser::invoke(const FogKeyword& anId, bool canBeDEFINED)
{
	static const PrimIdHandle definedId("defined");
	if (canBeDEFINED && (anId.id() == *definedId))
	{
		_context.assign(FogTokenType::DEFINED);
		_primed = true;
	}
	else if (!_lexer.hash_push(anId.id()))
	{
		_context.assign(FogTokenType::zero());
		_primed = true;
	}
}

inline bool FogHashParser::is_defined(const FogKeyword& anId) { return _lexer.is_defined(anId.id()) != 0; }

const FogLexerState& FogHashParser::set_state(FogTokenType::TokenType tokenType)
{
	switch (tokenType)
	{
		case HASH_INCLUDE:
			return _lexer.begin_include();
		case HASH_BLANK:
		case HASH_ERROR:
		case HASH_PRAGMA:
			return _lexer.begin_soak();
		default:
			return _lexer.state();
	}
}

void FogHashParser::start_define(const FogKeyword *anId) 
{
	_id = anId ? anId->id() : PrimId::null();
 	_toks.adopt(new FogTokens);
	_formals.reset();
}

//
//	Pass msg to the lexer to get a sensible error message.
//
inline void FogHashParser::yyerror(const char *msg) { ERRMSGZ(msg); }

//
//	Instruct the lexer to produce another token, using any token cached in _context as first choice.
//
int FogHashParser::yylex()
{
	if (!_primed)
		_lexer.raw_get(_context);
	_primed = false;
	if (Fog::debug_lex2hash())
	{
		PrimOstrstream s;
		if (yydebug)
			s << "\t\t\t\t";
		s << "<HASH> >> ";
		_context.value()->print_diagnostic(s, 0);
		DIAMSGZ(s.str());
	}
	yylval.token = &_context.token();
	return yylval.token->pp_token_type_enum();
}
