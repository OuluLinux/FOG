
/*
					PITFALLS !!!!!!
*/


/*


In the beginning, the FOG compiler will be very annoying for those who have coded much with regular c++.


Forgetting the ";" after "class Something {}" leads to very weird errors!


Using namespace Builtin leads to error, because compiler stuff is there.


*/





/*

You want to count a number:
	
	auto statement ImplementationStmt(signed s) {
		auto impl_counter++;		<-- evaluated during exporting (later)
		int var = $impl_counter;	<-- evaluated during parsing (earlier)
	}
	
	int main0() {
		auto int impl_counter = 0;

		$ImplementationStmt();	<-- evaluated during parsing (earlier)
		$ImplementationStmt();
		$ImplementationStmt();
		$ImplementationStmt();
	}

Why it won't work:
	- meta-variables (impl_counter) must belong to class or namespace
	- This is very unintuitive, but
	  $impl_counter and $ImplementationStmt() are evaluated DURING PARSING
	  but "auto" statements are evaluated afterwards DURING EXPORTING
		- that means that "j = $impl_counter;" is evaluated first in parsing and
		  "$ImplementationStmt();" and "auto impl_counter++;" is evaluated in exporting

Do instead:
*/
auto statement ImplementationStmt() {
	auto identifier counter_id = $impl_counter;
	var${counter_id} = ${impl_counter};
	auto impl_counter++;
}

int main0() {
	auto int impl_counter = 0;

	auto if (1) {
		// the whole content is evaluated during exporting
		$ImplementationStmt();
		$ImplementationStmt();
		$ImplementationStmt();
		$ImplementationStmt();
	}
}

// OR

auto statement ImplementationStmtB(identifier prefix, identifier postfix, int s) {
	int ${prefix}${postfix} = $s;
}

int main0b() {
	auto for (int i = 0; i < 4; ++i) {
		$ImplementationStmtB(var, $i, $i);
	}
}
