#define x 		3
#define f(a) 	f(x * (a))
#undef			x
#define	x		2
#define g		f
#define z		z[0]
#define h		g(~
#define m(a)	a(w)
#define w		0,1
#define t(a)	a

static int line1 = f(y+1) + f(f(z)) % t(t(g)(0) + t)(1);
static int line2 = g(x+(3,4)-w) | h 5 ) & m
		(f)^m(m);

// line1 = f ( 2 * ( y + 1 ) ) + f ( 2 * ( f ( 2 * ( z [ 0 ] ) ) ) ) % f ( 2 * ( 0 ) ) + t ( 1 )
// line2 = f ( 2 * ( 2 + ( 3 , 4 ) - 0 , 1 ) ) | f ( 2 * ( ~ 5 ) ) & f ( 2 * ( 0 , 1 ) ) ^ m ( 0 , 1 )

#define str(s)		# s
#define xstr(s)		str(s)
#define debug(s, t)	printf("x" # s "= %d, x" # t "= %s", \
						x ## s, x ## t)
#define INCFILE(n)	vers ## n	/* from previous #include example */
#define	glue(a, b)	a ## b
#define	xglue(a, b)	glue(a, b)
#define HIGHLOW		"hello"
#define LOW			LOW ", world"

static void function()
{
	debug(1, 2);
	fputs(str(strncmp("abc\0d", "abc", '\4')	/* this goes away */
			== 0) str(: @\n), s);
	glue(HIGH, LOW);
	xglue(HIGH, LOW);
}

#define OBJ_LIKE 		(1-1)
#define OBJ_LIKE 		/* white space */ (1-1) /* other */
#define FTN_LIKE(a) 	( a )
#define FTN_LIKE( a ) ( 		/* Note the white space */ \
						 a  /* other stuff on this line
							*/ )


#define OBJ_LIKE		(0)			/* different token sequence */
#define OBJ_LIKE		(1 - 1)		/* different white space */
#define FTN_LIKE(b)		( a )		/* different parameter usage */
#define FTN_LIKE(b)		( b )		/* different parameter spelling */

#include xstr(INCFILE(2).hxx)
