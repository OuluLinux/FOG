

Terminals which are not used:

   ASM
   AUTO
   BREAK
   CASE
   CATCH
   CLASS
   CONST
   CONST_CAST
   CONTINUE
   DEFAULT
   DELETE
   DO
   DYNAMIC_CAST
   ELSE
   ENUM
   EXPLICIT
   EXPORT
   EXTERN
   FALSE
   FOR
   FRIEND
   GOTO
   IF
   INLINE
   MUTABLE
   NAMESPACE
   NEW
   OPERATOR
   PRIVATE
   PROTECTED
   PUBLIC
   REGISTER
   REINTERPRET_CAST
   RETURN
   SIZEOF
   STATIC
   STATIC_CAST
   STRUCT
   SWITCH
   TEMPLATE
   THIS
   THROW
   TRUE
   TRY
   TYPEDEF
   TYPEID
   TYPENAME
   UNION
   USING
   VIRTUAL
   VOLATILE
   WHILE
   ELLIPSIS
   SCOPE
   INC
   DEC
   ARROW
   ARROW_STAR
   DOT_STAR
   ASS_ADD
   ASS_AND
   ASS_DIV
   ASS_MOD
   ASS_MUL
   ASS_OR
   ASS_SHL
   ASS_SHR
   ASS_SUB
   ASS_XOR
   BuiltInTypeSpecifier
   MetaType
   TreeLiteral
   ERROR
   NIL
   RAMMARG
   BODY
   DERIVED
   EMIT
   ENTRY
   EXIT
   FILE
   FROZEN
   GUARD
   IMPLEMENTATION
   INCLUDE
   INTERFACE
   NOGUARD
   NOIMPLEMENTATION
   OVERLOAD
   PATH
   POOL
   POST
   PRE
   PREFIX
   PURE
   SUFFIX
   UTILITY
   ALL
   PLACEHOLDER
   PLACEMENT
   NOAUTO
   HASH_BLANK
   HASH_DEFINE
   HASH_ELIF
   HASH_ELSE
   HASH_ENDIF
   HASH_ERROR
   HASH_IF
   HASH_IFDEF
   HASH_IFNDEF
   HASH_INCLUDE
   HASH_LINE
   HASH_PRAGMA
   HASH_UNDEF
   DI_HASH_HASH
   DI_HASH
   DI_SQUARE
   DI_ERAUQS
   DI_ECARB
   DEFINED
   Text
   SHIFT_THERE
   REDUCE_HERE_MOSTLY
   REDUCE_HERE
   BOOL
   CHAR
   DOUBLE
   FLOAT
   INT
   LONG
   SHORT
   SIGNED
   UNSIGNED
   VOID
   WCHAR_T
   IntegerLiteral
   FloatingLiteral



Grammar
rule 1    gram0 ->		/* empty */
rule 2    gram0 -> gram punct
rule 3    gram0 -> gram ','
rule 4    gram0 -> gram ')'
rule 5    gram0 -> gram '{'
rule 6    gram0 -> gram CharacterLiteral
rule 7    gram0 -> gram MacroId
rule 8    gram0 -> gram NumberLiteral
rule 9    gram0 -> gram StringLiteral
rule 10   gram0 -> gram id
rule 11   gram0 -> gram id DO_FUNCTION ws.opt args
rule 12   gram3 -> gram0
rule 13   gram3 -> gram3 '('
rule 14   gram3 -> gram3 ' '
rule 15   gram3 -> gram3 NewLine
rule 16   gram -> gram id DO_FUNCTION ws.opt
rule 17   gram -> gram3
rule 18   id -> Identifier
rule 19   args1 -> '('
rule 20   args1 -> args1 tokens
rule 21   args1 -> args1 ','
rule 22   args -> args1 ')'
rule 23   tokens -> punct
rule 24   tokens -> '{'
rule 25   tokens -> ' '
rule 26   tokens -> CharacterLiteral
rule 27   tokens -> Identifier
rule 28   tokens -> MacroId
rule 29   tokens -> NewLine
rule 30   tokens -> NumberLiteral
rule 31   tokens -> StringLiteral
rule 32   tokens -> toks0 ')'
rule 33   toks0 -> '('
rule 34   toks0 -> toks0 tokens
rule 35   toks0 -> toks0 ','
rule 36   punct -> Punct
rule 37   punct -> HASH_HASH
rule 38   punct -> SHL
rule 39   punct -> SHR
rule 40   punct -> EQ
rule 41   punct -> NE
rule 42   punct -> LE
rule 43   punct -> GE
rule 44   punct -> LOG_AND
rule 45   punct -> LOG_OR
rule 46   punct -> '#'
rule 47   punct -> '}'
rule 48   punct -> '['
rule 49   punct -> ']'
rule 50   punct -> ';'
rule 51   punct -> ':'
rule 52   punct -> '?'
rule 53   punct -> '.'
rule 54   punct -> '+'
rule 55   punct -> '-'
rule 56   punct -> '*'
rule 57   punct -> '/'
rule 58   punct -> '%'
rule 59   punct -> '^'
rule 60   punct -> '&'
rule 61   punct -> '|'
rule 62   punct -> '~'
rule 63   punct -> '!'
rule 64   punct -> '='
rule 65   punct -> '<'
rule 66   punct -> '>'
rule 67   punct -> '@'
rule 68   punct -> '$'
rule 69   punct -> '\''
rule 70   punct -> '"'
rule 71   punct -> '\\'
rule 72   ws.opt ->		/* empty */
rule 73   ws.opt -> ws.opt ' '
rule 74   ws.opt -> ws.opt NewLine

Terminals, with rules where they appear

$ (-1)
' ' (32) 14 25 73
'!' (33) 63
'"' (34) 70
'#' (35) 46
'$' (36) 68
'%' (37) 58
'&' (38) 60
'\'' (39) 69
'(' (40) 13 19 33
')' (41) 4 22 32
'*' (42) 56
'+' (43) 54
',' (44) 3 21 35
'-' (45) 55
'.' (46) 53
'/' (47) 57
':' (58) 51
';' (59) 50
'<' (60) 65
'=' (61) 64
'>' (62) 66
'?' (63) 52
'@' (64) 67
'[' (91) 48
'\\' (92) 71
']' (93) 49
'^' (94) 59
'{' (123) 5 24
'|' (124) 61
'}' (125) 47
'~' (126) 62
error (256)
ASM (258)
AUTO (259)
BREAK (260)
CASE (261)
CATCH (262)
CLASS (263)
CONST (264)
CONST_CAST (265)
CONTINUE (266)
DEFAULT (267)
DELETE (268)
DO (269)
DYNAMIC_CAST (270)
ELSE (271)
ENUM (272)
EXPLICIT (273)
EXPORT (274)
EXTERN (275)
FALSE (276)
FOR (277)
FRIEND (278)
GOTO (279)
IF (280)
INLINE (281)
MUTABLE (282)
NAMESPACE (283)
NEW (284)
OPERATOR (285)
PRIVATE (286)
PROTECTED (287)
PUBLIC (288)
REGISTER (289)
REINTERPRET_CAST (290)
RETURN (291)
SIZEOF (292)
STATIC (293)
STATIC_CAST (294)
STRUCT (295)
SWITCH (296)
TEMPLATE (297)
THIS (298)
THROW (299)
TRUE (300)
TRY (301)
TYPEDEF (302)
TYPEID (303)
TYPENAME (304)
UNION (305)
USING (306)
VIRTUAL (307)
VOLATILE (308)
WHILE (309)
ELLIPSIS (310)
SCOPE (311)
SHL (312) 38
SHR (313) 39
EQ (314) 40
NE (315) 41
LE (316) 42
GE (317) 43
LOG_AND (318) 44
LOG_OR (319) 45
INC (320)
DEC (321)
ARROW (322)
ARROW_STAR (323)
DOT_STAR (324)
ASS_ADD (325)
ASS_AND (326)
ASS_DIV (327)
ASS_MOD (328)
ASS_MUL (329)
ASS_OR (330)
ASS_SHL (331)
ASS_SHR (332)
ASS_SUB (333)
ASS_XOR (334)
BuiltInTypeSpecifier (335)
CharacterLiteral (336) 6 26
Identifier (337) 18 27
MetaType (338)
NewLine (339) 15 29 74
NumberLiteral (340) 8 30
StringLiteral (341) 9 31
TreeLiteral (342)
ERROR (343)
NIL (344)
RAMMARG (345)
BODY (346)
DERIVED (347)
EMIT (348)
ENTRY (349)
EXIT (350)
FILE (351)
FROZEN (352)
GUARD (353)
IMPLEMENTATION (354)
INCLUDE (355)
INTERFACE (356)
NOGUARD (357)
NOIMPLEMENTATION (358)
OVERLOAD (359)
PATH (360)
POOL (361)
POST (362)
PRE (363)
PREFIX (364)
PURE (365)
SUFFIX (366)
UTILITY (367)
ALL (368)
PLACEHOLDER (369)
PLACEMENT (370)
NOAUTO (371)
HASH_BLANK (372)
HASH_DEFINE (373)
HASH_ELIF (374)
HASH_ELSE (375)
HASH_ENDIF (376)
HASH_ERROR (377)
HASH_IF (378)
HASH_IFDEF (379)
HASH_IFNDEF (380)
HASH_INCLUDE (381)
HASH_LINE (382)
HASH_PRAGMA (383)
HASH_UNDEF (384)
HASH_HASH (385) 37
DI_HASH_HASH (386)
DI_HASH (387)
DI_SQUARE (388)
DI_ERAUQS (389)
DI_ECARB (390)
DEFINED (391)
DO_FUNCTION (392) 11 16
MacroId (393) 7 28
Punct (394) 36
Text (395)
SHIFT_THERE (396)
REDUCE_HERE_MOSTLY (397)
REDUCE_HERE (398)
BOOL (399)
CHAR (400)
DOUBLE (401)
FLOAT (402)
INT (403)
LONG (404)
SHORT (405)
SIGNED (406)
UNSIGNED (407)
VOID (408)
WCHAR_T (409)
IntegerLiteral (410)
FloatingLiteral (411)

Nonterminals, with rules where they appear

gram0 (188)
    on left: 1 2 3 4 5 6 7 8 9 10 11, on right: 12
gram3 (189)
    on left: 12 13 14 15, on right: 13 14 15 17
gram (190)
    on left: 16 17, on right: 2 3 4 5 6 7 8 9 10 11 16
id (191)
    on left: 18, on right: 10 11 16
args1 (192)
    on left: 19 20 21, on right: 20 21 22
args (193)
    on left: 22, on right: 11
tokens (194)
    on left: 23 24 25 26 27 28 29 30 31 32, on right: 20 34
toks0 (195)
    on left: 33 34 35, on right: 32 34 35
punct (196)
    on left: 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53
    54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71,
    on right: 2 23
ws.opt (197)
    on left: 72 73 74, on right: 11 16 73 74


state 0

    $default	reduce using rule 1 (gram0)

    gram0	go to state 1
    gram3	go to state 2
    gram	go to state 3



state 1

    gram3  ->  gram0 .   (rule 12)

    $default	reduce using rule 12 (gram3)



state 2

    gram3  ->  gram3 . '('   (rule 13)
    gram3  ->  gram3 . ' '   (rule 14)
    gram3  ->  gram3 . NewLine   (rule 15)
    gram  ->  gram3 .   (rule 17)

    NewLine	shift, and go to state 4
    '(' 	shift, and go to state 5
    ' ' 	shift, and go to state 6

    $default	reduce using rule 17 (gram)



state 3

    gram0  ->  gram . punct   (rule 2)
    gram0  ->  gram . ','   (rule 3)
    gram0  ->  gram . ')'   (rule 4)
    gram0  ->  gram . '{'   (rule 5)
    gram0  ->  gram . CharacterLiteral   (rule 6)
    gram0  ->  gram . MacroId   (rule 7)
    gram0  ->  gram . NumberLiteral   (rule 8)
    gram0  ->  gram . StringLiteral   (rule 9)
    gram0  ->  gram . id   (rule 10)
    gram0  ->  gram . id DO_FUNCTION ws.opt args   (rule 11)
    gram  ->  gram . id DO_FUNCTION ws.opt   (rule 16)

    $   	go to state 77
    SHL 	shift, and go to state 7
    SHR 	shift, and go to state 8
    EQ  	shift, and go to state 9
    NE  	shift, and go to state 10
    LE  	shift, and go to state 11
    GE  	shift, and go to state 12
    LOG_AND	shift, and go to state 13
    LOG_OR	shift, and go to state 14
    CharacterLiteral	shift, and go to state 15
    Identifier	shift, and go to state 16
    NumberLiteral	shift, and go to state 17
    StringLiteral	shift, and go to state 18
    HASH_HASH	shift, and go to state 19
    MacroId	shift, and go to state 20
    Punct	shift, and go to state 21
    '{' 	shift, and go to state 22
    '}' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    ']' 	shift, and go to state 25
    '#' 	shift, and go to state 26
    ')' 	shift, and go to state 27
    ';' 	shift, and go to state 28
    ':' 	shift, and go to state 29
    '?' 	shift, and go to state 30
    '.' 	shift, and go to state 31
    '+' 	shift, and go to state 32
    '-' 	shift, and go to state 33
    '*' 	shift, and go to state 34
    '/' 	shift, and go to state 35
    '%' 	shift, and go to state 36
    '^' 	shift, and go to state 37
    '&' 	shift, and go to state 38
    '|' 	shift, and go to state 39
    '~' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '=' 	shift, and go to state 42
    '<' 	shift, and go to state 43
    '>' 	shift, and go to state 44
    ',' 	shift, and go to state 45
    '@' 	shift, and go to state 46
    '$' 	shift, and go to state 47
    '\''	shift, and go to state 48
    '"' 	shift, and go to state 49
    '\\'	shift, and go to state 50

    id  	go to state 51
    punct	go to state 52



state 4

    gram3  ->  gram3 NewLine .   (rule 15)

    $default	reduce using rule 15 (gram3)



state 5

    gram3  ->  gram3 '(' .   (rule 13)

    $default	reduce using rule 13 (gram3)



state 6

    gram3  ->  gram3 ' ' .   (rule 14)

    $default	reduce using rule 14 (gram3)



state 7

    punct  ->  SHL .   (rule 38)

    $default	reduce using rule 38 (punct)



state 8

    punct  ->  SHR .   (rule 39)

    $default	reduce using rule 39 (punct)



state 9

    punct  ->  EQ .   (rule 40)

    $default	reduce using rule 40 (punct)



state 10

    punct  ->  NE .   (rule 41)

    $default	reduce using rule 41 (punct)



state 11

    punct  ->  LE .   (rule 42)

    $default	reduce using rule 42 (punct)



state 12

    punct  ->  GE .   (rule 43)

    $default	reduce using rule 43 (punct)



state 13

    punct  ->  LOG_AND .   (rule 44)

    $default	reduce using rule 44 (punct)



state 14

    punct  ->  LOG_OR .   (rule 45)

    $default	reduce using rule 45 (punct)



state 15

    gram0  ->  gram CharacterLiteral .   (rule 6)

    $default	reduce using rule 6 (gram0)



state 16

    id  ->  Identifier .   (rule 18)

    $default	reduce using rule 18 (id)



state 17

    gram0  ->  gram NumberLiteral .   (rule 8)

    $default	reduce using rule 8 (gram0)



state 18

    gram0  ->  gram StringLiteral .   (rule 9)

    $default	reduce using rule 9 (gram0)



state 19

    punct  ->  HASH_HASH .   (rule 37)

    $default	reduce using rule 37 (punct)



state 20

    gram0  ->  gram MacroId .   (rule 7)

    $default	reduce using rule 7 (gram0)



state 21

    punct  ->  Punct .   (rule 36)

    $default	reduce using rule 36 (punct)



state 22

    gram0  ->  gram '{' .   (rule 5)

    $default	reduce using rule 5 (gram0)



state 23

    punct  ->  '}' .   (rule 47)

    $default	reduce using rule 47 (punct)



state 24

    punct  ->  '[' .   (rule 48)

    $default	reduce using rule 48 (punct)



state 25

    punct  ->  ']' .   (rule 49)

    $default	reduce using rule 49 (punct)



state 26

    punct  ->  '#' .   (rule 46)

    $default	reduce using rule 46 (punct)



state 27

    gram0  ->  gram ')' .   (rule 4)

    $default	reduce using rule 4 (gram0)



state 28

    punct  ->  ';' .   (rule 50)

    $default	reduce using rule 50 (punct)



state 29

    punct  ->  ':' .   (rule 51)

    $default	reduce using rule 51 (punct)



state 30

    punct  ->  '?' .   (rule 52)

    $default	reduce using rule 52 (punct)



state 31

    punct  ->  '.' .   (rule 53)

    $default	reduce using rule 53 (punct)



state 32

    punct  ->  '+' .   (rule 54)

    $default	reduce using rule 54 (punct)



state 33

    punct  ->  '-' .   (rule 55)

    $default	reduce using rule 55 (punct)



state 34

    punct  ->  '*' .   (rule 56)

    $default	reduce using rule 56 (punct)



state 35

    punct  ->  '/' .   (rule 57)

    $default	reduce using rule 57 (punct)



state 36

    punct  ->  '%' .   (rule 58)

    $default	reduce using rule 58 (punct)



state 37

    punct  ->  '^' .   (rule 59)

    $default	reduce using rule 59 (punct)



state 38

    punct  ->  '&' .   (rule 60)

    $default	reduce using rule 60 (punct)



state 39

    punct  ->  '|' .   (rule 61)

    $default	reduce using rule 61 (punct)



state 40

    punct  ->  '~' .   (rule 62)

    $default	reduce using rule 62 (punct)



state 41

    punct  ->  '!' .   (rule 63)

    $default	reduce using rule 63 (punct)



state 42

    punct  ->  '=' .   (rule 64)

    $default	reduce using rule 64 (punct)



state 43

    punct  ->  '<' .   (rule 65)

    $default	reduce using rule 65 (punct)



state 44

    punct  ->  '>' .   (rule 66)

    $default	reduce using rule 66 (punct)



state 45

    gram0  ->  gram ',' .   (rule 3)

    $default	reduce using rule 3 (gram0)



state 46

    punct  ->  '@' .   (rule 67)

    $default	reduce using rule 67 (punct)



state 47

    punct  ->  '$' .   (rule 68)

    $default	reduce using rule 68 (punct)



state 48

    punct  ->  '\'' .   (rule 69)

    $default	reduce using rule 69 (punct)



state 49

    punct  ->  '"' .   (rule 70)

    $default	reduce using rule 70 (punct)



state 50

    punct  ->  '\\' .   (rule 71)

    $default	reduce using rule 71 (punct)



state 51

    gram0  ->  gram id .   (rule 10)
    gram0  ->  gram id . DO_FUNCTION ws.opt args   (rule 11)
    gram  ->  gram id . DO_FUNCTION ws.opt   (rule 16)

    DO_FUNCTION	shift, and go to state 53

    $default	reduce using rule 10 (gram0)



state 52

    gram0  ->  gram punct .   (rule 2)

    $default	reduce using rule 2 (gram0)



state 53

    gram0  ->  gram id DO_FUNCTION . ws.opt args   (rule 11)
    gram  ->  gram id DO_FUNCTION . ws.opt   (rule 16)

    $default	reduce using rule 72 (ws.opt)

    ws.opt	go to state 54



state 54

    gram0  ->  gram id DO_FUNCTION ws.opt . args   (rule 11)
    gram  ->  gram id DO_FUNCTION ws.opt .   (rule 16)
    ws.opt  ->  ws.opt . ' '   (rule 73)
    ws.opt  ->  ws.opt . NewLine   (rule 74)

    NewLine	shift, and go to state 55
    '(' 	shift, and go to state 56
    ' ' 	shift, and go to state 57

    $default	reduce using rule 16 (gram)

    args1	go to state 58
    args	go to state 59



state 55

    ws.opt  ->  ws.opt NewLine .   (rule 74)

    $default	reduce using rule 74 (ws.opt)



state 56

    args1  ->  '(' .   (rule 19)

    $default	reduce using rule 19 (args1)



state 57

    ws.opt  ->  ws.opt ' ' .   (rule 73)

    $default	reduce using rule 73 (ws.opt)



state 58

    args1  ->  args1 . tokens   (rule 20)
    args1  ->  args1 . ','   (rule 21)
    args  ->  args1 . ')'   (rule 22)

    SHL 	shift, and go to state 7
    SHR 	shift, and go to state 8
    EQ  	shift, and go to state 9
    NE  	shift, and go to state 10
    LE  	shift, and go to state 11
    GE  	shift, and go to state 12
    LOG_AND	shift, and go to state 13
    LOG_OR	shift, and go to state 14
    CharacterLiteral	shift, and go to state 60
    Identifier	shift, and go to state 61
    NewLine	shift, and go to state 62
    NumberLiteral	shift, and go to state 63
    StringLiteral	shift, and go to state 64
    HASH_HASH	shift, and go to state 19
    MacroId	shift, and go to state 65
    Punct	shift, and go to state 21
    '{' 	shift, and go to state 66
    '}' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    ']' 	shift, and go to state 25
    '#' 	shift, and go to state 26
    '(' 	shift, and go to state 67
    ')' 	shift, and go to state 68
    ';' 	shift, and go to state 28
    ':' 	shift, and go to state 29
    '?' 	shift, and go to state 30
    '.' 	shift, and go to state 31
    '+' 	shift, and go to state 32
    '-' 	shift, and go to state 33
    '*' 	shift, and go to state 34
    '/' 	shift, and go to state 35
    '%' 	shift, and go to state 36
    '^' 	shift, and go to state 37
    '&' 	shift, and go to state 38
    '|' 	shift, and go to state 39
    '~' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '=' 	shift, and go to state 42
    '<' 	shift, and go to state 43
    '>' 	shift, and go to state 44
    ',' 	shift, and go to state 69
    '@' 	shift, and go to state 46
    '$' 	shift, and go to state 47
    '\''	shift, and go to state 48
    '"' 	shift, and go to state 49
    '\\'	shift, and go to state 50
    ' ' 	shift, and go to state 70

    tokens	go to state 71
    toks0	go to state 72
    punct	go to state 73



state 59

    gram0  ->  gram id DO_FUNCTION ws.opt args .   (rule 11)

    $default	reduce using rule 11 (gram0)



state 60

    tokens  ->  CharacterLiteral .   (rule 26)

    $default	reduce using rule 26 (tokens)



state 61

    tokens  ->  Identifier .   (rule 27)

    $default	reduce using rule 27 (tokens)



state 62

    tokens  ->  NewLine .   (rule 29)

    $default	reduce using rule 29 (tokens)



state 63

    tokens  ->  NumberLiteral .   (rule 30)

    $default	reduce using rule 30 (tokens)



state 64

    tokens  ->  StringLiteral .   (rule 31)

    $default	reduce using rule 31 (tokens)



state 65

    tokens  ->  MacroId .   (rule 28)

    $default	reduce using rule 28 (tokens)



state 66

    tokens  ->  '{' .   (rule 24)

    $default	reduce using rule 24 (tokens)



state 67

    toks0  ->  '(' .   (rule 33)

    $default	reduce using rule 33 (toks0)



state 68

    args  ->  args1 ')' .   (rule 22)

    $default	reduce using rule 22 (args)



state 69

    args1  ->  args1 ',' .   (rule 21)

    $default	reduce using rule 21 (args1)



state 70

    tokens  ->  ' ' .   (rule 25)

    $default	reduce using rule 25 (tokens)



state 71

    args1  ->  args1 tokens .   (rule 20)

    $default	reduce using rule 20 (args1)



state 72

    tokens  ->  toks0 . ')'   (rule 32)
    toks0  ->  toks0 . tokens   (rule 34)
    toks0  ->  toks0 . ','   (rule 35)

    SHL 	shift, and go to state 7
    SHR 	shift, and go to state 8
    EQ  	shift, and go to state 9
    NE  	shift, and go to state 10
    LE  	shift, and go to state 11
    GE  	shift, and go to state 12
    LOG_AND	shift, and go to state 13
    LOG_OR	shift, and go to state 14
    CharacterLiteral	shift, and go to state 60
    Identifier	shift, and go to state 61
    NewLine	shift, and go to state 62
    NumberLiteral	shift, and go to state 63
    StringLiteral	shift, and go to state 64
    HASH_HASH	shift, and go to state 19
    MacroId	shift, and go to state 65
    Punct	shift, and go to state 21
    '{' 	shift, and go to state 66
    '}' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    ']' 	shift, and go to state 25
    '#' 	shift, and go to state 26
    '(' 	shift, and go to state 67
    ')' 	shift, and go to state 74
    ';' 	shift, and go to state 28
    ':' 	shift, and go to state 29
    '?' 	shift, and go to state 30
    '.' 	shift, and go to state 31
    '+' 	shift, and go to state 32
    '-' 	shift, and go to state 33
    '*' 	shift, and go to state 34
    '/' 	shift, and go to state 35
    '%' 	shift, and go to state 36
    '^' 	shift, and go to state 37
    '&' 	shift, and go to state 38
    '|' 	shift, and go to state 39
    '~' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '=' 	shift, and go to state 42
    '<' 	shift, and go to state 43
    '>' 	shift, and go to state 44
    ',' 	shift, and go to state 75
    '@' 	shift, and go to state 46
    '$' 	shift, and go to state 47
    '\''	shift, and go to state 48
    '"' 	shift, and go to state 49
    '\\'	shift, and go to state 50
    ' ' 	shift, and go to state 70

    tokens	go to state 76
    toks0	go to state 72
    punct	go to state 73



state 73

    tokens  ->  punct .   (rule 23)

    $default	reduce using rule 23 (tokens)



state 74

    tokens  ->  toks0 ')' .   (rule 32)

    $default	reduce using rule 32 (tokens)



state 75

    toks0  ->  toks0 ',' .   (rule 35)

    $default	reduce using rule 35 (toks0)



state 76

    toks0  ->  toks0 tokens .   (rule 34)

    $default	reduce using rule 34 (toks0)



state 77

    $   	go to state 78



state 78

    $default	accept
