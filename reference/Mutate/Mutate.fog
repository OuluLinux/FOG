/* From Ed Willink's thesis:
	
ANSI C introduced the const qualifier to types to define unchanging values. C++
extends const to apply to objects and consequently member functions. Use of
const ensures that any attempt to change an object is detected at compile time.
However, it may be appropriate for the implementation of an object to perform lazy
evaluation of some of its properties, caching the results to avoid a re-evaluation.
For example, the conventional complex class has a Cartesian representation, and
must therefore calculate a polar representation, each time the polar
representation is requested. A more sophisticated complex number class could
cache the polar representation lazily, so that no calculation cost was incurred
when the polar representation was unused, and avoid additional calculation cost
for uses after the first. From an external perspective, the complex number object
is unchanged by the use of a polar representation and so the usage method should
be const. Internally the cached context changes and so the object is not const.
This distinction is referred to as physically-const and logically-const on p26 of
[Coplien95b]. On p76, [Meyers92] uses the term conceptual constness.
Implementation of logically-const code requires that the const qualifier to be cast
away.
	((ComplexNumber *)this)->_polar_value = ...
	
Usage of casts in application code is considered poor style. They are prone to
error: any kind of change can be performed, although only a very subtle change
was intended. When reviewing code it is difficult to locate casts with searching
tools, and it is not always obvious what the intent of the cast is. Wrapping the
necessary cast up in a private overloaded inline function makes the meaning
clear, and simplifies searching for the usage, and allows a stronger no-casts
programming practice to be used elsewhere.
	
	class ComplexNumber
	{
		private:
		inline ComplexNumber& mutate() const {
			return *(ComplexNumber *)this;
		}
	};

supports use within ComplexNumber member functions as:
	mutate()._polar_value = ...
This can be implemented by a simple meta-function:
*/

auto declaration Mutate() {
	private $Scope& Mutate() const { return *($Scope *)this; }
}

class ComplexNumber {
	int n = 0;
	$Mutate();
};

int main() {
	ComplexNumber n;
	const ComplexNumber& const_ref = n;
	const_ref.Mutate().n = 1;
}
